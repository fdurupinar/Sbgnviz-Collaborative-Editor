[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/ContextAgent.js",
    "content": "//\n// /**\n//  * Author: Funda Durupinar Babur\n//  * Created by durupina on 5/13/16.\n//  * This is a client-side agent that extends from the Agent class.\n//  */\n//\n//\n// //TODO: this should be written as a Python agent\n// //NOT BEING USED NOW\n// // if(typeof module !== 'undefined' && module.exports)\n// let Agent = require(\"./agentAPI.js\");\n//\n//\n// const cancerTypes = [\n//     {abbr: \"ACC\", longName:\"Adrenocortical carcinoma\"},\n//     {abbr: \"BLCA\",longName:\"Bladder Urothelial Carcinoma\"},\n//     {abbr:\"BRCA\",longName:\"Breast invasive carcinoma\"},\n//     {abbr:\"CESC\",longName:\"Cervical squamous cell carcinoma and endocervical adenocarcinoma\"},\n//     {abbr:\"CHOL\",longName:\"Cholangiocarcinoma\"},\n//     {abbr:\"COAD\",longName:\"Colon adenocarcinoma\"},\n//     {abbr:\"COADREAD\",longName:\"Colorectal cancer\"},\n//     {abbr:\"DLBC\",longName:\"Lymphoid Neoplasm Diffuse Large B-cell Lymphoma\"},\n//     {abbr:\"GBM\",longName:\"Glioblastoma multiforme\"},\n//     {abbr:\"GBMLGG\",longName:\"Glioblastoma multiforme/Brain Lower Grade Glioma\"},\n//     {abbr:\"HNSC\",longName:\"Head and Neck squamous cell carcinoma\"},\n//     {abbr:\"KICH\",longName:\"Kidney Chromophobe\"},\n//     {abbr:\"KIPAN\",longName:\"Pan-Kidney\"},\n//     {abbr:\"KIRC\",longName:\"Kidney renal clear cell carcinoma\"},\n//     {abbr:\"KIRP\",longName:\"Kidney renal papillary cell carcinoma\"},\n//     {abbr:\"LAML\",longName:\"\tAcute Myeloid Leukemia\"},\n//     {abbr:\"LGG\",longName:\"Brain Lower Grade Glioma\"},\n//     {abbr:\"LIHC\",longName:\"Liver hepatocellular carcinoma\"},\n//     {abbr:\"LUAD\",longName:\"Lung adenocarcinoma\"},\n//     {abbr:\"LUSC\",longName:\"Lung squamous cell carcinoma\"},\n//     {abbr:\"OV\",longName:\"Oletian serous cystadenocarcinoma\"},\n//     {abbr:\"PAAD\",longName:\"Pancreatic adenocarcinoma\"},\n//     {abbr:\"PCPG\",longName:\"Pheochromocytoma and Paraganglioma\"},\n//     {abbr:\"PRAD\",longName:\"Prostate adenocarcinoma\"},\n//     {abbr:\"READ\",longName:\"Rectum adenocarcinoma\"},\n//     {abbr:\"SARC\", longName:\"Sarcoma\"},\n//     {abbr:\"SKCM\", longName:\"Skin Cutaneous Melanoma\"},\n//     {abbr:\"STAD\", longName:\"Stomach adenocarcinoma\"},\n//     {abbr:\"STES\", longName:\"Stomach and Esophageal carcinoma\"},\n//     {abbr:\"TGCT\", longName:\"Testicular Germ Cell Tumors\"},\n//     {abbr:\"THCA\", longName:\"Thyroid carcinoma\"},\n//     {abbr:\"UCEC\", longName:\"Uterine Corpus Endometrial Carcinoma\"},\n//     {abbr:\"UCS\", longName:\"Uterine Carcinosarcoma\"},\n//     {abbr:\"UVM\", longName:\"Uveal Melanoma\"}];\n//\n// class ContextAgent extends Agent{\n//     /**\n//      *\n//      * @param {string} name Agent name\n//      * @param {string} id Agent id\n//      */\n//     constructor(name, id) {\n//\n//         super(name, id);\n//\n//         this.cancerList = []; //cancerType, genes[{importance, interactionCount}], importance, confidence\n//         this.cancerInd; //most likely cancer\n//\n//         //Must be objects to send over socket.io -- cannot be arrays\n//         this.speciesList = {}; //species types and their scores\n//         this.organList = {}; //organ types and their scores\n//\n//         this.cancerQuestionInd; //for communication through chat\n//         this.neighborhoodQuestionInd; //for communication through chat\n//\n//\n//         this.mostImportantNeighborName;\n//         this.mostImportantGeneName;\n//         this.mostImportantNode;\n//\n//\n//     }\n//\n//     /**\n//      * Read mutsig analysis data into memory\n//      * @param {string} cancerType\n//      * @param {string} fileContent  Read from the disk\n//      */\n//     initCancerGeneInformation(cancerType,  fileContent){\n//\n//         let cancer = {cancerType: cancerType, genes:new Object(), relevance:0, confidence:1};\n//\n//         let genes = fileContent.split(\"\\n\").slice(1); //start from the second line\n//\n//         genes.forEach((gene) =>{\n//             let geneInfo = gene.split(\"\\t\");\n//             let pVal = Number(geneInfo[17]);\n//             let importance = (pVal== 0) ? 100 : -Math.log10(pVal);\n//\n//             cancer.genes[geneInfo[1]] = {importance: importance, exclude:false};\n//\n//         });\n//\n//\n//         this.cancerList.push(cancer);\n//\n//     }\n//\n//\n//     initContext(callback){\n//\n//         let context = this.getContext();\n//         if(context) {\n//             if (context.speciesList)\n//                 this.speciesList = context.speciesList;\n//             if (context.organList)\n//                 this.organList = context.organList;\n//         }\n//\n//\n//\n//         cancerTypes.forEach((cancerType) => {\n//             readTextFile(\"TCGA/\" + cancerType.abbr + \"/scores-mutsig.txt\", (fileContent) => {\n//                 this.initCancerGeneInformation(cancerType, fileContent);\n//             });\n//         });\n//\n//         //update each node's contribution by 1\n//         let nodes = this.getNodeList();\n//\n//\n//         //update cumulative contributions of nodes for each cancer type\n//         this.updateCancerRelevance(nodes);\n//\n//\n//         if(callback) callback();\n//     }\n//\n//\n//     getContext(){\n//         return this.pageDoc.context;\n//     }\n//\n//\n//     isGene(node){\n//         if(node.sbgnlabel && node.sbgnclass && ( (node.sbgnclass.indexOf(\"macromolecule\") > -1 || node.sbgnclass.indexOf(\"nucleic\") > -1 || node.sbgnclass.indexOf(\"chemical\") > -1)))\n//             return true;\n//         return false;\n//     }\n//\n//     updateCancerRelevance (nodes) {\n//\n//         this.cancerList.forEach( (cancer)=> {\n//             let cumRelevance = 0;\n//             let geneCnt = 0;\n//             for(let nodeId in nodes){\n//                 let node = nodes[nodeId];\n//\n//\n//                 if(this.isGene(node) && cancer.genes[node.sbgnlabel.toUpperCase()]){\n//                     let gene = cancer.genes[node.sbgnlabel.toUpperCase()];\n//                     cumRelevance += node.interactionCount * gene.importance;\n//\n//\n//                     geneCnt++;\n//                 }\n//             }\n//\n//             if(geneCnt > 0)\n//                 cancer.relevance = cumRelevance/geneCnt;\n//             else\n//                 cancer.relevance = 0;\n//\n//\n//\n//\n//\n//         });\n//     }\n//\n//     evaluateMessage(callback){\n//\n//         this.socket.on('message', (data)=>{\n//         let answer;\n//\n//             //FIXME: find a better solution to get human response\n//             if(data.userId != this.agentId) {\n//                 console.log(this.chatHistory.length + \" \" + data);\n//                 if(this.chatHistory.length  ==  this.cancerQuestionInd + 2) {  //means human answered in response to agent's question about cancer type\n//\n//                     answer = data.comment;\n//\n//                     if (answer.toLowerCase().search(\"ye\") > -1) {  //yes\n//                         //this.cancerList[this.cancerInd].confidence = 100;\n//                         this.cancerList[this.cancerInd].confidence *= 2;\n//\n//                         this.mostImportantNode = this.findMostImportantNodeInContext(this.getNodeList(), this.cancerList[this.cancerInd]);\n//\n//\n//                         if( this.mostImportantNode ) {\n//                             this.findMostImportantNeighborInContext(true, this.mostImportantNode.sbgnlabel.toUpperCase(), this.cancerList[this.cancerInd],  (neighborName)=> {\n//\n//\n//                                 this.mostImportantNeighborName = neighborName;\n//\n//                                 this.informAboutNeighborhood(this.mostImportantNode.sbgnlabel.toUpperCase(), neighborName);\n//                             });\n//                         }\n//\n//                     }\n//\n//                     else if (answer.toLowerCase().search(\"n\") > -1) {\n//                         //this.cancerList[this.cancerInd].confidence = 0;\n//                         this.cancerList[this.cancerInd].confidence *= 0.5;\n//\n//                     }\n//                     //else don't do anything\n//\n//\n//                 }\n//                 else if(this.chatHistory.length  ==  this.neighborhoodQuestionInd + 2) {\n//                     answer = data.comment;\n//\n//\n//\n//                     if (answer.toLowerCase().search(\"ye\") > -1)  //yes\n//                         this.suggestNewGraph( this.mostImportantNode.sbgnlabel.toUpperCase(), this.mostImportantNeighborName);\n//\n//                     else if (answer.toLowerCase().search(\"no\") > -1){\n//\n//                         this.cancerList[this.cancerInd].genes[this.mostImportantNeighborName].exclude = true;\n//\n//                         if( this.mostImportantNode ) {\n//\n//                             this.findMostImportantNeighborInContext(false, this.mostImportantNode.sbgnlabel.toUpperCase(), this.cancerList[this.cancerInd], (neighborName)=> {\n//\n//\n//                                 this.mostImportantNeighborName = neighborName;\n//\n//\n//                                 this.informAboutNeighborhood(this.mostImportantNode.sbgnlabel.toUpperCase(), neighborName);\n//                             });\n//                         }\n//\n//                     }\n//                 }\n//\n//\n//                 if(callback) callback();\n//             }\n//\n//         });\n//     }\n//\n//     findMostImportantNodeInContext(nodes, cancer){\n//\n//         let maxScore = -100000;\n//         let bestNode;\n//         for(let nodeInd in nodes){\n//             let node = nodes[nodeInd];\n//\n//             // console.log(node.interactionCount);\n//             if(this.isGene(node)){\n//                 let gene = cancer.genes[node.sbgnlabel.toUpperCase()];\n//                 if(gene && gene.importance* node.interactionCount > maxScore) {\n//                     maxScore = gene.importance * node.interactionCount;\n//                     bestNode = node;\n//                 }\n//\n//             }\n//         }\n//\n//         return bestNode;\n//     }\n//\n//     /**\n//      * Evaluates chat message outputs based on REACH response in fries format\n//      */\n//     updateContextSpeciesAndOrgans(callback){\n//\n//\n//         this.socket.on(\"REACHResult\", (data)=>{\n//             let friesObj = JSON.parse(data);\n//             if(friesObj.entities && friesObj.entities.frames){\n//                 friesObj.entities.frames.forEach((frame)=>{\n//                     if(frame.type == \"species\") {\n//                         if(this.speciesList[frame.text])\n//                             this.speciesList[frame.text]++;\n//                         else\n//                             this.speciesList[frame.text] = 1;\n//                     }\n//\n//                     else if(frame.type == \"organ\") {\n//                         if(this.organList[frame.text])\n//                             this.organList[frame.text]++;\n//                         else\n//                             this.organList[frame.text] = 1;\n//                     }\n//                 });\n//\n//\n//\n//                 this.sendRequest(\"agentContextUpdate\", {param:{ speciesList:this.speciesList, organList:this.organList}});\n//\n//                 if(callback) callback();\n//\n//             }\n//         });\n//     }\n//\n//\n//\n//\n//     /**\n//      * Update cancer scores at each operation\n//      * @param op\n//      */\n//     updateContextCancer(callback){\n//\n//         let nodes = this.getNodeList(); //this is called after nodes are updated\n//\n//\n//\n//         this.updateCancerRelevance(nodes);\n//\n//         let prevcancerInd = this.cancerInd;\n//         this.cancerInd = this.findBestContext();\n//\n//\n//         if(this.cancerList[this.cancerInd].relevance *  this.cancerList[this.cancerInd].confidence >0){\n//\n//             //if cancer changed\n//             if(!prevcancerInd  || (this.cancerInd>-1 && prevcancerInd!=this.cancerInd &&  this.cancerList[this.cancerInd].cancerType!= this.cancerList[prevcancerInd].cancerType )) { //only inform if the most likely cancer has changed\n//\n//                 let cancer = this.cancerList[this.cancerInd];\n//                 this.informAboutCancer(cancer);\n//\n//\n//             }\n//\n//\n//             //update most important node and its neighbor\n//             let node = this.findMostImportantNodeInContext(nodes, this.cancerList[this.cancerInd]);\n//             if(node) {\n//\n//                 let prevNeighborName = this.mostImportantNeighborName;\n//                 let prevGeneName = this.mostImportantGeneName;\n//                 if (prevNeighborName != this.mostImportantNeighborName && prevGeneName != this.mostImportantGeneName) {\n//                     this.findMostImportantNeighborInContext(true, node.sbgnlabel.toUpperCase(), this.cancerList[this.cancerInd], (neighborName)=> {\n//\n//                         this.mostImportantNeighborName = neighborName;\n//                         this.mostImportantGeneName = node.sbgnlabel.toUpperCase();\n//\n//\n//                         this.informAboutNeighborhood(node.sbgnlabel.toUpperCase(), neighborName);\n//                     });\n//                 }\n//             }\n//         }\n//\n//         // this.sendRequest(\"agentContextUpdate\", {param: {cancerType: this.cancerList[this.cancerInd].cancerType, geneName: this.mostImportantGeneName,\n//         // neighborName: this.mostImportantNeighborName}}); //only send the names of most important values\n//\n//         if (callback) callback();\n//\n//\n//\n//\n//     }\n//\n//\n//     printcancerList(){\n//         this.cancerList.forEach((cancer)=>{\n//             console.log(cancer);\n//         })\n//     }\n//     printMutationData(cancerData){\n//         cancerData.forEach((study)=> {\n//             if(study.seqCaseCnt > 0){\n//\n//                 console.log(study.id +  \": %\"+  (study.mutationCaseIds.length*100/study.seqCaseCnt));\n//             }\n//\n//         });\n//     }\n//\n//     findBestContext(){\n//\n//\n//         let maxScore = - 100000;\n//         let maxcancerInd = -1;\n//         let ind = 0;\n//         this.cancerList.forEach((cancer)=>{\n//             let score = cancer.relevance * cancer.confidence;\n//             if (score> maxScore) {\n//                 maxScore = score;\n//                 maxcancerInd = ind;\n//             }\n//             ind++;\n//         });\n//\n//         return maxcancerInd;\n//     }\n//\n//     informAboutCancer(cancer){\n//\n//\n//\n//         let agentComment = \"The most likely cancer type is  \" + cancer.cancerType.longName;\n//         agentComment +=\". Do you agree?\"\n//\n//         let targets = [];\n//         for(let i = 0; i < this.userList.length; i++){ //FIXME: send to all the users for now\n//             targets.push({id: this.userList[i].userId});\n//         }\n//\n//\n//         this.sendMessage(agentComment, targets);\n//\n//         this.cancerQuestionInd = this.chatHistory.length - 1; //last question ind in history\n//\n//\n//     }\n//\n//     informAboutNeighborhood(geneName, neighborName){\n//\n//\n//         let agentComment =   neighborName + \" is another important gene in the neighborhood of \" + geneName +\n//             \". Are you interested in seeing the neighborhood graph?\";\n//\n//\n//\n//         this.sendMessage(agentComment,\"*\"); //send all\n//\n//         this.neighborhoodQuestionInd = this.chatHistory.length - 1; //last question ind in history\n//\n//\n//     }\n//\n//     ///////////////////////////////////////////////////////////////////////////\n//     ///////////////////////////////////////////////////////////////////////////\n//     ///////////////////////////////////////////////////////////////////////////\n//     isInModel(geneName){\n//\n//\n//         let nodes = this.getNodeList();\n//\n//         for(let nodeInd in nodes){\n//             if(this.isGene(nodes[nodeInd]))\n//                 if(nodes[nodeInd].sbgnlabel.toUpperCase() == geneName.toUpperCase())\n//                     return true;\n//         }\n//\n//         return false;\n//     }\n//\n//     /**\n//      *\n//      * @param order\n//      * @param geneName\n//      * @param cancer\n//      * @param callback\n//      */\n//     findMostImportantNeighborInContext(tellGeneName, geneName, cancer, callback){\n//\n//\n//\n//\n//         let pc2URL = \"http://www.pathwaycommons.org/pc2/\";\n//         let format = \"graph?format=BINARY_SIF\";\n//         let kind = \"&kind=NEIGHBORHOOD\";\n//\n//         let sources = \"&source=\" +geneName;\n//\n//         pc2URL = pc2URL + format + kind + sources;\n//\n//\n//         if(geneName) {\n//\n//             this.socket.emit('PCQuery', {url: pc2URL, type: \"sif\"});\n//             if(tellGeneName)\n//                 this.sendMessage((\"The most important gene  in your network for this cancer type is \" + geneName +\". I'm looking up its neighborhood alterations...\"), \"*\");\n//         }\n//\n//\n//         this.socket.on('PCQueryResult', (data)=> {\n//             if(data.type == \"sif\"){\n//\n//\n//                 let neighbors = this.findAllControllingNeighbors(geneName, data.graph);\n//\n//\n//                 let importantNeighborName;\n//                 const MIN_IMPORTANCE  = 2; //p-value of 0.01\n//                 let maxScore = -100000;\n//\n//                 neighbors.forEach((neighborName)=> {\n//                     if (!this.isInModel(neighborName) && cancer.genes[neighborName] && !cancer.genes[neighborName].exclude && cancer.genes[neighborName].importance > MIN_IMPORTANCE && cancer.genes[neighborName].importance > maxScore) {\n//\n//                         maxScore = cancer.genes[neighborName].importance;\n//                         importantNeighborName = neighborName;\n//                     }\n//                 });\n//\n//\n//                 if(callback && importantNeighborName)\n//                     callback(importantNeighborName);\n//                 else\n//                     console.log(\"No important neighbors\");\n//\n//\n//             }\n//\n//         });\n//\n//     }\n//\n//     suggestNewGraph(geneName, importantNeighborName) {\n//\n//\n//         let pc2URL = \"http://www.pathwaycommons.org/pc2/\";\n//         let format = \"graph?format=SBGN\";\n//         let kind = \"&kind=PATHSBETWEEN\";\n//         let limit = \"&limit=1\";\n//\n//\n//         //PC only supports homo sapiens???\n//         // let species = \"\";\n//         // if(this.speciesInd > -1)\n//         //     species = \"&organism=\" + this.speciesList[this.speciesInd];\n//\n//         let sources = \"&source=\" + geneName + \"&source=\" + importantNeighborName;\n//\n//         pc2URL = pc2URL + format + kind + limit   + sources;\n//\n//\n//         this.sendRequest('AgentPCQueryRequest', {url: pc2URL, type: \"sbgn\"});\n//\n//\n//         this.socket.on('PCQueryResult', (data)=> {\n//             if (data.type == \"sbgn\") {\n//                 //if neighbor does not appear in the new graph, call the query with limit = 2\n//                 // if(limit.indexOf(\"=1\")>-1 && data.graph.indexOf(importantNeighborName)<0){\n//                 //     limit = \"&limit=2\";\n//                 //     pc2URL = \"http://www.pathwaycommons.org/pc2/\" + format + kind + limit + sources;\n//                 //     this.socket.emit('PCQuery', {url: pc2URL, type: \"sbgn\"});\n//                 // }\n//                 // else {\n//                 this.sendRequest(\"agentMergeGraphRequest\", {graph: data.graph, type:\"sbgn\"});\n//                 // }\n//             }\n//\n//         });\n//     }\n//\n//\n//     /**\n//      * Parses a graph in sif format and returns nodes that have edges that control state change\n//      * @param sifGraph\n//      * @param geneName: find the molecule that is different from geneName\n//      *\n//      */\n//     findAllControllingNeighbors(geneName, sifGraph){\n//         let lines = sifGraph.split(\"\\n\");\n//         let neighbors = [];\n//\n//         lines.forEach((line)=>{\n//\n//             let rel = line.split(\"\\t\");\n//\n//             if(rel[1].indexOf(\"controls\") >= 0){\n//                 if(rel[0] == geneName && neighbors.indexOf(rel[2]) < 0)\n//                     neighbors.push(rel[2]);\n//                 else if(rel[2] == geneName && neighbors.indexOf(rel[0]) < 0)\n//                     neighbors.push(rel[0]);\n//             }\n//\n//         });\n//\n//\n//\n//         return neighbors;\n//     }\n//\n// }\n//\n// /**\n//  * Local function to read a file\n//  * @param filePath\n//  * @param callback\n//  */\n// function readTextFile(filePath, callback) {\n//\n//     var rawFile;\n//\n//     rawFile = new XMLHttpRequest();\n//\n//     rawFile.open(\"GET\", filePath, false);\n//\n//     rawFile.onreadystatechange = function () {\n//\n//         if(rawFile.readyState === 4) {\n//             if(rawFile.status === 200 || rawFile.status == 0) {\n//                 var allText = rawFile.responseText;\n//                 console.log(\"File reading complete\");\n//                 callback(allText);\n//\n//\n//             }\n//         }\n//     }\n//     rawFile.send(null);\n// }\n//\n// // if(typeof module !== 'undefined' && module.exports)\n// module.exports = ContextAgent;\n//\n//\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/ContextAgent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js",
    "content": "/**\n * Created by durupina on 5/13/16.\n\n */\n\n// if(typeof module !== 'undefined' && module.exports) //ESDOC problem\nlet Agent = require(\"./agentAPI.js\");\n\n\n/**\n * Computer agent to provide communication between client and trips\n */\nclass TripsGeneralInterfaceAgent extends Agent{\n    constructor(agentName, id){\n        super(agentName, id);\n        /**\n         *\n         * @type {number} tripsUttNum\n         */\n        this.tripsUttNum = 1;\n    }\n    \n\n    init(){\n\n        this.sendRequest('agentConnectToTripsRequest', {isInterfaceAgent: true, userName: this.agentName }, (result) => {\n            if(!result)\n                this.disconnect();\n        });\n\n        this.listenToMessages();\n    }\n\n    /**\n     * Send the message coming from a human to server Trips interface\n     * @param {string} text\n     */\n\n    relayMessage(text){\n\n        this.sendRequest('relayMessageToTripsRequest', {text: '\"' + text +'\"', uttNum: this.tripsUttNum});\n        this.tripsUttNum++;\n    }\n\n    /**\n     * Send the given request to Trips server interface so that it can send the request to Trips\n     * @param {Object} data\n     */\n    sendTripsRequest(data){\n\n        this.sendRequest('agentSendTripsRequestRequest', data);\n\n    }\n\n    /***\n     * Listen to messages from other actors and act accordingly\n     */\n    listenToMessages(){\n\n        this.socket.on('message', (data) => {\n\n            if(this.isIntendedForBob(data)){\n                let msg = data.comment.replace(/@[bB][Oo][bB]/, \"\"); //clean the message anyway\n                this.relayMessage(msg);\n            }\n\n        });\n    }\n\n    /**\n     * Is message for Bob or the wizard\n     * @param {Object} data {targets {Array}, comment {string}, userId {string}}\n     * @returns {boolean}\n     */\n    isIntendedForBob(data){\n\n        let isBobChecked = false;\n        if(!data.targets || data.targets == '*')\n            isBobChecked = true;\n        else{\n            data.targets.forEach((target)=>{\n                if (target.id === 'Bob123')\n                    isBobChecked = true;\n            });\n        }\n\n        if(data.userId != this.agentId && isBobChecked) {\n            let wizardMode = document.getElementById('wizard-mode').checked;\n\n            if(wizardMode && data.comment.toUpperCase().indexOf(\"@BOB\")> -1 || !wizardMode) {  //trim\n                return true;\n            }\n\n        }\n\n        return false;\n\n    }\n\n}\n\n// if(typeof module !== 'undefined' && module.exports) //ESDOC problem\n    module.exports = TripsGeneralInterfaceAgent;\n\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2,
    "kind": "class",
    "name": "TripsGeneralInterfaceAgent",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js",
    "importStyle": "TripsGeneralInterfaceAgent",
    "description": "Computer agent to provide communication between client and trips",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent"
    ]
  },
  {
    "__docId__": 3,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "tripsUttNum",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent#tripsUttNum",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "init",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent#init",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "relayMessage",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent#relayMessage",
    "access": "public",
    "description": "Send the message coming from a human to server Trips interface",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "sendTripsRequest",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent#sendTripsRequest",
    "access": "public",
    "description": "Send the given request to Trips server interface so that it can send the request to Trips",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "listenToMessages",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent#listenToMessages",
    "access": "public",
    "description": "Listen to messages from other actors and act accordingly",
    "lineNumber": 58,
    "params": [],
    "return": null
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "isIntendedForBob",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/TripsGeneralInterfaceAgent.js~TripsGeneralInterfaceAgent#isIntendedForBob",
    "access": "public",
    "description": "Is message for Bob or the wizard",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{targets {Array}, comment {string}, userId {string}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js",
    "content": "/**\n * Created by Funda Durupinar on 10/28/15.\n */\n\nclass Agent{\n    /**\n     * Creates an agent with name and id\n     * @param {string} name\n     * @param {string} id\n     * @param {io} ioLib\n     * @constructor\n     */\n\n    constructor(name, id, ioLib) {\n        //public\n\n        /**\n         *\n         * @type {string} agentId\n        */\n\n        this.agentId = id;\n        /**\n         *\n         * @type {string} agentName\n         */\n        this.agentName = name;\n        /**\n         *\n         * @type {string} colorCode\n         */\n        this.colorCode = \"#00bfff\"; //agents have different colors based on specialty\n\n        /**\n         * @type {string} room\n         */\n        this.room;\n\n        /**\n         * @type {Object} selectedNode\n         */\n        this.selectedNode;\n        /**\n         * @type {Object} selectedEdge\n         */\n        this.selectedEdge;\n\n        /**\n         *\n         * @type {Array} opHistory\n         */\n        this.opHistory = [];\n        /**\n         *\n         * @type {Array} chatHistory\n         */\n        this.chatHistory = [];\n        /**\n         *\n         * @type {Array} userList\n         */\n        this.userList = [];\n        /**\n         * @type {Object} pageDoc Shared model of the room\n         */\n        this.pageDoc;\n\n        /**\n         * @type {WebSocket} socket\n         */\n        this.socket;\n\n        /**\n         * @type {IO} io\n         */\n        this.io;\n\n        if(ioLib)\n            this.io = ioLib;\n        else\n            this.io = io;\n    }\n\n\n    /**\n     * socket Io socket to the node.js server\n     * @param {string} url Server address\n     * @param {function} callback\n     */\n    connectToServer (url,  callback) {\n\n        var self = this;\n        var serverIp;\n        var sInd = url.search(\"3000/\") + 5; //roomId index\n        if(sInd <= 5){\n            serverIp = url;\n            self.room = \"\";\n        }\n        else{\n            serverIp = url.slice(0,sInd);\n            self.room = url.slice(sInd, url.length);\n        }\n\n        serverIp = serverIp.replace('localhost', '127.0.0.1');\n\n\n        // if(io)\n        //     this.socket =  io(serverIp); //server connection\n        // else\n        this.socket = this.io(serverIp,  { forceNew: true }); //server connection //this opens a separate connection for each agent\n        //     this.socket = this.io(serverIp,  { reconnect: true }); //server connection //this opens a separate connection for each agent\n\n\n        var p1 = new Promise( (resolve) => {\n            if (self.room == \"\"  || self.room == null) {\n\n                self.socket.emit(\"agentCurrentRoomRequest\",  (room) => {\n                    self.room = room; //select the latest room\n                    console.log(\"Agent connected\");\n                    resolve(\"success\");\n                });\n            }\n            else {\n                console.log(\"Agent connected.\");\n                resolve(\"success\");\n            }\n        });\n\n        p1.then( () => {\n\n            self.socket.emit(\"subscribeAgent\", {userName: self.agentName, room: self.room, userId: self.agentId, colorCode: self.colorCode },  () => {\n\n                if (callback != null) callback(self.socket);\n\n            });\n\n\n        }),   (xhr, status, error) => {\n            console.log(\"Error retrieving data: \" + error);\n            if (callback != null) callback(\"error\");\n        };\n\n    }\n\n\n\n    /**\n     * Disconnects from the socket\n     * @param {function} callback After disconnecting from server we get success message\n     *\n     */\n    disconnect(callback){\n\n\n        this.sendRequest('agentManualDisconnectRequest', {}, ()=>{\n            if(callback) callback(\"success\");\n        });\n\n        // this.socket.disconnect();\n\n    }\n\n\n    /**\n     * Gets model for the current room\n     * @param {function} callback\n     */\n    loadModel(callback) {\n\n        var self = this;\n        this.socket.emit('agentPageDocRequest', {userId: self.agentId, room: self.room}, (data) =>{\n\n            self.pageDoc = data;\n\n\n            self.userList = [];\n            for(var userId in data.users) {\n\n                self.userList.push({userId: userId, userName: data.users[userId].name});\n            }\n\n\n            if (callback != null) callback();\n        });\n\n\n    }\n\n    /**\n     * Gets list of operations from the node.js server\n     * @param {function} callback Function to call after getting operation history\n     */\n    loadOperationHistory(callback) {\n\n        var self = this;\n        this.socket.emit('agentOperationHistoryRequest', {room: this.room}, (data) =>{\n            self.opHistory = data;\n            if (data == null)\n                self.opHistory = [];\n\n\n            if (callback != null) callback();\n\n\n        });\n    }\n\n    /**\n     * Returns users in the same room as agent\n     */\n\n    getUserList() {\n        return this.userList;\n    }\n\n    /**\n     * Gets chat messages from the node.js server\n     * @param {function}  callback Function to call after getting chat history\n     */\n\n    loadChatHistory(callback) {\n        var self = this;\n        this.socket.emit('agentChatHistoryRequest', {room: this.room}, (data)=>{\n            self.chatHistory = data;\n            if (data == null)\n                self.chatHistory = [];\n\n            if (callback != null) callback();\n\n        });\n    }\n\n    /**\n     * @param {Number} cyId\n     * @returns {Object} Node list in the shared model\n     */\n    getNodeList(cyId){\n\n        if(!cyId)\n            cyId = 0;\n        return this.pageDoc.cy[cyId].nodes;\n    }\n\n\n\n    /**\n     * @param {Number} cyId\n     * @returns {Object} Edge list in the shared model\n     */\n    getEdgeList (cyId){\n        if(!cyId)\n            cyId = 0;\n        return this.pageDoc.cy[cyId].edges;\n    }\n\n\n    /**\n     * Sends request to the node.js server to change agent's name\n     * @param {string} newName New agent name\n     * @param {function} callback\n     */\n    changeName(newName, callback){\n        this.agentName = newName;\n        this.sendRequest(\"agentChangeNameRequest\", {userName: newName, userId: self.agentId});\n        if(callback) callback();\n    }\n\n\n\n    /**\n     * Gets node with id from the node.js server\n     * @param {string} id Node id\n     * @param {number} cyId\n     * @param {function} callback Function to call after getting node\n     */\n    getNodeRequest(id, cyId, callback){\n        var self = this;\n        if(!cyId)\n            cyId = 0;\n        this.socket.emit('agentGetNodeRequest', {room: this.room,  userId: self.agentId, id:id, cyId: cyId}, (data)=>{\n            self.selectedNode = data;\n            if (callback != null) callback();\n\n        })\n    }\n\n    /**\n     * Gets edge with id from the node.js server\n     * @param {string} id Edge id\n     * @param {number} cyId\n     * @param {function} callback Function to call after getting edge\n     */\n    getEdgeRequest(id, cyId, callback){\n        var self = this;\n        if(!cyId)\n            cyId = 0;\n        this.socket.emit('agentGetEdgeRequest', {room: this.room, userId: self.agentId, id:id, cyId: cyId}, (data)=>{\n            self.selectedEdge = data;\n            if (callback != null) callback();\n\n        })\n    }\n\n    /**\n     * Sends an operation request to the node.js server\n     * Model update operations are done in this method\n     * @param {string} reqName Operation name\n     * @param {Object} paramSent Depends on the operation type\n     * reqName: \"agentSetLayoutProperties\", param: {name, nodeRepulsion, nodeOverlap, idealEdgeLength, edgeElasticity, nestingFactor, gravity, numIter, tile, animate, randomize}\n     * reqName: \"agentRunLayoutRequest\", param:null\n     * reqName: \"agentAddNodeRequest\", param: {{data: {class: class}, position:{x:x, y:y}}\n     * reqName: \"agentAddEdgeRequest\", param:{{data:source, target, class}}\n     * reqName: \"agentChangeNodeAttributeRequest\", param:{id, attStr, attVal}\n     * reqName: \"agentChangeEdgeAttributeRequest\", param:{id, attStr, attVal}\n     * reqName: \"agentMoveNodeRequest\", param:{id, pos}\n     * reqName: \"agentMoveNodeRequest\", param:{id, pos}\n     * reqName: \"agentAddCompoundRequest\", param:{type, selectedNodes}\n     * reqName: \"agentSendImageRequest\", param: {img,fileName, tabIndex}\n     * @param {function} callback\n     */\n    sendRequest(reqName, paramSent, callback){ //model operations\n\n        let param  = paramSent;\n        if(!param){\n            param = {};\n        }\n        param.room = this.room;\n        param.userId = this.agentId;\n\n        this.socket.emit(reqName, param, (data) =>{\n            if(callback)\n                callback(data);\n        });\n\n    }\n\n\n    /**\n     * Socket listener\n     * @param {function} callback\n     */\n    listen(callback){\n        var self = this;\n        this.socket.on('operation', (data)=>{\n            self.opHistory.push(data);\n        });\n\n        this.socket.on('message', (data)=>{\n            self.chatHistory.push(data);\n        });\n\n\n        if (callback != null) callback();\n\n\n    }\n\n    /**\n     * Sends chat message\n     * @param {string} comment Message in text\n     * @param {Array} targets Ids of targets\n     * @param {function} callback Function to call after sending message\n     */\n    sendMessage(comment, targets, callback){\n\n        var self = this;\n        if(targets == \"*\" || targets == \"all\"){ //add all users\n            targets = [];\n            for(var i = 0; i < self.userList.length; i++){ //FIXME: send to all the users for now\n                targets.push({userId: self.userList[i].userId});\n            }\n\n        }\n\n        var message = {room: this.room, comment: comment, userName:this.agentName, userId: this.agentId, time: 1, targets: targets}; //set time on the server\n\n        this.socket.emit('agentMessage', message, (data)=>{\n\n            if (callback) callback(data);\n        });\n    }\n\n    /***\n     * Get the latest message from the message list\n     * @param {function} callback\n     */\n    getMessage(callback){\n\n        this.sendRequest(\"agentPageDocRequest\", {}, (pageDoc)=>{\n            if(callback)\n                callback(pageDoc.messages[pageDoc.messages.length-1]);\n\n        });\n\n    }\n\n \n}\n// if( typeof module !== 'undefined' && module.exports ) //ESDOC problem\nmodule.exports = Agent;\n\n\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "class",
    "name": "Agent",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js",
    "importStyle": "Agent",
    "description": "Created by Funda Durupinar on 10/28/15.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 12,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#constructor",
    "access": "public",
    "description": "Creates an agent with name and id",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "io"
        ],
        "spread": false,
        "optional": false,
        "name": "ioLib",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "agentId",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#agentId",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "agentName",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#agentName",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "colorCode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#colorCode",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "opHistory",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#opHistory",
    "access": "public",
    "description": "",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "chatHistory",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#chatHistory",
    "access": "public",
    "description": "",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "userList",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#userList",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "io",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#io",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "connectToServer",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#connectToServer",
    "access": "public",
    "description": "socket Io socket to the node.js server",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Server address"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "socket",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#socket",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "disconnect",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#disconnect",
    "access": "public",
    "description": "Disconnects from the socket",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "After disconnecting from server we get success message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "loadModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#loadModel",
    "access": "public",
    "description": "Gets model for the current room",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "loadOperationHistory",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#loadOperationHistory",
    "access": "public",
    "description": "Gets list of operations from the node.js server",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to call after getting operation history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "getUserList",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#getUserList",
    "access": "public",
    "description": "Returns users in the same room as agent",
    "lineNumber": 212,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "loadChatHistory",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#loadChatHistory",
    "access": "public",
    "description": "Gets chat messages from the node.js server",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to call after getting chat history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "getNodeList",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#getNodeList",
    "access": "public",
    "description": "",
    "lineNumber": 237,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Node list in the shared model"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Node list in the shared model"
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "getEdgeList",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#getEdgeList",
    "access": "public",
    "description": "",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Edge list in the shared model"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Edge list in the shared model"
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "changeName",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#changeName",
    "access": "public",
    "description": "Sends request to the node.js server to change agent's name",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": "New agent name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "getNodeRequest",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#getNodeRequest",
    "access": "public",
    "description": "Gets node with id from the node.js server",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Node id"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to call after getting node"
      }
    ],
    "return": null
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "getEdgeRequest",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#getEdgeRequest",
    "access": "public",
    "description": "Gets edge with id from the node.js server",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Edge id"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to call after getting edge"
      }
    ],
    "return": null
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "sendRequest",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#sendRequest",
    "access": "public",
    "description": "Sends an operation request to the node.js server\nModel update operations are done in this method",
    "lineNumber": 321,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "reqName",
        "description": "Operation name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paramSent",
        "description": "Depends on the operation type\nreqName: \"agentSetLayoutProperties\", param: {name, nodeRepulsion, nodeOverlap, idealEdgeLength, edgeElasticity, nestingFactor, gravity, numIter, tile, animate, randomize}\nreqName: \"agentRunLayoutRequest\", param:null\nreqName: \"agentAddNodeRequest\", param: {{data: {class: class}, position:{x:x, y:y}}\nreqName: \"agentAddEdgeRequest\", param:{{data:source, target, class}}\nreqName: \"agentChangeNodeAttributeRequest\", param:{id, attStr, attVal}\nreqName: \"agentChangeEdgeAttributeRequest\", param:{id, attStr, attVal}\nreqName: \"agentMoveNodeRequest\", param:{id, pos}\nreqName: \"agentMoveNodeRequest\", param:{id, pos}\nreqName: \"agentAddCompoundRequest\", param:{type, selectedNodes}\nreqName: \"agentSendImageRequest\", param: {img,fileName, tabIndex}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "listen",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#listen",
    "access": "public",
    "description": "Socket listener",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "sendMessage",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#sendMessage",
    "access": "public",
    "description": "Sends chat message",
    "lineNumber": 364,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "comment",
        "description": "Message in text"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "Ids of targets"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to call after sending message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "getMessage",
    "memberof": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/agent-interaction/src/js/agentAPI.js~Agent#getMessage",
    "access": "public",
    "description": "Get the latest message from the message list",
    "lineNumber": 387,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 38,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "content": "/**\n * Functions for the browser client to perform on the editor as requested by an agent through the agent socket\n * @param  {Object} app Derby.js application\n * @return {Object} {{listenToVisAgentRequests: listenToVisAgentRequests, listen: listen, cleanModel: cleanModel}}\n */\n\n\n\nlet ModelMergeFunctions = require('./merger/model-merge-functions.js');\nlet modelMergeFunctions = new ModelMergeFunctions();\nconst appUtilities = window.appUtilities;\nconst $ = require('jquery');\n\n\nclass ClientSideSocketListener{\n\n    /**\n     *\n     * @param {Object} app Derby,js application\n     */\n    constructor(app) {\n        this.app = app;\n    }\n\n    /**\n     * Listens to Trips agent, visAgent and menu function requests via the server\n     *\n     */\n    listen () {\n        this.app.socket.on('loadFile',  (data, callback) => this._loadFile(data, callback));\n        this.app.socket.on('cleanModel',(data, callback) => this._cleanModel(data, callback));\n        this.app.socket.on('runLayout',(data, callback) => this._runLayout(data, callback));\n        this.app.socket.on('addNode',(data, callback) => this._addNode(data, callback));\n        this.app.socket.on('deleteEles',(data, callback) => this._deleteEles(data, callback));\n        this.app.socket.on('addImage',(data, callback) => this._addImage(data, callback));\n        this.app.socket.on('align',(data, callback) => this._align(data, callback));\n        this.app.socket.on('updateVisibility',(data, callback) => this._updateVisibility(data, callback));\n        this.app.socket.on('searchByLabel',(data, callback) => this._searchByLabel(data, callback));\n        this.app.socket.on('updateHighlight',(data, callback) => this._updateHighlight(data, callback));\n        this.app.socket.on('updateExpandCollapse',(data, callback) => this._updateExpandCollapse(data, callback));\n        this.app.socket.on('addCompound',(data, callback) => this._addCompound(data, callback));\n        this.app.socket.on('clone',(data, callback) => this._clone(data, callback));\n        this.app.socket.on('openPCQueryWindow',(data, callback) => this._openPCQueryWindow(data, callback));\n        this.app.socket.on('displayOncoprint',(data, callback) => this._displayOncoprint(data, callback));\n        this.app.socket.on('displaySif',(data, callback) => this._displaySif(data, callback));\n        this.app.socket.on('displaySbgn',(data, callback) => this._displaySbgn(data, callback));\n        this.app.socket.on('mergeSbgn',(data, callback) => this._mergeSbgn(data, callback));\n        this.app.socket.on('mergeJsonWithCurrent',(data, callback) => this._mergeJsonWithCurrent(data, callback));\n        this.app.socket.on('addProvenance',(data, callback) => this._addProvenance(data, callback));\n        this.app.socket.on('removeBob',(data, callback) => this._removeBob(data, callback));\n\n\n        //VisAgent requests\n        this.app.socket.on('moveGene',  (data, callback) => this._moveGene(data, callback));\n        this.app.socket.on('moveGeneStream',  (data, callback) => this._moveGeneStream(data, callback));\n        this.app.socket.on('highlightGeneStream',  (data, callback) => this._highlightGeneStream(data, callback));\n        this.app.socket.on('changeLockState',  (data, callback) => this._changeLockState(data, callback));\n        this.app.socket.on('addCellularLocation',  (data, callback) => this._addCellularLocation(data, callback));\n        this.app.socket.on('moveOutOfCellularLocation',  (data, callback) => this._moveOutOfCellularLocation(data, callback));\n\n    }\n\n\n    _loadFile(data, callback){\n        try {\n            appUtilities.getChiseInstance(data.cyId).getSbgnvizInstance().loadSBGNMLText(data.content);\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if(callback) callback();\n\n        }\n    }\n\n    /***\n     * Cleans Trips model\n     * @param {Object} data\n     * @property{Boolean} data.shouldCleanProvenance  check if provenance content should be deleted\n     * @param {Function} callback\n     */\n    _cleanModel(data, callback) {\n        try {\n            let cyIds = this.app.modelManager.getCyIds();\n\n            cyIds.forEach((cyId) => {\n                appUtilities.getCyInstance(cyId).remove(appUtilities.getCyInstance(cyId).elements());\n                this.app.modelManager.newModel(cyId, \"me\"); //do not delete cytoscape, only the model\n\n            });\n\n            appUtilities.closeOtherNetworks(0);\n            this.app.model.set('_page.doc.images', null);\n            this.app.dynamicResize(); //to clean the canvas\n\n            if(data.shouldCleanProvenance)\n                this.app.model.set('_page.doc.provenance', null);\n\n            if (callback) callback(\"success\");\n\n\n        } catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    _runLayout(data, callback) {\n        try {\n            appUtilities.setActiveNetwork(data.cyId);\n            $(\"#perform-layout\")[0].click();\n            if (callback) callback(\"success\");\n        } catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     * Adds node to the system and modelManager and returns the node id in the callback\n     * @param {Object} data Node info\n     * @param {Function} callback\n     * @private\n     */\n    _addNode(data, callback) {\n        try {\n            //does not trigger cy events\n            let newNode = appUtilities.getChiseInstance(data.cyId).elementUtilities.addNode(data.position.x, data.position.y, data.data.class);\n\n            //notifies other clients\n            this.app.modelManager.addModelNode(newNode.id(), data.cyId, data, \"me\");\n            this.app.modelManager.initModelNode(newNode, data.cyId, \"me\");\n\n            if (callback) callback(newNode.id());\n        }\n        catch (e) {\n            console.log(e);\n            if(callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _deleteEles(data, callback){\n        try {\n            //unselect all others\n            appUtilities.getCyInstance(data.cyId).elements().unselect();\n\n            //first delete edges\n            data.elementIds.forEach( (id) => {\n                appUtilities.getCyInstance(data.cyId).getElementById(id).select();\n            });\n\n            //then delete modes\n            if (data.type === \"simple\")\n                appUtilities.getChiseInstance(data.cyId).deleteElesSimple(appUtilities.getCyInstance(data.cyId).elements(':selected'));\n            else\n                appUtilities.getChiseInstance(data.cyId).deleteNodesSmart(appUtilities.getCyInstance(data.cyId).nodes(':selected'));\n\n            if(callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if(callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _addImage(data, callback){\n        try {\n            let status = this.app.modelManager.addImage(data);\n            this.app.dynamicResize();\n\n            if (callback) callback(status);\n\n        }\n        catch (e) {\n            console.log(e);\n            if(callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _align(data, callback) {\n        try {\n            let nodes = appUtilities.getCyInstance(data.cyId).collection();\n            if (data.nodeIds === '*' || data.nodeIds === 'all')\n                nodes = appUtilities.getCyInstance(data.cyId).nodes();\n            else\n                data.nodeIds.forEach((nodeId) => {\n                    nodes.add(appUtilities.getCyInstance(data.cyId).getElementById(nodeId));\n                });\n\n            appUtilities.getChiseInstance(data.cyId).align(nodes, data.horizontal, data.vertical, appUtilities.getCyInstance(data.cyId).getElementById(data.alignTo));\n\n            if (callback) callback(\"success\");\n        } catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _updateVisibility(data, callback){\n        try {\n            //unselect all others\n            appUtilities.setActiveNetwork(data.cyId);\n            appUtilities.getCyInstance(data.cyId).elements().unselect();\n\n            if (data.val === \"showAll\")\n                $(\"#show-all\")[0].click();\n            else {\n                data.elementIds.forEach((id) => {\n                    appUtilities.getCyInstance(data.cyId).getElementById(id).select();\n                });\n\n                if (data.val == \"show\")\n                    $(\"#show-selected\")[0].click();\n                else\n                    $(\"#hide-selected\")[0].click();\n            }\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _searchByLabel(data, callback){\n        try {\n            //unselect all others\n            appUtilities.getCyInstance(data.cyId).elements().unselect();\n            appUtilities.getChiseInstance(data.cyId).searchByLabel(data.label);\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _updateHighlight(data, callback){\n        try {\n            //unselect all others\n            appUtilities.getCyInstance(data.cyId).elements().unselect();\n            appUtilities.setActiveNetwork(data.cyId);\n\n            if (data.val === \"remove\") {\n                $(\"#remove-highlights\")[0].click();\n            }\n            else {\n                data.elementIds.forEach( (id) => {\n                    appUtilities.getCyInstance(data.cyId).getElementById(id).select();\n                });\n\n                if (data.val === \"neighbors\")\n                    $(\"#highlight-neighbors-of-selected\")[0].click();\n                else if (data.val === \"processes\")\n                    $(\"#highlight-processes-of-selected\")[0].click();\n            }\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _updateExpandCollapse(data, callback){\n        try {\n            //unselect all others\n            appUtilities.getCyInstance(data.cyId).elements().unselect();\n            appUtilities.setActiveNetwork(data.cyId);\n\n            data.elementIds.forEach( (id) => {\n                appUtilities.getCyInstance(data.cyId).getElementById(id).select();\n            });\n\n            if (data.val === \"collapse\")\n                $(\"#collapse-selected\")[0].click();\n            else\n                $(\"#expand-selected\")[0].click();\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _addCompound(data, callback){\n        try {\n            //unselect all others\n            appUtilities.getCyInstance(data.cyId).elements().unselect();\n\n            data.elementIds.forEach( (elId) => {\n                let el = appUtilities.getCyInstance(data.cyId).getElementById(elId);\n                if(el.isNode())\n                    el.select();\n            });\n\n            appUtilities.getChiseInstance(data.cyId).createCompoundForGivenNodes(appUtilities.getCyInstance(data.cyId).nodes(':selected'), data.val);\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _clone(data, callback){\n        try {\n            appUtilities.getCyInstance(data.cyId).elements().unselect();\n            appUtilities.setActiveNetwork(data.cyId);\n\n            data.elementIds.forEach( (nodeId) => {\n                appUtilities.getCyInstance(data.cyId).getElementById(nodeId).select();\n            });\n\n            $(\"#clone-selected\")[0].click();\n\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     * Open the graph in another tab\n     * @param {{Object}} data Format is {type:<sif or sbgn>, graph:<>}\n     * @param {function} callback\n     * @private\n     */\n    _openPCQueryWindow(data, callback){\n        try {\n            let chiseInst = appUtilities.createNewNetwork(); //opens a new tab\n\n            let jsonObj;\n            if (data.type && data.type == 'sif')\n                jsonObj = chiseInst.convertSifTextToJson(data.graph);\n            else\n                jsonObj = chiseInst.convertSbgnmlTextToJson(data.graph);\n\n            chiseInst.updateGraph(jsonObj,  () => {\n                this.app.modelManager.initModel(appUtilities.getCyInstance(chiseInst.cyId).nodes(), appUtilities.getCyInstance(chiseInst.cyId).edges(), chiseInst.cyId,  \"me\");\n\n                appUtilities.setActiveNetwork(chiseInst.cyId);\n                //\n                $(\"#perform-layout\")[0].click();\n\n                if (callback) callback(\"success\");\n\n            }, true);\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n\n    }\n\n    /**\n     * Display oncoprint data on the oncoprint tab\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _displayOncoprint(data, callback){\n        try{\n            let timeOut = 0;\n            if (document.getElementById('oncoprint-tab').style.visibility == 'hidden') {\n\n                timeOut = 4000;\n                document.getElementById('oncoprint-tab').style.visibility = 'visible';\n            }\n\n            setTimeout(() => {\n\n                    this.app.modelManager.setOncoprint(data);\n                    this.app.oncoprintHandler.updateData(data);\n\n                }, timeOut\n            );\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /*\n     * Display a sif graph on the current tab\n     * @param {Object} data Format is {sif:<sif>, cyId:<number>}\n     * @param {function} callback\n     * @private\n     */\n    _displaySif(data, callback){\n        try {\n            let chiseInst;\n            if (!data.cyId) {\n                data.cyId = appUtilities.getActiveNetworkId();\n                chiseInst = appUtilities.getActiveChiseInstance();\n            } else {\n\n                data.cyId = parseInt(data.cyId);\n\n\n                if (!appUtilities.doesNetworkExist(data.cyId))\n                    chiseInst = appUtilities.createNewNetwork(data.cyId); //opens a new tab\n                else\n                    chiseInst = appUtilities.getChiseInstance(data.cyId);\n\n            }\n\n            appUtilities.getCyInstance(data.cyId).remove(appUtilities.getCyInstance(data.cyId).elements());\n\n\n            let jsonObj = chiseInst.convertSifTextToJson(data.sif);\n\n\n            chiseInst.updateGraph(jsonObj, () => {\n\n                this.app.modelManager.newModel(appUtilities.getActiveNetworkId(), \"me\"); //delete the existing model first so that ids don't get mixed up\n\n\n                this.app.modelManager.initModel(appUtilities.getCyInstance(data.cyId).nodes(), appUtilities.getCyInstance(data.cyId).edges(), data.cyId,  \"me\");\n\n\n                appUtilities.setActiveNetwork(data.cyId);\n\n                setTimeout(() => {\n\n                    // $(\"#perform-layout\")[0].click();\n\n                    // this.app.callLayout(data.cyId);\n                    //open the network view and rerender it otherwise the graph becomes invisible\n                    $(\"#defaultOpen\")[0].click();\n\n                    this.app.dynamicResize();\n                    appUtilities.getCyInstance(data.cyId).panzoom().fit();\n\n\n                    if (callback) callback(\"success\");\n                }, 1000);\n\n\n            }, true);\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n\n    }\n\n    /*\n     * Display an sbgn graph on the current tab\n     * @param {Object} data Format is {sbgn:<sbgn>, cyId:<number>}\n     * @param {function} callback\n     * @private\n     */\n    _displaySbgn(data, callback){\n        try {\n            let chiseInst;\n\n            if (!data.cyId) {\n                data.cyId = appUtilities.getActiveNetworkId();\n                chiseInst = appUtilities.getActiveChiseInstance();\n            } else {\n\n                data.cyId = parseInt(data.cyId);\n                if (!appUtilities.doesNetworkExist(data.cyId))\n                    chiseInst = appUtilities.createNewNetwork(data.cyId); //opens a new tab\n                else\n                    chiseInst = appUtilities.getChiseInstance(data.cyId);\n\n            }\n\n\n            appUtilities.getCyInstance(data.cyId).remove(appUtilities.getCyInstance(data.cyId).elements());\n\n\n            let jsonObj = chiseInst.convertSbgnmlTextToJson(data.sbgn);\n\n\n            chiseInst.updateGraph(jsonObj, () => {\n\n                this.app.modelManager.newModel(appUtilities.getActiveNetworkId(), \"me\"); //delete the existing model first so that ids don't get mixed up\n\n\n                this.app.modelManager.initModel(appUtilities.getCyInstance(data.cyId).nodes(), appUtilities.getCyInstance(data.cyId).edges(), data.cyId,  \"me\");\n\n\n                appUtilities.setActiveNetwork(data.cyId);\n\n                setTimeout(() => {\n\n                    // $(\"#perform-layout\")[0].click();\n\n                    // this.app.callLayout(data.cyId);\n                    //open the network view and rerender it otherwise the graph becomes invisible\n                    $(\"#defaultOpen\")[0].click();\n\n                    this.app.dynamicResize();\n                    appUtilities.getCyInstance(data.cyId).panzoom().fit();\n\n\n                    if (callback) callback(\"success\");\n                }, 1000);\n\n\n            }, true);\n\n            //update cellular locations\n            this.app.updateCellularLocations();\n\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _mergeSbgn(data, callback){\n        try {\n\n            if (!data.cyId)\n                data.cyId = appUtilities.getActiveNetworkId();\n\n            let newJson = appUtilities.getChiseInstance(data.cyId).convertSbgnmlTextToJson(data.graph);\n\n            modelMergeFunctions.mergeJsonWithCurrent(newJson, data.cyId, this.app.modelManager, callback);\n\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     * Merge data.graph with the current model in the active tab or a given tab\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _mergeJsonWithCurrent(data, callback){\n        try {\n            if (!data.cyId)\n                data.cyId = appUtilities.getActiveNetworkId();\n            modelMergeFunctions.mergeJsonWithCurrent(data.graph, data.cyId, this.app.modelManager, callback);\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     * Adds links and other info to the provenance tab\n     * @param {Object} data\n     * @param {function} callback\n     * @private\n     */\n    _addProvenance(data, callback){\n        try {\n            if (!data.cyId)\n                data.cyId = appUtilities.getActiveNetworkId();\n\n\n            if (data.pc)\n                this.app.model.push('_page.doc.provenance', {\n                    html: data.html,\n                    pc: data.pc,\n                    title: data.title\n                });\n            else if (data.title)\n                this.app.model.push('_page.doc.provenance', {\n                    html: data.html,\n                    title: data.title\n                });\n            else\n                this.app.model.push('_page.doc.provenance', {html: data.html});\n\n            if (callback)\n                callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     * To use with CLARE so that Bob does not interfere\n     * @param data\n     * @param callback\n     * @private\n     */\n    _removeBob(data, callback){\n        try {\n            if (this.app.tripsAgent) {\n\n                this.app.tripsAgent.disconnect();\n                if (callback) {\n\n                    callback();\n                }\n            }\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data Node info {name:<string>, state:<string> , location:<string>}\n     * @param {function} callback\n     * @private\n     */\n    _moveGene(data, callback){\n        try {\n            this.app.visHandler.moveNode(data);\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data {name:<string>, direction: <\"up\", \"down\">, state:, cyId:<Number>, location: <\"top\", \"bottom\", \"left\", \"right\">}\n     * @param {function} callback\n     * @private\n     */\n    _moveGeneStream(data, callback){\n        try {\n            this.app.visHandler.moveNodeStream(data);\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data {name:<string>, direction:<\"up\" or \"down\">, state:<string>, cyId:<number>}\n     * @param {function} callback\n     * @private\n     */\n    _highlightGeneStream(data, callback){\n        try {\n            this.app.visHandler.highlightNodeStream(data);\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data {id {string}, cyId {number}, lock {boolean}}\n     * @param {function} callback\n     * @private\n     */\n    _changeLockState(data, callback){\n        try {\n            if (!data.cyId)\n                data.cyId = appUtilities.getActiveNetworkId();\n\n            if (data.lock)\n                appUtilities.getCyInstance(data.cyId).getElementById(data.id).lock();\n            else\n                appUtilities.getCyInstance(data.cyId).getElementById(data.id).unlock();\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data {genes {Array} Array of gena names, cyId {number}, compartment {string}}\n     * @param {function} callback\n     * @private\n     */\n    _addCellularLocation(data, callback){\n        try {\n            this.app.addCellularLocation(data.genes, data.compartment, data.cyId);\n\n            this.app.modelManager.addModelCellularLocation(data.genes, data.compartment, \"me\");\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n    /**\n     *\n     * @param {Object} data {genes {Array} Array of gena names, cyId {number}, compartment {string}}\n     * @param {function} callback\n     * @private\n     */\n    _moveOutOfCellularLocation(data, callback){\n        try {\n\n            this.app.moveOutOfCellularLocation(data.genes, data.compartment, data.cyId);\n            this.app.modelManager.removeNodesFromCellularLocation(data.genes, data.compartment,  \"me\");\n\n\n            if (callback) callback(\"success\");\n        }\n        catch (e) {\n            console.log(e);\n            if (callback) callback();\n        }\n    }\n\n\n}\n\nmodule.exports = ClientSideSocketListener;",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 39,
    "kind": "variable",
    "name": "modelMergeFunctions",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~modelMergeFunctions",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "name": "appUtilities",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~appUtilities",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "name": "$",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~$",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 42,
    "kind": "class",
    "name": "ClientSideSocketListener",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js",
    "importStyle": "ClientSideSocketListener",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 43,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "Derby,js application"
      }
    ]
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "app",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#app",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "listen",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#listen",
    "access": "public",
    "description": "Listens to Trips agent, visAgent and menu function requests via the server",
    "lineNumber": 29,
    "params": [],
    "return": null
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "_loadFile",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_loadFile",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "_cleanModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_cleanModel",
    "access": "private",
    "description": "Cleans Trips model",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "@property{Boolean} data.shouldCleanProvenance  check if provenance content should be deleted"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "_runLayout",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_runLayout",
    "access": "private",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "_addNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_addNode",
    "access": "private",
    "description": "Adds node to the system and modelManager and returns the node id in the callback",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Node info"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "_deleteEles",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_deleteEles",
    "access": "private",
    "description": "",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "_addImage",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_addImage",
    "access": "private",
    "description": "",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "_align",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_align",
    "access": "private",
    "description": "",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "_updateVisibility",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_updateVisibility",
    "access": "private",
    "description": "",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "_searchByLabel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_searchByLabel",
    "access": "private",
    "description": "",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "_updateHighlight",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_updateHighlight",
    "access": "private",
    "description": "",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "_updateExpandCollapse",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_updateExpandCollapse",
    "access": "private",
    "description": "",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "_addCompound",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_addCompound",
    "access": "private",
    "description": "",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "_clone",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_clone",
    "access": "private",
    "description": "",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "_openPCQueryWindow",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_openPCQueryWindow",
    "access": "private",
    "description": "Open the graph in another tab",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "{Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Format is {type:<sif or sbgn>, graph:<>}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "_displayOncoprint",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_displayOncoprint",
    "access": "private",
    "description": "Display oncoprint data on the oncoprint tab",
    "lineNumber": 427,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "_displaySif",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_displaySif",
    "access": "private",
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "_displaySbgn",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_displaySbgn",
    "access": "private",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_mergeSbgn",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_mergeSbgn",
    "access": "private",
    "description": "",
    "lineNumber": 591,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "_mergeJsonWithCurrent",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_mergeJsonWithCurrent",
    "access": "private",
    "description": "Merge data.graph with the current model in the active tab or a given tab",
    "lineNumber": 614,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "_addProvenance",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_addProvenance",
    "access": "private",
    "description": "Adds links and other info to the provenance tab",
    "lineNumber": 632,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "_removeBob",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_removeBob",
    "access": "private",
    "description": "To use with CLARE so that Bob does not interfere",
    "lineNumber": 667,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "_moveGene",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_moveGene",
    "access": "private",
    "description": "",
    "lineNumber": 690,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Node info {name:<string>, state:<string> , location:<string>}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "_moveGeneStream",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_moveGeneStream",
    "access": "private",
    "description": "",
    "lineNumber": 707,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{name:<string>, direction: <\"up\", \"down\">, state:, cyId:<Number>, location: <\"top\", \"bottom\", \"left\", \"right\">}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "_highlightGeneStream",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_highlightGeneStream",
    "access": "private",
    "description": "",
    "lineNumber": 724,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{name:<string>, direction:<\"up\" or \"down\">, state:<string>, cyId:<number>}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "_changeLockState",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_changeLockState",
    "access": "private",
    "description": "",
    "lineNumber": 741,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{id {string}, cyId {number}, lock {boolean}}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_addCellularLocation",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_addCellularLocation",
    "access": "private",
    "description": "",
    "lineNumber": 765,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{genes {Array} Array of gena names, cyId {number}, compartment {string}}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_moveOutOfCellularLocation",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/clientSideSocketListener.js~ClientSideSocketListener#_moveOutOfCellularLocation",
    "access": "private",
    "description": "",
    "lineNumber": 785,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{genes {Array} Array of gena names, cyId {number}, compartment {string}}"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js",
    "content": "/**\nThe module merge multiple json objects into a single one. The strategy that have been adopted here is to merge\nthe different elements of a graph sequentially, according to their level of priority: when merging,\n    the molecules/complexes/etc... must be merged first, the process nodes must be merged second and the edges must be merged at last.\n    Only such a procedure guarantees a proper merge. It relies on the assumption that the SBGN graph can be split\ninto triplets of node-edge-node where one of the nodes is a biological item (protein, DNA, compartment, multimers, ...) and\nthe other node is a process node (process, association, source and sink, ...) or a logic node (and, or, not). So weird results can happen\nwhile merging graphs with logic nodes directly linked to process nodes for example.\n                                                                           **/\n\n//Author: David Servillo.\n\n//Last change made the: 09/25/2017.\n\nvar _ = require('underscore');\nvar RephraseHandler = require('./rephrase-handler.js');\nvar rephraseToolBox = new RephraseHandler();\n\n\nclass JsonMerger {\n\n    constructor(){\n\n    }\n\n    //Rewrithe the ids in the json object.\n    rewriteIds(js, newId, old2newIds) {\n        var i;\n        var parent;\n        var source;\n        var target;\n        var maxsize = newId.length;\n\n        if(!js.nodes || js.nodes.length <= 0 )\n            return;\n\n        for(i = 0; i < js.nodes.length; i++) {\n            old2newIds[js.nodes[i].data.id] = \"ele\" + newId;\n            js.nodes[i].data.id = \"ele\" + newId;\n\n            //The new id is as many 0s as necessary and a\n            //variable number.\n            //Example: id1 = '000001', id2 = '000002', etc\n            newId = parseInt(newId) + 1;\n            newId = \"0\".repeat(Math.abs(maxsize - newId.toString().length)) + newId.toString();\n        }\n\n        //Rewrite the ids in the 'parent' attributes.\n        for(i = 0; i < js.nodes.length; i++) {\n            parent = js.nodes[i].data.parent;\n            if(parent !== undefined)\n                js.nodes[i].data.parent = old2newIds[parent];\n        }\n\n        //Rewrite the ids of the sources and the targets of\n        //the edges.\n        for(i = 0; i < js.edges.length; i++) {\n            source = old2newIds[js.edges[i].data.source];\n            target = old2newIds[js.edges[i].data.target];\n            js.edges[i].data.source = source;\n            js.edges[i].data.target = target;\n            js.edges[i].data.portsource = source;\n            js.edges[i].data.porttarget = target;\n            js.edges[i].data.id = source + \"-\" + target;\n        }\n    }\n\n    //What REACH sentences, describing reactions, a node is associated to ?\n    nodeId2sentence(js, sentenceNodeMap, rep1, rep2, id2pos) {\n        var i;\n        var sentence;\n\n        for(i = 0; i < rep1.length; i++) {\n            if(rep1[i].isNode()) {\n                if(!(rep1[i].id() in sentenceNodeMap))\n                    sentenceNodeMap[rep1[i].id()] = [];\n\n                sentence = js[id2pos[rep2[i].id()]].sentence;\n                sentenceNodeMap[rep1[i].id()].push(sentence);\n            }\n        }\n    }\n\n    //What REACH index card a node is associated to ?\n    nodeId2idxCard(js, idxCardNodeMap, rep1, rep2, id2pos) {\n        var i;\n        var idxCard;\n\n        for(i = 0; i < rep1.length; i++) {\n            if(rep1[i].isNode()) {\n                if(!(rep1[i].id() in idxCardNodeMap))\n                    idxCardNodeMap[rep1[i].id()] = [];\n\n                idxCard = js[id2pos[rep2[i].id()]].idxCard;\n                idxCardNodeMap[rep1[i].id()].push(idxCard);\n            }\n        }\n    }\n\n    //Merge an array of json objects to output a single json object.\n    mergeJsons(jsonGraph, sentenceNodeMap, idxCardNodeMap) {\n        var i, j;\n        var newId;\n        var edgejs;\n        var nodejs;\n        var tmp = [];\n        var rephrase2;\n        var id2pos = {};\n        var idList = {};\n        var idmaxsize = 0;\n        var old2newIds = {};\n        var old2newIdList = {};\n\n        if(!jsonGraph.length)\n            return;\n\n        var jsonObj = {\"nodes\": [], \"edges\": []};\n        var cy = rephraseToolBox.json2cytoscape(jsonObj);\n\n        //Get ready to rewrite the ids in the json object.\n        //The new id is as many 0s as necessary and a\n        //variable number.\n        //Example: id1 = '000001', id2 = '000002', etc\n        //Here, I compute the number of 0s needed.\n        for(i = 0; i < jsonGraph[0].json.nodes.length; i++) {\n            if(jsonGraph[0].json.nodes[i].data.id.length > idmaxsize)\n                idmaxsize = jsonGraph[0].json.nodes[i].data.id.length;\n        }\n\n        newId = \"0\".repeat(idmaxsize + 1);\n        //Rewrite the ids in the json object.\n        for(i = 1; i < jsonGraph.length; i++) {\n            this.rewriteIds(jsonGraph[i].json, newId, old2newIds);\n            newId = \"0\".repeat(newId.length + 1);\n        }\n\n        //Convert the jsonGraph into one single cytoscape object.\n        for(i = 0; i < jsonGraph.length; i++) {\n            cy.add(jsonGraph[i].json);\n            for(j = 0; j < jsonGraph[i].json.nodes.length; j++)\n                id2pos[jsonGraph[i].json.nodes[j].data.id] = i;\n        }\n\n        //Rephrase the cytoscape object, in order to get the array of nodes and edges.\n        var rephrase = rephraseToolBox.cytoscape2rephrase(cy);\n\n        //Save the lonely nodes. It is mostly made to handle the nodes contained in complexes.\n        //Since they are not connected to any edge, they will be discarded when merging process nodes.\n        var lonelyNodeList = rephraseToolBox.getLonelyNodes(rephrase);\n        var id2signature = rephraseToolBox.getElementSignatures(rephrase);\n\n        //Rearrange the orders of the nodes around the edges in the rephrase for the subsequent operations.\n        rephraseToolBox.rearrangeRephrase(rephrase);\n\n        //What REACH sentences, describing reactions, a node is associated to,\n        //and what REACH index card a node is associated to ?\n        this.nodeId2sentence(jsonGraph, sentenceNodeMap, rephrase, rephrase, id2pos);\n        this.nodeId2idxCard(jsonGraph, idxCardNodeMap, rephrase, rephrase, id2pos);\n\n        rephrase2 = new Array(rephrase.length);\n        for(i = 0; i < rephrase.length; i++)\n            rephrase2[i] = rephrase[i];\n\n        rephraseToolBox.mergeNodes(rephrase, id2signature); //Merge the nodes.\n\n        //The rephrase has changed so update the two dictionaries.\n        this.nodeId2sentence(jsonGraph, sentenceNodeMap, rephrase, rephrase2, id2pos);\n        this.nodeId2idxCard(jsonGraph, idxCardNodeMap, rephrase, rephrase2, id2pos);\n\n        Object.keys(sentenceNodeMap).forEach(key => {\n            if(sentenceNodeMap[key].length == 1) {\n                delete sentenceNodeMap[key];\n                delete idxCardNodeMap[key];\n            } else {\n                sentenceNodeMap[key] = _.uniq(sentenceNodeMap[key]);\n                idxCardNodeMap[key] = _.uniq(idxCardNodeMap[key]);\n            }\n        });\n\n        //After merging the nodes, some nodes may have disappeared to be replaced by others.\n        //Update the collection of lonely nodes previously saved.\n        if(lonelyNodeList.length) {\n            for(i = 0; i < rephrase.length; i++) {\n                idList[rephrase[i].id()] = 1;\n                old2newIdList[rephrase2[i].id()] = rephrase[i].id();\n            }\n\n            for(i = 0; i < lonelyNodeList.length; i++) {\n                if(lonelyNodeList[i].id() in idList)\n                    tmp.push(lonelyNodeList[i]);\n            }\n        }\n\n        //Update the lonely node collection.\n        lonelyNodeList = tmp;\n\n        //Merge the edges then merge the process nodes and the whole reaction they are involved in.\n        rephraseToolBox.mergeEdges(rephrase, id2signature);\n        rephraseToolBox.mergeProcessNodes(rephrase, id2signature);\n\n        //Create the merged json object.\n        for(i = 0; i < rephrase.length; i++) {\n            if(rephrase[i].isNode()) {\n                nodejs = rephrase[i].json();\n                if(nodejs.data.parent)\n                    nodejs.data.parent = old2newIdList[nodejs.data.parent];\n\n                jsonObj.nodes.push(nodejs);\n            } else {\n                edgejs = rephrase[i].json();\n                edgejs.data.source = rephrase[i - 1].id();\n                edgejs.data.target = rephrase[i + 1].id();\n\n                jsonObj.edges.push(edgejs);\n            }\n        }\n\n        //Add the lonely nodes that were discarded at the process node merge stage.\n        for(i = 0; i < lonelyNodeList.length; i++) {\n            nodejs = lonelyNodeList[i].json();\n            if(nodejs.data.parent)\n                nodejs.data.parent = old2newIdList[nodejs.data.parent];\n\n            jsonObj.nodes.push(nodejs);\n        }\n\n        return jsonObj;\n    }\n\n    //Merge an array of json objects with the json of the current sbgn network\n    //on display to output a single json object.\n    mergeJsonWithCurrent(jsonGraph, currJson){\n        var i;\n        var edgejs;\n        var newId;\n        var nodejs;\n        var tmp = [];\n        var rephrase2;\n        var idList = {};\n        var idmaxsize = 0;\n        var old2newIds = {};\n        var old2newIdList = {};\n\n        if(!(\"nodes\" in jsonGraph) || !jsonGraph.nodes.length)\n            return;\n\n        var jsonObj = {\"nodes\": [], \"edges\": []};\n        var cy = rephraseToolBox.json2cytoscape(jsonObj);\n\n        //Get ready to rewrite the ids in the json object.\n        //The new id is as many 0s as necessary and a\n        //variable number.\n        //Example: id1 = '000001', id2 = '000002', etc\n        //Here, I compute the number of 0s needed.\n        for(i = 0; i < jsonGraph.nodes.length; i++) {\n            if(jsonGraph.nodes[i].data.id.length > idmaxsize)\n                idmaxsize = jsonGraph.nodes[i].data.id.length;\n        }\n\n        newId = \"0\".repeat(idmaxsize + 1);\n\n\n        //Rewrite the ids in the current json object.\n        this.rewriteIds(currJson, newId, old2newIds);\n\n\n\n        //Fuse the two json objects.\n        if(currJson && currJson.nodes) {\n            jsonGraph.nodes = jsonGraph.nodes.concat(currJson.nodes);\n        }\n        if(currJson && currJson.edges) {\n            jsonGraph.edges = jsonGraph.edges.concat(currJson.edges);\n        }\n\n\n        //Convert the json list into one single cytoscape object.\n        //for(i = 0; i < jsonGraph.length; i++)\n        cy.add(jsonGraph);\n\n        //Rephrase the cytoscape object, in order to get the array of nodes and edges.\n        var rephrase = rephraseToolBox.cytoscape2rephrase(cy);\n\n        //Save the lonely nodes. It is mostly made to handle the nodes contained in complexes.\n        //Since they are not connected to any edge, they will be discarded when merging process nodes.\n        var lonelyNodeList = rephraseToolBox.getLonelyNodes(rephrase);\n        var id2signature = rephraseToolBox.getElementSignatures(rephrase);\n\n        //Rearrange the orders of the nodes around the edges in the rephrase for the subsequent operations.\n        rephraseToolBox.rearrangeRephrase(rephrase);\n\n        if(lonelyNodeList.length) {\n            rephrase2 = new Array(rephrase.length);\n            for(i = 0; i < rephrase.length; i++)\n                rephrase2[i] = rephrase[i];\n        }\n\n        //Merge the nodes.\n        rephraseToolBox.mergeNodes(rephrase, id2signature);\n\n        //After merging the nodes, some nodes may have disappeared to be replaced by others.\n        //Update the collection of lonely nodes previously saved.\n        if(lonelyNodeList.length) {\n            for(i = 0; i < rephrase.length; i++) {\n                idList[rephrase[i].id()] = 1;\n                old2newIdList[rephrase2[i].id()] = rephrase[i].id();\n            }\n\n            for(i = 0; i < lonelyNodeList.length; i++) {\n                if(lonelyNodeList[i].id() in idList)\n                    tmp.push(lonelyNodeList[i]);\n            }\n        }\n\n        //Update the lonely node collection.\n        lonelyNodeList = tmp;\n\n        //Merge the edges then merge the process nodes and the whole reaction they are involved in.\n        rephraseToolBox.mergeEdges(rephrase, id2signature);\n        rephraseToolBox.mergeProcessNodes(rephrase, id2signature);\n\n        //Create the merged json object.\n        for(i = 0; i < rephrase.length; i++) {\n            if(rephrase[i].isNode()) {\n                nodejs = rephrase[i].json();\n                if(nodejs.data.parent)\n                    nodejs.data.parent = old2newIdList[nodejs.data.parent];\n\n                jsonObj.nodes.push(nodejs);\n            } else {\n                edgejs = rephrase[i].json();\n                edgejs.data.source = rephrase[i - 1].id();\n                edgejs.data.target = rephrase[i + 1].id();\n\n                jsonObj.edges.push(edgejs);\n            }\n        }\n\n        //Add the lonely nodes that were discarded at the process node merge stage.\n        for(i = 0; i < lonelyNodeList.length; i++) {\n            nodejs = lonelyNodeList[i].json();\n            if(nodejs.data.parent)\n                nodejs.data.parent = old2newIdList[nodejs.data.parent];\n\n            jsonObj.nodes.push(nodejs);\n        }\n\n        return jsonObj;\n    }\n}\n\nmodule.exports  = JsonMerger;",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "rephraseToolBox",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~rephraseToolBox",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "JsonMerger",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js",
    "importStyle": "JsonMerger",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "rewriteIds",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger#rewriteIds",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "js",
        "types": [
          "*"
        ]
      },
      {
        "name": "newId",
        "types": [
          "*"
        ]
      },
      {
        "name": "old2newIds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "nodeId2sentence",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger#nodeId2sentence",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "js",
        "types": [
          "*"
        ]
      },
      {
        "name": "sentenceNodeMap",
        "types": [
          "*"
        ]
      },
      {
        "name": "rep1",
        "types": [
          "*"
        ]
      },
      {
        "name": "rep2",
        "types": [
          "*"
        ]
      },
      {
        "name": "id2pos",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "nodeId2idxCard",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger#nodeId2idxCard",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "js",
        "types": [
          "*"
        ]
      },
      {
        "name": "idxCardNodeMap",
        "types": [
          "*"
        ]
      },
      {
        "name": "rep1",
        "types": [
          "*"
        ]
      },
      {
        "name": "rep2",
        "types": [
          "*"
        ]
      },
      {
        "name": "id2pos",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "mergeJsons",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger#mergeJsons",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "jsonGraph",
        "types": [
          "*"
        ]
      },
      {
        "name": "sentenceNodeMap",
        "types": [
          "*"
        ]
      },
      {
        "name": "idxCardNodeMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "mergeJsonWithCurrent",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger#mergeJsonWithCurrent",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [
      {
        "name": "jsonGraph",
        "types": [
          "*"
        ]
      },
      {
        "name": "currJson",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "content": "let JsonMerger = require('./json-merger.js');\nlet jsonMerger = new JsonMerger();\nlet appUtilities = window.appUtilities;\n\n/**\n * Merge functions through the editor and the model\n */\nclass ModelMergeFunctions{\n    constructor() {\n    }\n\n\n    /**\n     * Merge a json object with the json of the current sbgn network\n     * @param {Object} jsonGraph\n     * @param {Number} cyId\n     * @param {Object} modelManager\n     * @param {function} callback\n     * @returns {Object}\n     */\n    mergeJsonWithCurrent (jsonGraph, cyId, modelManager, callback) {\n\n        let chiseInstance = appUtilities.getChiseInstance(cyId);\n        let currJson;\n        if(chiseInstance.getMapType()== 'SIF' )\n            currJson = chiseInstance.createJsonFromSif();\n        else\n            currJson = chiseInstance.createJsonFromSBGN();\n\n\n        modelManager.setRollbackPoint(cyId); //before merging.. for undo\n\n        let jsonObj = jsonMerger.mergeJsonWithCurrent(jsonGraph, currJson);\n\n\n        //get another sbgncontainer and display the new SBGN model.\n        modelManager.newModel(cyId, \"me\", true);\n\n        //this takes a while so wait before initiating the model\n        appUtilities.getChiseInstance(cyId).updateGraph(jsonObj, function () {\n\n            modelManager.initModel(appUtilities.getCyInstance(cyId).nodes(), appUtilities.getCyInstance(cyId).edges(), cyId,  \"me\");\n\n            //select the new graph\n            jsonGraph.nodes.forEach(function (node) {\n                appUtilities.getCyInstance(cyId).getElementById(node.data.id).select();\n            });\n\n            $(\"#perform-layout\").trigger('click');\n\n            appUtilities.getCyInstance(cyId).elements().unselect();\n\n            // Call merge notification after the layout\n            setTimeout(function () {\n                modelManager.mergeJsons(cyId, \"me\");\n                if (callback) callback(\"success\");\n            }, 1000);\n\n        }, true);\n    }\n\n\n    /**\n     * Merge an array of json objects to output a single json object.\n     * @param {Array} jsonGraph\n     * @param {Number} cyId\n     * @param {Object} modelManager\n     * @param {function} callback\n     * @returns {Object}\n     */\n    mergeJsons(jsonGraph, cyId, modelManager, callback) {\n        let idxCardNodeMap = {};\n        let sentenceNodeMap = {};\n\n        modelManager.setRollbackPoint(cyId); //before merging.. for undo\n\n        let jsonObj = jsonMerger.mergeJsons(jsonGraph, sentenceNodeMap, idxCardNodeMap);\n\n        modelManager.newModel(cyId, \"me\", true);\n\n\n\n        appUtilities.getChiseInstance(cyId).updateGraph(jsonObj, function(){\n\n            modelManager.initModel( appUtilities.getCyInstance(cyId).nodes(), appUtilities.getCyInstance(cyId).edges(), cyId,  \"me\");\n\n            //Call layout after init\n            $(\"#perform-layout\").trigger('click');\n\n\n            //Call merge notification after the layout\n            setTimeout(function () {\n                modelManager.mergeJsons(cyId, \"me\", true);\n\n                if (callback) callback();\n            }, 1000);\n\n        }, true);\n\n        return {sentences: sentenceNodeMap, idxCards: idxCardNodeMap};\n    }\n\n\n\n}\n\nmodule.exports = ModelMergeFunctions;",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "jsonMerger",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~jsonMerger",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/json-merger.js~JsonMerger"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "appUtilities",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~appUtilities",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "ModelMergeFunctions",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js",
    "importStyle": "ModelMergeFunctions",
    "description": "Merge functions through the editor and the model",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "mergeJsonWithCurrent",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions#mergeJsonWithCurrent",
    "access": "public",
    "description": "Merge a json object with the json of the current sbgn network",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonGraph",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "modelManager",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "mergeJsons",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions#mergeJsons",
    "access": "public",
    "description": "Merge an array of json objects to output a single json object.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonGraph",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "modelManager",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js",
    "content": "/**\n The module hereafter is a toolkit to do everything possible with what is called a \"rephrase\",\n i.e. an array of cytoscape objects (nodes and edges) that were extracted from a sbgn graph\n and then put in an order that reflects the one by which they were visited during the traversing of the graph.\n A rephrase also represents the graph in one dimension and is a convenient data structure\n to handle when it comes to play with gaphs, especially with sbgn graphs where not all nodes are considered the same way:\n for example when merging two sbgn graphs, one merges the molecules before the process nodes.\n The functions implemented allows one to create a rephrase from a json object, merge the nodes and the edges, convert the rephrase back to a json object, etc... and more to come !\n **/\n\n//Author: David Servillo.\n\n//Last change made the: 06/14/2017.\n\nvar cytoscape = require('cytoscape');\nvar intermedPriorityNodes = {'and': 1, 'association': 1, 'dissociation': 1, 'omitted process': 1, 'or': 1, 'process': 1, 'not': 1, 'source and sink': 1, 'uncertain process': 1};\n\n\nclass RephraseHandler {\n\n    constructor(){\n\n    }\n    // Travel through the edges leaving the node.\n    traverseThroughEdges(node, edges, npassages, backToSource, visitedNodes) {\n        var next;\n        var previousVisitedNodesLength;\n\n        //Visit the edges.\n        edges.forEach(edge => {\n            if (!visitedNodes.map(visitedNodes => visitedNodes.id()).includes(edge.id())) {\n                npassages += 1;\n\n                //We are back to the current node again so re-add it to the rephrase.\n                if(npassages > 1)\n                    visitedNodes.push(node);\n\n                visitedNodes.push(edge);\n\n                previousVisitedNodesLength = visitedNodes.length;\n                next = edge.target();\n\n                if(backToSource)\n                    next = edge.source();\n\n                this.traverseGraph(next, visitedNodes);\n\n                //The node we just visited through the edge has previously been visited already so remove it from the rephrase.\n                if((visitedNodes.length === previousVisitedNodesLength) && (npassages > 1))\n                    visitedNodes.pop();\n            }\n        });\n\n        return npassages;\n    }\n\n    //Traverse the graph with the cytoscape library.\n    //Return the visited nodes in an order that reflects\n    //the chronology in which they were visited.\n    //The resulting array is called the rephrase.\n    traverseGraph(node, visitedNodes) {\n\n        // break if we visit a node twice\n        if (visitedNodes.map(visitedNodes => visitedNodes.id()).includes(node.id())) {\n            visitedNodes.push(node);\n            return visitedNodes;\n        }\n\n        // add visited node to collection\n        visitedNodes.push(node);\n\n        // get the edges leaving the node\n        const edgesTo = node.outgoers(function (outgoer) {\n            return outgoer.isEdge();\n        });\n\n        // get the edges entering the node\n        const edgesFrom = node.incomers(function (incomer) {\n            return incomer.isEdge();\n        });\n\n        // travel through the edges leaving the node\n        var npassages = this.traverseThroughEdges(node, edgesTo, 0, 0, visitedNodes);\n\n        // travel through the edges entering the node\n        this.traverseThroughEdges(node, edgesFrom, npassages, 1, visitedNodes);\n\n        return visitedNodes;\n    }\n\n    //Read the cytoscape object, traverse the graph and\n    //returns the \"rephrase\", i.e. an array of nodes and edges\n    //whose the order reflects the one to which the elements were visited.\n    cytoscape2rephrase(cytoscape) {\n        var i;\n        var tmp;\n        var idList = [];\n        var indiceList;\n        var rephrase = [];\n        var indicesToExplore = [];\n\n        for(i = 0; i < cytoscape.nodes().length; i++) {\n            idList.push(cytoscape.nodes()[i].id());\n            indicesToExplore.push(i);\n        }\n\n        while(indicesToExplore.length > 0) {\n            indiceList = {};\n\n            //Traverse the graph, starting with a node not already explored.\n            tmp = this.traverseGraph(cytoscape.nodes()[indicesToExplore[0]], []);\n            tmp.forEach(element => {\n                if(element.isNode())\n                    indiceList[idList.indexOf(element.id())] = 1;\n            });\n\n            i = 0;\n            Object.keys(indiceList).sort(function(a, b){return a-b}).forEach(indice => {\n                idList.splice(indice - i, 1);\n\n                //Remove the indexes in cytoscape that have been explored.\n                indicesToExplore.splice(indice - i, 1);\n                i += 1;\n            });\n\n            tmp.forEach(element => {\n\n                //Combine the rephrases together.\n                rephrase.push(element);\n            });\n        }\n\n        return rephrase;\n    }\n\n    //Divide the rephrase into triplets of node-edge-node and\n    //when a triplet comes with no edge that is when a lonely node\n    //, i.e. not surrounded by an edge and linked to nothing, is identified.\n    getLonelyNodes(rephrase) {\n        var lonelyNodeList = [];\n        var triplet = new Array(3);\n\n        //Duplicate both ends of the rephrase.\n        rephrase.splice(0, 0, rephrase[0]);\n        rephrase.splice(rephrase.length - 1, 0, rephrase[rephrase.length - 1]);\n\n        rephrase.forEach(element => {\n            triplet.shift();\n            triplet.push(element);\n\n            //A linely node is identified.\n            if(triplet[0] != undefined\n                && triplet[0].isNode()\n                && triplet[1] != undefined\n                && triplet[1].isNode()\n                && triplet[2].isNode())\n            {\n                lonelyNodeList.push(triplet[1]);\n            }\n        });\n\n        return lonelyNodeList;\n    }\n\n    //Get that string of characters made of\n    //attribute values characterizing specifically a node,\n    //that I call a \"signature\".\n    //I use that function to output the signature of the elements\n    //contained in a complex.\n    getContentSignature(nodeArray) {\n        var id = \"\";\n        var idList = [];\n\n        nodeArray.forEach(node => {\n\n            //For each node, create its signature.\n            id += node.data('label') + node.data('class');\n\n            if(node.data('statesandinfos') != undefined && node.data('statesandinfos').length > 0) {\n\n                node.data('statesandinfos').forEach(box => {\n                    id += box.clazz + JSON.stringify(box.state) + JSON.stringify(box.label);\n                });\n            }\n\n            //Add the signature in the collection of signature.\n            idList.push(id);\n            id = \"\";\n        });\n\n        //Return the signatures put in order and concatenated together.\n        return idList.sort().join(\"\");\n    }\n\n    //Get that string of characters made of\n    //attribute values characterizing specifically a node,\n    //that I call a \"signature\".\n    getElementSignatures(rephrase) {\n        var signature;\n        var id2signature = {};\n        var id2NbSignatureAlteration = {};\n\n        rephrase.forEach(element => {\n\n            //Read the rephrase and get the signature of each node.\n            if(element.isNode()) {\n                signature = element.data('label') + element.data('class');\n\n                if(element.data('statesandinfos') != undefined && element.data('statesandinfos').length > 0) {\n\n                    element.data('statesandinfos').forEach(box => {\n                        signature += box.clazz + JSON.stringify(box.state) + JSON.stringify(box.label);\n                    });\n                }\n\n                //Add the signature of all the nodes contained in the complex.\n                if(element.data('class') == \"complex\")\n                    signature += this.getContentSignature(element.descendants());\n\n                id2signature[element.id()] = signature;\n                id2NbSignatureAlteration[element.id()] = 0;\n            }\n        });\n\n        rephrase.forEach(element => {\n\n            //Alter the signature of a node when it is contained in another node.\n            if(id2signature[element.data('parent')] && !id2NbSignatureAlteration[element.id()]) {\n                id2signature[element.id()] += id2signature[element.data('parent')];\n                id2NbSignatureAlteration[element.id()] = 1;\n            }\n        });\n\n        return id2signature;\n    }\n\n    // Make sure that each edge has it source before it and\n    // the target after it in the rephrase.\n    rearrangeRephrase(rephrase) {\n        var tmp;\n\n        for(let i = 0; i < rephrase.length; i++) {\n\n            if(rephrase[i].isEdge() && rephrase[i].source().id() != rephrase[i - 1].id()) {\n\n                //Duplicate the nodes around the edge...\n                rephrase.splice(i - 1, 0, rephrase[i - 1]);\n                rephrase.splice(i + 2, 0, rephrase[i + 2]);\n\n                //... and switch positions !\n                tmp = rephrase[i + 2];\n                rephrase[i + 2] = rephrase[i];\n                rephrase[i] = tmp;\n            }\n        }\n    }\n\n    // When two nodes in the rephrase are the same but the ids differ\n    // make the two nodes the same (they point to the same cytoscape object).\n    mergeNodes(rephrase, id2signature) {\n        var isHighPriorityNode;\n        var nonRedundantNodeList = {};\n\n        for(let i = 0; i < rephrase.length; i++) {\n            isHighPriorityNode = rephrase[i].isNode() && intermedPriorityNodes[rephrase[i].data('class')] == undefined;\n\n            //A duplicate node (i.e. that has the same signature as another node) is identified, replace it by the original one.\n            if(isHighPriorityNode && id2signature[rephrase[i].id()] in nonRedundantNodeList)\n                rephrase[i] = nonRedundantNodeList[id2signature[rephrase[i].id()]];\n            else if(isHighPriorityNode)\n                nonRedundantNodeList[id2signature[rephrase[i].id()]] = rephrase[i];\n        }\n    }\n\n    // Divide the rephrase into triplets of node-edge-node and identify\n    // the process nodes that have the same set of triplets as neighbors\n    // (i.e. the reactions that have the same inputs and outputs).\n    // Among the duplicates, select only one of them.\n    mergeProcessNodes(rephrase, id2signature) {\n        var i, j;\n        var key;\n        var processId;\n        var signature;\n        var toRemove = 0;\n        var idsBySignature = {};\n        var signaturesById = {};\n        var tripletsByProcId = {};\n        var triplet = new Array(3);\n\n        rephrase.forEach(element => {\n            triplet.shift();\n            triplet.push(element);\n\n            if(triplet[1] != undefined && triplet[1].isEdge()) {\n\n                //The triplets around the same process node are stored together.\n                //First identify which node is the process node in the triplet and get its id.\n                processId = triplet[0].id();\n                if(intermedPriorityNodes[triplet[2].data('class')])\n                    processId = triplet[2].id();\n\n                if(tripletsByProcId[processId] == undefined)\n                    tripletsByProcId[processId] = [];\n\n                //Save the triplets.\n                tripletsByProcId[processId].push([triplet[0], triplet[1], triplet[2]]);\n            }\n        });\n\n        //The triplets in the previous hash tables are transformed into their signatures\n        //and concatenated to obtain one signature of a reaction.\n        //Then, the keys of the hash table become the values and the values become the keys.\n        //After that operation, the signature of each reaction is associated to an array of ids\n        //of process nodes that perform the same reaction.\n        Object.keys(tripletsByProcId).forEach(id => {\n            tripletsByProcId[id].forEach(triplet => {\n                signature = \"\";\n\n                //Get the signature of the triplet.\n                for(i = 0; i < 3; i++)\n                    signature += id2signature[triplet[i].id()];\n\n                if(signaturesById[id] == undefined)\n                    signaturesById[id] = [];\n\n                //Save the signatures.\n                signaturesById[id].push(signature);\n            });\n\n            //The key now is the reaction signature.\n            key = signaturesById[id].sort().join(\"\");\n            if(idsBySignature[key] == undefined)\n                idsBySignature[key] = [];\n\n            //Role switching: reaction signatures are the keys while the process node ids are the values.\n            idsBySignature[key].push(id);\n        });\n\n        i = 0;\n        Object.keys(idsBySignature).forEach(signature => {\n\n            //For each reaction signature, select just the triplets of the reaction of the\n            //process node corresponding to the first process node id in the array of\n            //process node ids.\n            tripletsByProcId[idsBySignature[signature][0]].forEach(triplet => {\n\n                for(j = 0; j < 3; j++)\n                    rephrase[i + j] = triplet[j]; //Rewrite the rephrase with the new triplets.\n\n                i = i + 3;\n                toRemove = rephrase.length - i\n            });\n        });\n\n        //The above operations result in a reduction of information.\n        //Remove the rest of the rephrase that is rendered useless.\n        rephrase.splice(i, toRemove);\n    }\n\n    // Divide the rephrase in triplets of node-edge-node and identify\n    // the duplicates and remove them.\n    mergeEdges(rephrase, id2signature) {\n        var i, j;\n        var signature;\n        var toRemove = [];\n        var nonRedundantSignatureList = {};\n        var triplet = new Array(3);\n\n        for(i = 0; i < rephrase.length; i++) {\n            triplet.shift();\n            triplet.push(rephrase[i]);\n\n            if(triplet[1] != undefined && triplet[1].isEdge()) {\n                signature = \"\";\n\n                for(j = 0; j < 3; j++)\n                    signature += id2signature[triplet[j].id()]; //Get the signature of the triplet.\n\n                //A duplicate triplet of node-edge-node is identified and\n                //both source and target are the same as the one in the original triplet.\n                //Store the position of the triplet which is to be removed later.\n                if(nonRedundantSignatureList[signature]\n                    && triplet[0] == nonRedundantSignatureList[signature][0]\n                    && triplet[2] == nonRedundantSignatureList[signature][2])\n                {\n                    toRemove.push(i - 2);\n                } else {\n                    nonRedundantSignatureList[signature] = new Array(3);\n\n                    for(j = 0; j < 3; j++)\n                        nonRedundantSignatureList[signature][j] = triplet[j];\n                }\n            }\n        }\n\n        //Remove the duplicate triplets.\n        toRemove.forEach(startposition => {\n            rephrase.splice(startposition, 3);\n        });\n    }\n\n    //Convert a json object to acytoscape object.\n    json2cytoscape(jsObj) {\n        return cytoscape({\n            elements: jsObj,\n            headless: true,\n            styleEnabled: true\n        });\n    }\n}\n\nmodule.exports = RephraseHandler;",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "intermedPriorityNodes",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~intermedPriorityNodes",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"and\": number, \"association\": number, \"dissociation\": number, \"omitted process\": number, \"or\": number, \"process\": number, \"not\": number, \"source and sink\": number, \"uncertain process\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "RephraseHandler",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js",
    "importStyle": "RephraseHandler",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "traverseThroughEdges",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#traverseThroughEdges",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "edges",
        "types": [
          "*"
        ]
      },
      {
        "name": "npassages",
        "types": [
          "*"
        ]
      },
      {
        "name": "backToSource",
        "types": [
          "*"
        ]
      },
      {
        "name": "visitedNodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "traverseGraph",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#traverseGraph",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "visitedNodes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "cytoscape2rephrase",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#cytoscape2rephrase",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "cytoscape",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getLonelyNodes",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#getLonelyNodes",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "rephrase",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getContentSignature",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#getContentSignature",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "nodeArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getElementSignatures",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#getElementSignatures",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "rephrase",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "rearrangeRephrase",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#rearrangeRephrase",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "rephrase",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "mergeNodes",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#mergeNodes",
    "access": "public",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "params": [
      {
        "name": "rephrase",
        "types": [
          "*"
        ]
      },
      {
        "name": "id2signature",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "mergeProcessNodes",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#mergeProcessNodes",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [
      {
        "name": "rephrase",
        "types": [
          "*"
        ]
      },
      {
        "name": "id2signature",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "mergeEdges",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#mergeEdges",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "params": [
      {
        "name": "rephrase",
        "types": [
          "*"
        ]
      },
      {
        "name": "id2signature",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "json2cytoscape",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/rephrase-handler.js~RephraseHandler#json2cytoscape",
    "access": "public",
    "description": null,
    "lineNumber": 403,
    "undocument": true,
    "params": [
      {
        "name": "jsObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js",
    "content": "/**\n * Author: Funda Durupinar Babur <f.durupinar@gmail.com>\n * Shared model handling operations.\n * Clients call these commands to update the model\n * Each room (docId) has one modelManager associated with it\n *\n **/\n\n\nclass ModelManager{\n\n    /**\n     *\n     * @param {Object} model  shared model\n     * @param {string} docId  room id/unique document id\n     */\n    constructor(model, docId){\n        /**\n         * @public\n         */\n        this.model = model;\n        this.docId = docId;\n    }\n\n    /**\n     *\n     * @returns {Object} shared model including all model history\n     */\n    getModel() {\n        return this.model;\n    }\n\n    /**\n     *\n     * @returns {Object} the model for this specific document\n     */\n    getPageDoc(){\n        return this.model.get('documents.' + this.docId);\n    }\n\n    /**\n     * Adds an image to the model\n     * @param {Object} data\n     * @param {string} user\n     * @param {boolean} noHistUpdate whether this operation will be recorded in history\n     */\n    addImage(data, user, noHistUpdate) {\n        let self = this;\n        let images = this.model.get('documents.' + this.docId + '.images');\n        if(images) {\n            for (let i = 0; i < images.length; i++){\n                if(images[i].tabIndex === data.tabIndex) { //overwrite\n                    images[i] = data;\n                    if (!noHistUpdate)\n                        this.updateHistory({opName: 'overwrite', opTarget: 'image', opAttr: data.fileName});\n\n                    //overwrite images\n                    self.model.set('documents.' + self.docId + '.images', images);\n                    return;\n                }\n            }\n        }\n\n        //if no such tab exists, insert a new tab\n        this.model.pass({user: user}).push('documents.' + this.docId + '.images', data);\n\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'add', opTarget: 'image', opAttr: data.fileName});\n    }\n\n    /**\n     * Returns an array of images stored in the model\n     * @returns {Array} images array\n     */\n    getImages(){\n        return this.model.get('documents.' + this.docId + '.images');\n    }\n\n    /**\n     * Sets user name for userId\n     * @param {string} userId\n     * @param {string} userName\n     */\n    setName (userId, userName) {\n        this.model.set('documents.' + this.docId + '.users.' + userId +'.name', userName);\n    }\n\n    /**\n     * Sets if user with userId is currently typing\n     * @param {string} userId\n     * @param {boolean} val\n     */\n    setUserTyping(userId, val){\n        this.model.pass({user:\"me\"}).set('documents.' + this.docId + '.users.' + userId +'.isTyping', val);\n    }\n\n    /**\n     * Returns userName for userId\n     * @param {string} userId\n     * @returns {string} userName\n     */\n    getName (userId) {\n        return this.model.get('documents.' + this.docId + '.users.' + userId + '.name');\n    }\n\n    /***\n     * Sets the color code of the user with userId\n     * @param {string} userId id of the user we want to change color of\n     * @param {string} color\n     */\n    setColorCode(userId, color){\n        this.model.set('documents.' + this.docId + '.users.' + userId +'.colorCode', color);\n    }\n\n    /***\n     * Randomly assigns a color to the user with userId\n     * @param {string} userId of the user we want to change color of\n     */\n    changeColorCode(userId){\n        this.model.set('documents.' + this.docId + '.users.' + userId +'.colorCode', getNewColor());\n    }\n\n\n\n    /***\n     * @returns {Array} Active users in the room\n     */\n    getUserIds(){\n        return this.model.get('documents.' + this.docId + '.userIds');\n    }\n\n    /***\n     * Adds an active userId to the document and updates 'users' info\n     * @param {string} userId\n     * @param {string} userName\n     * @param {string} colorCode\n     */\n    addUser(userId, userName, colorCode){\n        let userIds = this.model.get('documents.' + this.docId + '.userIds');\n\n        if(!userIds || userIds.indexOf(userId) < 0) //user not in the list\n            this.model.at('documents.' + this.docId + '.userIds').push(userId);\n\n\n        let usersPath = this.model.at('documents.' + this.docId + '.users');\n\n        if(!usersPath.get(userId)){\n            if(!userName) {\n                //find maximum userId index\n                let users = usersPath.get();\n                let maxId = 0;\n                for(let att in users){\n                    if(users.hasOwnProperty(att)){\n                        if(users[att].name && users[att].name.indexOf('User') > -1) {\n                            let idNumber = Number(users[att].name.slice(4));\n                            if (idNumber > maxId)\n                                maxId = idNumber;\n                        }\n                    }\n                }\n\n                userName = \"User\" + (maxId +1);\n            }\n            if(!colorCode)\n                colorCode = getNewColor();\n\n            this.setName(userId, userName);\n            this.setUserTyping(userId, false);\n            this.setColorCode(userId, colorCode);\n        }\n    }\n\n    /**\n     * Deletes all the users\n     */\n    deleteAllUsers(){\n        let self = this;\n        let userIds = this.model.get('documents.' + this.docId + '.userIds');\n        for(let i = userIds.length - 1; i>=0; i--){\n            self.deleteUserId(userIds[i]);\n        }\n    }\n\n    /**\n     * Deletes user with userId\n     * @param {string} userId\n     */\n    deleteUserId(userId){\n        let self = this;\n\n        let userIds = this.model.get('documents.' + this.docId + '.userIds');\n        for(let i = 0; i < userIds.length; i++){\n            if(userIds[i] === userId ){\n                self.model.remove('documents.' + self.docId + '.userIds', i) ; //remove from the index\n            }\n        }\n    }\n\n    /**\n     * Updates layout properties\n     * @param {Object} properties\n     */\n    setLayoutProperties(properties){\n        this.model.set('documents.' + this.docId + '.layoutProperties', properties);\n    }\n\n    /**\n     *\n     * @returns {Object} layoutProperties\n     */\n    getLayoutProperties(){\n        return this.model.get('documents.' + this.docId + '.layoutProperties');\n    }\n\n\n    /**\n     * Updates the oncoprint data\n     * @param {Object} oncoprintVal\n     */\n    setOncoprint(oncoprintVal){\n        this.model.set('documents.' + this.docId + '.oncoprint', oncoprintVal);\n    }\n\n    /**\n     *\n     * @returns {Object} oncoprint\n     */\n    getOncoprint(){\n        return this.model.get('documents.' + this.docId + '.oncoprint');\n    }\n\n    /***\n     *\n     * @param {Object} cmd  {opName, opTarget,  elType, elId, opAttr,param, prevParam}\n     * opName: set, load, open, add, select, unselect\n     * opTarget: element, element group,  model, sample,\n         * elType: node, edge\n         * opAttr: highlightColor, lineColor, borderColor etc.\n         */\n\n    updateHistory (cmd) {\n        let command = {\n            date: new Date,\n            opName: cmd.opName,\n            opTarget: cmd.opTarget,\n            elType: cmd.elType,\n            opAttr: cmd.opAttr,\n            elId: cmd.elId,\n            cyId: cmd.cyId,\n            param: cmd.param,\n            prevParam: cmd.prevParam\n        };\n\n        if (cmd != null) {\n            let ind = this.model.push('documents.' + this.docId + '.history', command) - 1;\n            this.model.set('documents.' + this.docId + '.undoIndex', ind);\n        }\n    }\n\n    /**\n     *\n     * @returns {string} Name of the latest command\n     */\n    getLastCommandName(){\n        let undoIndex = this.model.get('documents.' + this.docId + '.undoIndex');\n        let cmd = this.model.get('documents.' + this.docId + '.history.' + undoIndex);\n\n        return cmd.opName;\n    }\n\n\n    /**\n     *\n     * @returns {boolean} if there are enough commands to undo\n     */\n    isUndoPossible() {\n        return (this.model.get('documents.' + this.docId + '.undoIndex') > 0)\n    }\n\n    /**\n     *\n     * @returns {boolean} If we are not already at the latest command\n     */\n    isRedoPossible() {\n        return (this.model.get('documents.' + this.docId + '.undoIndex') + 1 < this.model.get('documents.' + this.docId + '.history').length)\n    }\n\n    /**\n     * Undo latest command\n     */\n    undoCommand() {\n        let undoInd = this.model.get('documents.' + this.docId + '.undoIndex');\n        let cmd = this.model.get('documents.' + this.docId + '.history.' + undoInd); // cmd: opName, opTarget, opAttr, elId, param\n\n\n        if (cmd.opName == \"set\") {\n            if (cmd.opTarget == \"element\" && cmd.elType == \"node\")\n                this.changeModelNodeAttribute(cmd.opAttr, cmd.elId, cmd.cyId, cmd.prevParam, null); //user is null to enable updating in the editor\n\n            else if (cmd.opTarget == \"element\" && cmd.elType == \"edge\")\n                this.changeModelEdgeAttribute(cmd.opAttr, cmd.elId, cmd.cyId, cmd.prevParam, null);\n            else if (cmd.opTarget == \"element group\")\n                this.changeModelElementGroupAttribute(cmd.opAttr, cmd.elId, cmd.cyId, cmd.prevParam, null);\n\n        }\n        else if (cmd.opName == \"add\" || cmd.opName ===\"restore\") {\n            if (cmd.opTarget == \"element\" && cmd.elType == \"node\")\n                this.deleteModelNode(cmd.elId, cmd.cyId );\n            else if (cmd.opTarget == \"element\" && cmd.elType == \"edge\")\n                this.deleteModelEdge(cmd.elId, cmd.cyId);\n            else if (cmd.opTarget == \"compound\")\n                this.removeModelCompound(cmd.elId, cmd.cyId, cmd.param.childrenList, cmd.prevParam);\n        }\n        else if (cmd.opName == \"delete\") {\n            if (cmd.opTarget == \"element\")\n                this.restoreModelElement(cmd.elType, cmd.elId, cmd.cyId, cmd.prevParam);\n            else if (cmd.opTarget == \"element group\"){\n\n                this.restoreModelElementGroup(cmd.elId, cmd.cyId, cmd.prevParam);\n            }\n            else if (cmd.opTarget == \"compound\")\n                this.addModelCompound(cmd.elId, cmd.cyId, cmd.prevParam.compoundAtts, cmd.prevParam.childrenList, cmd.prevParam.paramList);\n\n        }\n        // else if(cmd.opName === \"update\"){ //properties\n        //     if(cmd.opTarget.indexOf('general') >= 0)\n        //         this.updateGeneralProperties(cmd.prevParam);\n        //     else if(cmd.opTarget.indexOf('layout') >= 0)\n        //         this.updateLayoutProperties(cmd.prevParam);\n        //     else if(cmd.opTarget.indexOf('grid') >= 0)\n        //         this.updateGridProperties(cmd.prevParam);\n        //\n        // }\n        else if (cmd.opName == \"init\") {\n            this.newModel(cmd.cyId, null, true);\n        }\n        else if (cmd.opName == \"new\") { //delete all\n            this.restoreModel( cmd.prevParam, cmd.cyId);\n\n        }\n        else if (cmd.opName == \"merge\") {\n            this.newModel(cmd.cyId, null, true);\n            this.restoreModel(cmd.prevParam, cmd.cyId);\n        }\n\n        undoInd = undoInd > 0 ? undoInd - 1 : 0;\n        this.model.set('documents.' + this.docId + '.undoIndex', undoInd);\n\n    }\n\n    /**\n     * Redo latest command\n     */\n    redoCommand () {\n        let undoInd = this.model.get('documents.' + this.docId + '.undoIndex');\n        let cmd = this.model.get('documents.' + this.docId + '.history.' + (undoInd + 1)); // cmd: opName, opTarget, opAttr, elId, param\n\n\n        if (cmd.opName == \"set\") {\n            if (cmd.opTarget == \"element\" && cmd.elType == \"node\")\n                this.changeModelNodeAttribute(cmd.opAttr, cmd.elId, cmd.cyId, cmd.param, null); //user is null to enable updating in the editor\n            else if (cmd.opTarget == \"element\" && cmd.elType == \"edge\")\n                this.changeModelEdgeAttribute(cmd.opAttr, cmd.elId, cmd.cyId, cmd.param, null);\n            else if (cmd.opTarget == \"element group\") {\n                this.changeModelElementGroupAttribute(cmd.opAttr, cmd.elId, cmd.cyId, cmd.param, null);\n            }\n        }\n        else if (cmd.opName == \"add\" ||cmd.opName == \"restore\") {\n            if (cmd.opTarget == \"element\")\n                this.restoreModelElement(cmd.elType, cmd.elId, cmd.cyId, cmd.param);\n            else if (cmd.opTarget == \"compound\")\n                this.addModelCompound(cmd.elId, cmd.cyId, cmd.param.compoundAtts, cmd.param.childrenList, cmd.param.paramList);\n        }\n        else if (cmd.opName == \"delete\") {\n            if (cmd.opTarget == \"element\" && cmd.elType == \"node\")\n                this.deleteModelNode(cmd.elId, cmd.cyId);\n            else if (cmd.opTarget == \"element\" && cmd.elType == \"edge\")\n                this.deleteModelEdge(cmd.elId, cmd.cyId);\n            else if (cmd.opTarget == \"element group\")\n                this.deleteModelElementGroup(cmd.elId, cmd.cyId);\n            else if (cmd.opTarget == \"compound\")\n                this.removeModelCompound(cmd.elId, cmd.cyId, cmd.param.childrenList, cmd.param);\n\n        }\n        // else if(cmd.opName === \"update\"){ //properties\n        //     if(cmd.opTarget.indexOf('general') >= 0)\n        //         this.updateGeneralProperties(cmd.param);\n        //     else if(cmd.opTarget.indexOf('layout') >= 0)\n        //         this.updateLayoutProperties(cmd.param);\n        //     else if(cmd.opTarget.indexOf('grid') >= 0)\n        //         this.updateGridProperties(cmd.param);\n        //\n        // }\n        else if (cmd.opName == \"init\") {\n            this.restoreModel(cmd.param, cmd.cyId );\n        }\n        else if (cmd.opName == \"new\") { //delete all\n            this.newModel(cmd.cyId );\n        }\n        else if (cmd.opName == \"merge\") { //delete all\n            this.restoreModel(cmd.param, cmd.cyId);\n        }\n\n        undoInd = undoInd < this.model.get('documents.' + this.docId + '.history').length - 1 ? undoInd + 1 : this.model.get('documents.' + this.docId + '.history').length - 1;\n        this.model.set('documents.' + this.docId + '.undoIndex', undoInd);\n    }\n\n\n    /**\n     * Notifies other users that a new tab has been opened\n     * @param {Number} cyId Id of the tab that's closed\n     * @param {string} user Parameter to test if the update comes from the same client\n     */\n    openCy(cyId, user){\n\n        let cyPathStr = this.getModelCyPathStr(cyId);\n        // this.model.pass({user: user}).set('documents.' + this.docId + '.newCy', cyId); //let others know\n        this.model.pass({user:user}).set(cyPathStr + '.cyId', cyId);\n    }\n\n    /**\n     * Does not remove the cy, only notifies other users that a tab is closed\n     * @param {Number} cyId Id of the tab that's closed\n     * @param {string} user Parameter to test if the update comes from the same client\n     */\n    closeCy(cyId, user){\n\n        this.model.pass({user: user}).set('documents.' + this.docId + '.closedCy', cyId);\n    }\n\n\n    /**\n     * Returns Newt tab ids with different cytoscape views\n     * @returns {Array} Newt tabs\n     */\n    getCyIds(){\n        let cyList = this.model.get('documents.' + this.docId + '.cy');\n        let cyIds = [];\n        for(var att in cyList){\n            if(cyList.hasOwnProperty(att))\n                cyIds.push(att);\n        }\n\n        return cyIds;\n    }\n\n    /**\n     * Returns path to the cytoscape view with cyId\n     * @param {Number} cyId\n     * @returns {string}\n     */\n    getModelCyPathStr(cyId){\n        return 'documents.' + this.docId + '.cy.' + cyId ;\n    }\n\n    /**\n     * Returns path to the node with id in the view with cyId\n     * @param {string} id\n     * @param {Number} cyId\n     * @returns {string}\n     */\n    getModelNodePathStr(id, cyId){\n        return 'documents.' + this.docId + '.cy.' + cyId +'.nodes.' + id;\n    }\n\n    /**\n     * Returns the node with id in the view with cyId\n     * @param {string} id\n     * @param {Number} cyId\n     * @returns {Object}\n     */\n    getModelNode(id, cyId) {\n        let nodePath = this.model.at(this.getModelNodePathStr(id, cyId));\n        return nodePath.get();\n    }\n\n    /**\n     * Returns all the nodes in the view with cyId as an array\n     * @param {Number} cyId\n     * @returns {Array}\n     */\n    getModelNodesArr(cyId){\n        let nodes = this.model.get('documents.' + this.docId + '.cy.' + cyId + '.nodes');\n        let nodeArr = [];\n        for(var att in nodes){\n            if(nodes.hasOwnProperty(att))\n                nodeArr.push(nodes[att]);\n        }\n\n        return nodeArr;\n    }\n\n    /**\n     * Returns all the nodes in the view with cyId as an object\n     * @param {Number} cyId\n     * @returns {Object}\n     */\n    getModelNodes(cyId) {\n        let nodes = this.model.get('documents.' + this.docId + '.cy.' + cyId + '.nodes');\n        return nodes;\n    }\n\n    /**\n     * Tests if node with nodeId is in the view with cyId\n     * @param {Number} cyId\n     * @param {string} nodeId\n     * @returns {boolean}\n     */\n    isNodeInModel(cyId, nodeId){\n        let nodesArr = this.getModelNodesArr(cyId);\n\n        for(let i = 0; i < nodesArr.length; i++){\n            if(nodesArr[i].id == nodeId)\n                return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests if edge with edgeId is in the view with cyId\n     * @param {Number} cyId\n     * @param {string} edgeId\n     * @returns {boolean}\n     */\n    isEdgeInModel(cyId, edgeId) {\n        let edgesArr = this.getModelEdgesArr(cyId);\n\n        for (let i = 0; i < edgesArr.length; i++) {\n            if (edgesArr[i].id == edgeId)\n                return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns path to the edge with id in the view with cyId\n     * @param {string} id\n     * @param {Number} cyId\n     * @returns {string}\n     */\n    getModelEdgePathStr(id, cyId){\n        return 'documents.' + this.docId + '.cy.' + cyId +'.edges.' + id;\n    }\n\n    /**\n     * Returns the edge with id in the view with cyId\n     * @param {string} id\n     * @param {Number} cyId\n     * @returns {Object}\n     */\n    getModelEdge (id, cyId) {\n        let edgePath = this.model.at(this.getModelEdgePathStr(id, cyId));\n        return edgePath.get();\n    }\n\n    /**\n     * Returns all the edges in the view with cyId as an array\n     * @param {Number} cyId\n     * @returns {Array}\n     */\n    getModelEdgesArr(cyId){\n        let edges = this.model.get('documents.' + this.docId + '.cy.' + cyId +'.edges');\n        let edgeArr = [];\n        for(var att in edges){\n            if(edges.hasOwnProperty(att))\n                edgeArr.push(edges[att]);\n        }\n\n        return edgeArr;\n    }\n\n    /**\n     * Highlights the cytoscape node with the color of the selecting user\n     * @param {Object} node cytoscape node\n     * @param {Number} cyId\n     * @param {string} userId User who made the selection\n     * @param {string} user parameter to test if the update comes from the same client\n     * @returns {string} success or failure message\n     */\n    selectModelNode (node, cyId, userId, user) {\n\n        let nodePathStr = this.getModelNodePathStr(node.id(), cyId);\n        let nodePath = this.model.at(nodePathStr);\n        if (nodePath.get() == null)\n            return \"Node id not found\";\n\n        let userPath = this.model.at('documents.' + this.docId + '.users.' + userId);\n\n        this.model.pass({user: user}).set(nodePathStr + '.highlightColor', userPath.get('colorCode'));\n\n        return \"success\"\n\n    }\n\n\n    /**\n     * Highlights the cytoscape edge with the color of the selecting user\n     * @param {Object} edge cytoscape edge\n     * @param {Number} cyId\n     * @param {string} userId User who made the selection\n     * @param {string} user parameter to test if the update comes from the same client\n     * @returns {string} success or failure message\n     */\n    selectModelEdge (edge, cyId, userId, user) {\n\n        let edgePathStr = this.getModelEdgePathStr(edge.id(), cyId);\n        let edgePath = this.model.at(edgePathStr);\n        if (edgePath.get() == null)\n            return \"Edge id not found\";\n        let userPath = this.model.at('documents.' + this.docId + '.users.' + userId);\n        this.model.pass({user: user}).set(edgePathStr + '.highlightColor', userPath.get('colorCode'));\n        return \"success\";\n\n    }\n\n    /**\n     * Removes the highlight of the cytoscape node\n     * @param {Object} node cytoscape node\n     * @param {Number} cyId\n     * @param {string} user parameter to test if the update comes from the same client\n     * @returns {string} success or failure message\n     */\n    unselectModelNode (node, cyId,  user) {\n\n        let nodePathStr = this.getModelNodePathStr(node.id(), cyId);\n        let nodePath = this.model.at(nodePathStr);\n\n        if (nodePath.get() == null)\n            return \"Node id not found\";\n\n        this.model.pass({user: user}).set(nodePathStr + '.highlightColor', null);\n\n        return \"success\";\n    }\n\n    /**\n     * Removes the highlight of the cytoscape edge\n     * @param {Object} edge cytoscape edge\n     * @param {Number} cyId\n     * @param {string} user parameter to test if the update comes from the same client\n     * @returns {string} success or failure message\n     */\n    unselectModelEdge (edge,  cyId, user) {\n\n        let edgePathStr = this.getModelEdgePathStr(edge.id(), cyId);\n        let edgePath = this.model.at(edgePathStr);\n        if (edgePath.get() == null)\n            return \"Edge id not found\";\n\n        this.model.pass({user: user}).set(edgePathStr + '.highlightColor', null);\n\n        return \"success\";\n\n\n    }\n\n    /***\n     *\n     * Adds node with given attributes\n     * @param {string} nodeId\n     * @param {Number} cyId\n     * @param {Object} param {position:, data:}\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate whether this operation will be recorded in history\n     * returns {string} success or failure message\n     */\n\n    addModelNode (nodeId, cyId, param, user, noHistUpdate) {\n        let nodePathStr = this.getModelNodePathStr(nodeId, cyId);\n\n        if (this.model.get(nodePathStr) != null)\n            return \"Node cannot be duplicated\";\n\n        this.model.pass({user: user}).set(nodePathStr + '.id', nodeId);\n        this.model.pass({user: user}).set(nodePathStr + '.data.id', nodeId);\n        this.model.pass({user: user}).set(nodePathStr + '.position', param.position);\n        this.model.pass({user: user}).set(nodePathStr + '.data', param.data);\n\n        //adding the node in cytoscape\n        this.model.pass({user: user}).set(nodePathStr+ '.addedLater', true);\n\n\n\n        if (!noHistUpdate)\n        //We don't want all the attributes of the param to be printed\n            this.updateHistory({\n                opName: 'add',\n                opTarget: 'element',\n                elType: 'node',\n                elId: nodeId,\n                cyId: cyId,\n                param: param\n\n            });\n\n\n        return \"success\";\n\n    }\n\n    /***\n     *\n     * Adds edge with given attributes\n     * @param {string} edgeId\n     * @param {Number} cyId\n     * @param {Object} param {position:, data:}\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate whether this operation will be recorded in history\n     * returns {string} success or failure message\n     */\n    addModelEdge (edgeId, cyId, param, user, noHistUpdate) {\n\n        let edgePathStr = this.getModelEdgePathStr(edgeId, cyId);\n        if (this.model.get(edgePathStr) != null)\n            return \"Edge cannot be duplicated\";\n\n        this.model.pass({user: user}).set(edgePathStr+ '.data.id', edgeId);\n        this.model.pass({user: user}).set(edgePathStr+ '.data', param.data);\n\n\n        //adding the edge...other operations should be called after this\n        this.model.pass({user: user}).set(edgePathStr + '.addedLater', true);\n\n\n        if (!noHistUpdate)\n            this.updateHistory({\n                opName: 'add',\n                opTarget: 'element',\n                elType: 'edge',\n                elId: edgeId,\n                cyId: cyId,\n                param: param\n\n            });\n\n        return \"success\";\n\n    }\n\n    /***\n     * Adds a new compound with given attributes\n     * @param {string} compoundId New compound's id\n     * @param {Number} cyId\n     * @param {Object} compoundAtts Attributes for new compound\n     * @type {Object} compoundAtts Attributes for new compound\n     * @property {string} compoundAtts.position\n     * @property {string}compoundAtts.data\n     * @param {Array} elList Children list\n     * @property {string} elList[i].id\n     * @property {string} elList[i].isNode\n     * @param {Array} paramList Children's data attributes\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n\n    addModelCompound (compoundId, cyId, compoundAtts, elList, paramList, user, noHistUpdate) {\n\n        let prevParentList = [];\n        paramList.forEach(function(param){\n            // prevParentList.push(paramList.parent);\n            prevParentList.push(param.parent);\n        });\n\n        this.addModelNode(compoundId, cyId, compoundAtts, user, true);\n\n        this.changeModelElementGroupAttribute(\"data\", elList, cyId, paramList,  user, true);\n\n\n\n        if (!noHistUpdate)\n            this.updateHistory({\n                opName: 'add',\n                opTarget: 'compound',\n                elId: compoundId,\n                cyId: cyId,\n                param: {paramList: paramList, childrenList: elList, compoundAtts: compoundAtts},\n                prevParam:  prevParentList //TODO\n            });\n\n    }\n\n\n    /***\n     * Removes compound and changes children's parents to their old parents\n     * @param {string} compoundId  New compound's id\n     * @param {Number} cyId\n     * @param {Object} childrenList Children list as {id:, isNode:}\n     * @param {Array} prevParentList Children's previous parents\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n\n    removeModelCompound (compoundId, cyId, childrenList, prevParentList, user, noHistUpdate) {\n        let self = this;\n\n        let nodePath = this.model.at('documents.' + this.docId + '.cy.' + cyId + '.nodes.' + compoundId);\n\n        let compoundAtts = {\n            id: compoundId,\n            class: nodePath.get('data.class'),\n            x: nodePath.get('position.x'),\n            y: nodePath.get('position.y')\n\n        };\n\n        let paramList = [];\n        childrenList.forEach(function(child){\n            let data = self.model.get(self.getModelNodePathStr(child.id, cyId));\n            paramList.push(data);\n        });\n\n        //isolate the compound first, then delete\n        this.changeModelElementGroupAttribute(\"data.parent\", childrenList, cyId, prevParentList,   user, true);\n        this.deleteModelNode(compoundId, cyId, user, true);\n\n        if (!noHistUpdate)\n            this.updateHistory({\n                opName: 'delete',\n                opTarget: 'compound',\n                elId: compoundId,\n                cyId: cyId,\n                prevParam: {childrenList: childrenList, compoundAtts: compoundAtts, paramList: paramList},\n                param: prevParentList\n            });\n\n    }\n\n\n    /**\n     *\n     * @param {string} attStr Attribute name in the model\n     * @param {Array} elList Nodes and/or edges to change attributes\n     * @param cyId\n     * @param {Array} paramList New parameter values\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     * @returns {string}\n     */\n    changeModelElementGroupAttribute (attStr, elList, cyId, paramList,   user, noHistUpdate) { //historyData){\n        let self = this;\n        let prevParamList = [];\n\n        if (!noHistUpdate) {\n\n            elList.forEach(function (el) {\n\n                let prevAttVal;\n                if (el.isNode)\n                    prevAttVal = self.model.get(self.getModelNodePathStr(el.id, cyId) + '.' + attStr);\n                else\n                    prevAttVal = self.model.get(self.getModelEdgePathStr(el.id, cyId) + '.' + attStr);\n\n\n                prevParamList.push(prevAttVal);\n            });\n\n\n            this.updateHistory({\n                opName: 'set',\n                opTarget: 'element group',\n                elId: elList,\n                cyId: cyId,\n                opAttr: attStr,\n                param: paramList,\n                prevParam: prevParamList\n            });\n\n        }\n\n        let ind = 0;\n        elList.forEach(function (el) {\n            let currAttVal = paramList[ind++];\n\n            if (el.isNode)\n                self.changeModelNodeAttribute(attStr, el.id, cyId, currAttVal, user, true); //don't update individual histories\n            else\n                self.changeModelEdgeAttribute(attStr, el.id, cyId, currAttVal, user, true);\n\n        });\n\n        return \"success\";\n\n    }\n\n    /**\n     * Returns the node's attribute value\n     * @param {string} attStr\n     * @param {string} nodeId\n     * @param {Number} cyId\n     * @returns {Object}\n     */\n    getModelNodeAttribute(attStr, nodeId, cyId){\n        let nodePathStr = this.getModelNodePathStr(nodeId, cyId);\n        let nodePath = this.model.at(nodePathStr);\n\n        return nodePath.get(attStr);\n    }\n\n    /**\n     * Returns the edge's attribute value\n     * @param {string} attStr\n     * @param {string} edgeId\n     * @param {Number} cyId\n     * @returns {Object}\n     */\n    getModelEdgeAttribute(attStr, edgeId, cyId){\n\n        if(!this.isEdgeInModel(cyId, edgeId))\n            return;\n\n        let edgePathStr = this.getModelEdgePathStr(edgeId, cyId);\n        let edgePath = this.model.at(edgePathStr);\n\n        return edgePath.get(attStr);\n    }\n\n    /**\n     * @param {string} attStr attribute name in the model\n     * @param {string} nodeId\n     * @param {Number} cyId\n     * @param {Object} attVal new value to assign\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate whether this operation will be recorded in history\n     * @returns {string} success or failure\n     */\n\n    changeModelNodeAttribute (attStr, nodeId, cyId, attVal, user, noHistUpdate) {\n\n        if(!this.isNodeInModel(cyId, nodeId))\n            return;\n\n        let nodePathStr = this.getModelNodePathStr(nodeId, cyId);\n        let nodePath = this.model.at(nodePathStr);\n\n\n        let prevAttVal = nodePath.get(attStr);\n\n        if(attStr === \"width\") //as we read this directly from cy.data\n            attStr = \"borderWidth\";\n\n\n        nodePath.pass({user: user}).set(attStr, attVal);\n\n        if (attStr == \"expandCollapseStatus\") {\n            if (attVal == \"expand\")\n                prevAttVal = \"collapse\";\n            else //if null or collapse\n                prevAttVal = \"expand\";\n        }\n\n        if (attStr != 'interactionCount') {\n            this.model.increment(nodePathStr +  '.interactionCount', 1);\n\n            if (!noHistUpdate) {\n\n                this.updateHistory({\n                    opName: 'set',\n                    opTarget: 'element',\n                    elType: 'node',\n                    elId: nodeId,\n                    cyId: cyId,\n                    opAttr: attStr,\n                    param: attVal,\n                    prevParam: prevAttVal\n                });\n            }\n        }\n\n        return \"success\";\n\n    }\n\n    /**\n     * @param {string} attStr attribute name in the model\n     * @param {string} edgeId\n     * @param {Number} cyId\n     * @param {Object} attVal new value to assign\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate whether this operation will be recorded in history\n     * @returns {string} success or failure\n     */\n    changeModelEdgeAttribute (attStr, edgeId, cyId, attVal, user, noHistUpdate) {\n        let edgePathStr = this.getModelEdgePathStr(edgeId, cyId);\n        let edgePath = this.model.at(edgePathStr);\n        let prevAttVal = edgePath.get(attStr);\n        edgePath.pass({user: user}).set(attStr, attVal);\n\n\n        let sourceId = edgePath.get('source');\n        let targetId = edgePath.get('target');\n\n        if (sourceId){\n            let sourcePathStr = this.getModelNodePathStr(sourceId, cyId);\n            this.model.increment(sourcePathStr +  '.interactionCount', 1);\n        }\n\n        if (targetId){\n            let targetPathStr = this.getModelNodePathStr(targetId, cyId);\n            this.model.increment(targetPathStr +  '.interactionCount', 1);\n        }\n\n\n        if (!noHistUpdate) {\n\n            this.updateHistory({\n                opName: 'set',\n                opTarget: 'element',\n                elType: 'edge',\n                elId: edgeId,\n                cyId: cyId,\n                opAttr: attStr,\n                param: attVal,\n                prevParam: prevAttVal\n            });\n\n        }\n\n        return \"success\";\n    }\n\n\n    /**\n     * Delete node from the shared model\n     * @param {string} nodeId Node id to delete\n     * @param {Number} cyId Cy id to delete node from\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     * @returns {string} Success or failure\n\n     */\n    deleteModelNode (nodeId, cyId, user, noHistUpdate) {\n        let nodePathStr = this.getModelNodePathStr(nodeId, cyId);\n        let nodePath = this.model.at(nodePathStr);\n\n        if (nodePath.get() == null)\n            return \"Node id not found\";\n\n        if (!noHistUpdate) {\n\n\n            let prevParam = nodePath.get();\n\n\n            this.updateHistory({\n                opName: 'delete',\n                opTarget: 'element',\n                elType: 'node',\n                elId: nodeId,\n                cyId: cyId,\n                prevParam: prevParam\n\n            });\n\n        }\n\n        this.model.pass({user: user}).del(nodePathStr);\n\n        return \"success\";\n\n    }\n\n    /**\n     * Delete edge from the shared model\n     * @param {string} edgeId  Edge id to delete\n     * @param {Number} cyId Cy id to delete edge from\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     * @returns {string} Success or failure\n     */\n    deleteModelEdge (edgeId, cyId, user, noHistUpdate) {\n        let edgePathStr = this.getModelEdgePathStr(edgeId, cyId);\n        let edgePath = this.model.at(edgePathStr);\n        if (edgePath.get() == null)\n            return \"Edge id not found\";\n\n\n        if (!noHistUpdate) {\n\n            let prevParam = edgePath.get();\n\n            this.updateHistory({\n                opName: 'delete',\n                opTarget: 'element',\n                elType: 'edge',\n                elId: edgeId,\n                cyId: cyId,\n                prevParam: prevParam\n            });\n\n        }\n\n        this.model.pass({user: user}).del(edgePathStr);\n\n        return \"success\";\n\n    }\n\n\n    /**\n     * Delete the elements in selectedEles group\n     * @param {Array} selectedEles\n     * @param cyId\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     * @returns {string} Success or failure\n     */\n    deleteModelElementGroup (selectedEles, cyId, user, noHistUpdate) {\n        let prevParamsNodes = [];\n        let prevParamsEdges = [];\n        let self = this;\n\n\n        if(selectedEles.edges!= null){\n            selectedEles.edges.forEach(function (edge) {\n                let edgePathStr = self.getModelEdgePathStr(edge.id, cyId);\n                let edgePath = self.model.at(edgePathStr);\n                prevParamsEdges.push(edgePath.get());\n            });\n\n\n            selectedEles.edges.forEach(function (edge) {\n                self.deleteModelEdge(edge.id, cyId, user, true); //will not update children history\n            });\n        }\n\n        if(selectedEles.nodes!= null) {\n            selectedEles.nodes.forEach(function (node) {\n                let nodePathStr = self.getModelNodePathStr(node.id, cyId);\n                let nodePath = self.model.at(nodePathStr);\n\n                prevParamsNodes.push(nodePath.get());\n            });\n\n\n            selectedEles.nodes.forEach(function (node) {\n                self.deleteModelNode(node.id, cyId, user, true); //will not update children history\n            });\n        }\n        if (!noHistUpdate)\n            this.updateHistory({\n                opName: 'delete',\n                opTarget: 'element group',\n                elId: selectedEles,\n                cyId: cyId,\n                prevParam: {nodes: prevParamsNodes, edges: prevParamsEdges}\n            });\n\n\n    }\n\n    /**\n     * Restores the deleted elements into the shared model\n     * @param {Array} elList Elements to restore\n     * @param {Number} cyId\n     * @param {Object} param\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    restoreModelElementGroup (elList, cyId, param, user, noHistUpdate) {\n        let self = this;\n        //Restore nodes first\n\n\n        for (let i = 0; i < elList.nodes.length; i++) {\n            self.restoreModelNode(elList.nodes[i].id, cyId, param.nodes[i], user, noHistUpdate);\n        }\n\n        //restore edges later\n        for (let i = 0; i < elList.edges.length; i++) {\n            self.restoreModelEdge(elList.edges[i].id, cyId,  param.edges[i], user, noHistUpdate);\n        }\n\n        //change parents after adding them all\n        for (let i = 0; i < elList.nodes.length; i++) {\n            self.changeModelNodeAttribute('parent', elList.nodes[i].id, cyId, param.nodes[i].parent, null, noHistUpdate);\n        }\n\n\n\n        if (!noHistUpdate)\n            self.updateHistory({\n                opName: 'restore',\n                opTarget: 'element group',\n                elId: elList,\n                cyId: cyId,\n                param: param\n\n            });\n    }\n\n\n    /**\n     * Restores the deleted node into the shared model\n     * @param {string} nodeId Node to restore\n     * @param {Number} cyId\n     * @param {Object} param Node data and position\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    restoreModelNode (nodeId, cyId, param, user, noHistUpdate) {\n\n        //param is the previous node data\n        //history is updated as restore command\n        this.addModelNode(nodeId, cyId, param, user, true);\n\n        //No need to init -- data and position are updated in the next steps\n\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'restore', opTarget: 'element', elType: 'node', elId: nodeId, cyId: cyId, param:param});\n    }\n\n\n    /**\n     * Restores the deleted edge into the shared model\n     * @param {string} edgeId Edge to restore\n     * @param {Number} cyId\n     * @param {Object} param Edge data\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    restoreModelEdge (edgeId, cyId, param, user, noHistUpdate) {\n        //param is the previous edge data\n        //history is updated as restore command\n        this.addModelEdge(edgeId, cyId, param, user, true);\n        //No need to init -- data and position are updated in the next steps\n\n\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'restore', opTarget: 'element', elType: 'edge', elId: edgeId, cyId: cyId, param:param});\n    }\n\n\n    /**\n     * Restores the deleted element into the shared model\n     * @param {string} elType \"node\" or \"edge\"\n     * @param {string} elId Element to restore\n     * @param {Number} cyId\n     * @param {Object} param Element data\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    restoreModelElement (elType, elId, cyId, param, user, noHistUpdate) {\n\n        if (elType == \"node\")\n            this.restoreModelNode(elId, cyId, param, user, noHistUpdate);\n        else\n            this.restoreModelEdge(elId, cyId, param, user, noHistUpdate);\n\n\n    }\n\n\n    /**\n     * This function is used to undo newModel and redo initModel\n     * @param {Object} modelCy : nodes and edges to be restored\n     * @param {Number} cyId\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    restoreModel (modelCy, cyId, user, noHistUpdate) {\n        let cyPathStr = this.getModelCyPathStr(cyId);\n        let prevParam = this.model.get(cyPathStr);\n        this.model.pass({user: user}).set(cyPathStr , modelCy);\n\n\n        // this.setSampleInd(-1, null, true); //to get a new container\n\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'restore', prevParam: prevParam, param: modelCy, cyId: cyId, opTarget: 'model'});\n\n    }\n\n\n    /**\n     * Deletes the model and everything in it\n     * Should be called before loading a new graph to prevent id confusion\n     * @param {Number} cyId\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    newModel (cyId, user, noHistUpdate) {\n\n        let self = this;\n        let cyPathStr = this.getModelCyPathStr(cyId);\n        let prevModelCy = this.model.get(cyPathStr);\n\n\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'new', prevParam: prevModelCy, cyId: cyId, opTarget: 'model'});\n\n        let edges = this.model.get(cyPathStr +'.edges');\n        let nodes = this.model.get(cyPathStr +'.nodes');\n\n\n        for (let att in edges) {\n            if (edges.hasOwnProperty(att)) {\n                self.deleteModelEdge(edges[att].id, cyId, user, true);\n            }\n        }\n\n        for (let att in nodes) {\n            if (nodes.hasOwnProperty(att)) {\n                self.deleteModelNode(nodes[att].id, cyId, user, true);\n            }\n        }\n\n        this.model.pass({user: user}).del('documents.' + this.docId + '.cy.' + cyId +'.edges');\n        this.model.pass({user: user}).del('documents.' + this.docId + '.cy.' + cyId +'.nodes');\n\n    }\n\n\n\n    /**\n     * Cleans up the model without deleting the model itself\n     * should be called before loading a new graph to prevent id confusion\n     * @param {Array} nodes Nodes to delete\n     * @param {Array} edges Edges to delete\n     * @param {Number} cyId\n     * @param {string} user parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    deleteAll (nodes, edges, cyId, user, noHistUpdate) {\n\n        let self = this;\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'new', cyId: cyId, opTarget: 'model'});\n\n\n        edges.forEach(function (edge) {\n            self.deleteModelEdge(edge.id(), cyId,  user, noHistUpdate);\n        });\n\n        nodes.forEach(function (node) {\n            self.deleteModelNode(node.id(), cyId, user, noHistUpdate);\n        });\n\n    }\n\n\n    /**\n     * Returns the model nodes and edges as a json object\n     * @param {Number} cyId Newt tab id\n     * @returns {Object} Model as a json object of nodes and edges\n     */\n    getJsonFromModel (cyId) {\n\n        let cyPathStr = this.getModelCyPathStr(cyId);\n        let nodes = this.model.get(cyPathStr +'.nodes');\n\n        if (nodes == null)\n            return null;\n\n        let edges = this.model.get(cyPathStr +'.edges');\n\n        let jsonNodes = [];\n        let jsonEdges = [];\n\n\n        for (let att in nodes) {\n\n            if (nodes.hasOwnProperty(att)) {\n                let node = nodes[att];\n                let jsonNode = {\n                    data: node.data\n                };\n\n                jsonNodes.push(jsonNode);\n            }\n        }\n\n        for (let att in edges) {\n            if (edges.hasOwnProperty(att)) {\n                let edge = edges[att];\n\n                let jsonEdge = {\n                    data: edge.data\n                };\n\n                jsonEdges.push(jsonEdge);\n            }\n        }\n\n        return {nodes: jsonNodes, edges: jsonEdges};\n    }\n\n    /***\n     * Takes a cytoscape node and loads it into the model\n     * @param {Object} node Cytoscape node\n     * @param {Number} cyId\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    initModelNode (node, cyId, user, noHistUpdate) {\n\n        let nodePathStr = this.getModelNodePathStr(node.id(), cyId);\n        let nodePath = this.model.at(nodePathStr);\n\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'init', opTarget: 'element', elType: 'node', elId: node.id(), cyId: cyId});\n\n\n        nodePath.set('id', node.id());\n\n        // node._private.data.annotationsView = null;\n\n        let interactionCount = nodePath.get('interactionCount');\n\n        if (interactionCount == null) //this is not stored in cy\n            this.changeModelNodeAttribute('interactionCount', node.id(), cyId,  0, user, true); //don't update history\n\n        let data = nodePath.get('data');\n        //bbox is a random data parameter to make sure all data parts are already in the model\n        //if the only data parameters are id and class, it means it has just been added without initialization\n        if (data != null && data.bbox!=null) //it means data has been added before\n            node.data(data);\n\n        else {\n            //correct the labels from PC queries\n            let nodeData = node.data();\n            if(nodeData == null)\n                nodeData = node._private.data;\n\n\n            nodeData.annotationsView = null;\n\n            nodeData.auxunitlayouts = null;\n\n            if(nodeData.statesandinfos) {\n\n                for (let i = 0; i < nodeData.statesandinfos.length; i++) {\n\n                    if (nodeData.statesandinfos[i].clazz === \"state letiable\") {\n                        if (nodeData.statesandinfos[i].state.value === \"opthr\") {\n                            nodeData.statesandinfos[i].state.value = \"p\";\n                            nodeData.statesandinfos[i].state.letiable = \"T\" + nodeData.statesandinfos[i].state.letiable;\n                        }\n                        else if (nodeData.statesandinfos[i].state.value === \"opser\") {\n                            nodeData.statesandinfos[i].state.value = \"p\";\n                            nodeData.statesandinfos[i].state.letiable = \"S\" + nodeData.statesandinfos[i].state.letiable;\n                        }\n                        else if (nodeData.statesandinfos[i].state.value === \"optyr\") {\n                            nodeData.statesandinfos[i].state.value = \"p\";\n                            nodeData.statesandinfos[i].state.letiable = \"Y\" + nodeData.statesandinfos[i].state.letiable;\n                        }\n                    }\n\n                }\n                node._private.data.statesandinfos = nodeData.statesandinfos;\n            }\n            this.changeModelNodeAttribute('data', node.id(), cyId, nodeData, user, noHistUpdate);\n        }\n\n        //make this initially unselected\n        //    nodePath.set('highlightColor', null);\n\n\n        let pos = nodePath.get('position');\n\n        if (pos != null)\n            node.position(pos);\n\n        else {\n            let nodePosition = node.position();\n            if(nodePosition == null)\n                nodePosition = node._private.position;\n            this.changeModelNodeAttribute('position', node.id(), cyId, nodePosition, user, noHistUpdate);\n        }\n\n        //Initializing css properties causes bypass problems!!\n\n    }\n\n    /**\n     * Takes a cytoscape edge and loads it into the model\n     * @param {Object} edge Cytoscape edge\n     * @param {Number} cyId\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    initModelEdge (edge, cyId, user, noHistUpdate) {\n        let edgePathStr = this.getModelEdgePathStr(edge.id(), cyId);\n        let edgePath = this.model.at(edgePathStr);\n\n        if (!noHistUpdate)\n            this.updateHistory({opName: 'init', opTarget: 'element', elType: 'edge', elId: edge.id(), cyId: cyId});\n\n        edgePath.set('id', edge.id());\n\n\n\n        //make this initially unselected\n        //edgePath.set('highlightColor', null);\n\n        let data = edgePath.get('data');\n        //cardinality is a random data parameter to make sure all data parts are already in the model\n        //if the only data parameters are id and class, it means it has just been added without initialization\n        if (data != null && data.cardinality != null)\n            edge.data(data);\n\n        else {\n\n\n            let edgeData = edge.data();\n            if(edgeData == null)\n                edgeData = edge._private.data;\n\n\n            edgeData.annotationsView = null;\n            //This is a workaround to handle (.) dots in mongo\n            if(edgeData.siteLocSet){ //dots in Pathway Commons links are causing problems\n                edgeData.siteLocSet = JSON.stringify(edgeData.siteLocSet);\n            }\n            if(edgeData.pcIDSet){ //same workaround\n                edgeData.pcIDSet = JSON.stringify(edgeData.pcIDSet);\n\n            }\n\n\n            this.changeModelEdgeAttribute('data', edge.id(), cyId, edgeData, user, noHistUpdate);\n        }\n\n    }\n\n    /***\n     * Initializes the model with cytoscape elements\n     * @param {Array} nodes cy elements\n     * @param {Array} edges cy elements\n     * @param {Number} cyId\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    initModel ( nodes, edges, cyId, user, noHistUpdate) {\n\n        console.log(\"inited\");\n\n        nodes.forEach( (node) => {\n            this.initModelNode(node, cyId, user, true);\n        });\n\n        edges.forEach( (edge) => {\n            this.initModelEdge(edge, cyId, user, true);\n        });\n\n\n        let newModelCy = this.model.get('documents.' + this.docId + '.cy.' + cyId );\n\n        if (!noHistUpdate) {\n            this.updateHistory({opName: 'init', cyId: cyId, param: newModelCy, opTarget: 'model'});\n        }\n\n        console.log(\"Init model finished\");\n        //notifies other clients to update their cy graphs\n        let cyPathStr = this.getModelCyPathStr(cyId);\n        this.model.pass({user:\"me\"}).set(cyPathStr +'.initTime', new Date());\n\n    }\n\n    /**\n     * Saves the current model as prevCy\n     * @param {Number} cyId\n     */\n    setRollbackPoint (cyId) {\n        let modelCy = this.getModelCy(cyId);\n        this.model.set('documents.' + this.docId + '.prevCy.' + cyId, modelCy);\n    }\n\n    /**\n     * Retuns the model cytoscape json\n     * @param {Number} cyId\n     * @returns {Object}\n     */\n    getModelCy (cyId) {\n        let cyPathStr = this.getModelCyPathStr(cyId);\n        return this.model.get(cyPathStr);\n    }\n\n\n    /**\n     * This is used for undo/redo purposes only\n     * @param {Number} cyId\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    mergeJsons (cyId, user, noHistUpdate) {\n        let cyPathStr = this.getModelCyPathStr(cyId);\n        let modelCy = this.model.get(cyPathStr);\n        let prevModelCy = this.model.get('documents.' + this.docId + '.prevCy.' + cyId); //updated at rollback point\n\n        if (!noHistUpdate) {\n            this.updateHistory({opName: 'merge', cyId: cyId, prevParam: prevModelCy, param: modelCy, opTarget: 'model'});\n        }\n\n    }\n\n    /**\n     * Assigns genes to a cellular location\n     * @param {Array} genes Gene names\n     * @param {string} location Cellular location such as \"nucleus\"\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    addModelCellularLocation(genes, location, user, noHistUpdate) {\n\n        let prevModelCellularLocationGenes = this.model.get('documents.' + this.docId +'.cellularLocations.'+ location);\n\n        this.model.pass({user:user}).set('documents.' + this.docId +'.cellularLocations.'+ location, genes);\n\n        if (!noHistUpdate) {\n            this.updateHistory({opName: 'addCellularLocation', param: {location: location, genes: genes}, prevParam: {location:location, genes:prevModelCellularLocationGenes}, opTarget: 'model'});\n        }\n    }\n\n    /**\n     * Removes the cellular location and anything associated with it\n     * @param {string} location Cellular location such as \"nucleus\"\n     * @param {string} user Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    removeModelCellularLocation(location, user, noHistUpdate) {\n        this.model.pass({user:user}).remove('documents.' + this.docId +'.cellularLocations', location);\n\n        if (!noHistUpdate) {\n            this.updateHistory({opName: 'removeCellularLocation', param: null, prevParam: location, opTarget: 'model'});\n        }\n\n    }\n\n    /**\n     * Remove gene names from cellular location\n     * @param {Array} genes Gene names\n     * @param {string} location Cellular location such as \"nucleus\"\n     * @param {string} user  Parameter to test if the update comes from the same client\n     * @param {boolean} noHistUpdate Whether this operation will be recorded in history\n     */\n    removeNodesFromCellularLocation(genes, location, user, noHistUpdate){\n        let modelGenes = this.model.get('documents.' + this.docId +'.cellularLocations.' + location);\n\n\n        let filteredGenes = modelGenes.filter(function(val){\n           return genes.indexOf(val) < 0\n        });\n\n        //reassign genes\n        this.model.pass({user:user}).set('documents.' + this.docId +'.cellularLocations.' + location, filteredGenes);\n\n\n        if (!noHistUpdate) {\n            this.updateHistory({opName: 'removeNodesFromCellularLocation', param: {location:location, genes: filteredGenes}, prevParam: {location:location, genes: modelGenes}, opTarget: 'model'});\n        }\n    }\n\n}\n\nmodule.exports = ModelManager;\n\n/**\n * Local function that returns a random hexadecimal color value\n * @returns {string} hexadecimal color code\n */\nfunction getNewColor(){\n    let oneColor = require('onecolor');\n\n    let gR = 1.618033988749895; //golden ratio\n    let h = Math.floor((Math.random() * gR * 360));//Math.floor((cInd * gR - Math.floor(cInd * gR))*360);\n    let cHsl = [h, 70 + Math.random() * 30, 60 + Math.random() * 10];\n    let strHsl = 'hsl('+cHsl[0]  +', '+ cHsl[1] + '%, ' + cHsl[2] +'%)';\n\n    return oneColor(strHsl).hex();\n}\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "getNewColor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~getNewColor",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js",
    "importStyle": null,
    "description": "Local function that returns a random hexadecimal color value",
    "lineNumber": 1663,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} hexadecimal color code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "hexadecimal color code"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "class",
    "name": "ModelManager",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js",
    "importStyle": "ModelManager",
    "description": "Author: Funda Durupinar Babur <f.durupinar@gmail.com>\nShared model handling operations.\nClients call these commands to update the model\nEach room (docId) has one modelManager associated with it",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 107,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "shared model"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "docId",
        "description": "room id/unique document id"
      }
    ]
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "model",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#model",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "docId",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#docId",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModel",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} shared model including all model history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "shared model including all model history"
    },
    "params": []
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "getPageDoc",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getPageDoc",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} the model for this specific document"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the model for this specific document"
    },
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "addImage",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#addImage",
    "access": "public",
    "description": "Adds an image to the model",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "getImages",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getImages",
    "access": "public",
    "description": "Returns an array of images stored in the model",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} images array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "images array"
    },
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "setName",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#setName",
    "access": "public",
    "description": "Sets user name for userId",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "setUserTyping",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#setUserTyping",
    "access": "public",
    "description": "Sets if user with userId is currently typing",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getName",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getName",
    "access": "public",
    "description": "Returns userName for userId",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} userName"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "userName"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "setColorCode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#setColorCode",
    "access": "public",
    "description": "Sets the color code of the user with userId",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "id of the user we want to change color of"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "changeColorCode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#changeColorCode",
    "access": "public",
    "description": "Randomly assigns a color to the user with userId",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "of the user we want to change color of"
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "getUserIds",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getUserIds",
    "access": "public",
    "description": "",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Active users in the room"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Active users in the room"
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "addUser",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#addUser",
    "access": "public",
    "description": "Adds an active userId to the document and updates 'users' info",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "colorCode",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "deleteAllUsers",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#deleteAllUsers",
    "access": "public",
    "description": "Deletes all the users",
    "lineNumber": 176,
    "params": [],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "deleteUserId",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#deleteUserId",
    "access": "public",
    "description": "Deletes user with userId",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "setLayoutProperties",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#setLayoutProperties",
    "access": "public",
    "description": "Updates layout properties",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getLayoutProperties",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getLayoutProperties",
    "access": "public",
    "description": "",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} layoutProperties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "layoutProperties"
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "setOncoprint",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#setOncoprint",
    "access": "public",
    "description": "Updates the oncoprint data",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "oncoprintVal",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "getOncoprint",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getOncoprint",
    "access": "public",
    "description": "",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} oncoprint"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "oncoprint"
    },
    "params": []
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "updateHistory",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#updateHistory",
    "access": "public",
    "description": "",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cmd",
        "description": "{opName, opTarget,  elType, elId, opAttr,param, prevParam}\nopName: set, load, open, add, select, unselect\nopTarget: element, element group,  model, sample,\nelType: node, edge\nopAttr: highlightColor, lineColor, borderColor etc."
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getLastCommandName",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getLastCommandName",
    "access": "public",
    "description": "",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Name of the latest command"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Name of the latest command"
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "isUndoPossible",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#isUndoPossible",
    "access": "public",
    "description": "",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} if there are enough commands to undo"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "if there are enough commands to undo"
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "isRedoPossible",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#isRedoPossible",
    "access": "public",
    "description": "",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} If we are not already at the latest command"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If we are not already at the latest command"
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "undoCommand",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#undoCommand",
    "access": "public",
    "description": "Undo latest command",
    "lineNumber": 291,
    "params": [],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "redoCommand",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#redoCommand",
    "access": "public",
    "description": "Redo latest command",
    "lineNumber": 354,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "openCy",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#openCy",
    "access": "public",
    "description": "Notifies other users that a new tab has been opened",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": "Id of the tab that's closed"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "closeCy",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#closeCy",
    "access": "public",
    "description": "Does not remove the cy, only notifies other users that a tab is closed",
    "lineNumber": 426,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": "Id of the tab that's closed"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "getCyIds",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getCyIds",
    "access": "public",
    "description": "Returns Newt tab ids with different cytoscape views",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Newt tabs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Newt tabs"
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "getModelCyPathStr",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelCyPathStr",
    "access": "public",
    "description": "Returns path to the cytoscape view with cyId",
    "lineNumber": 452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "getModelNodePathStr",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelNodePathStr",
    "access": "public",
    "description": "Returns path to the node with id in the view with cyId",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "getModelNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelNode",
    "access": "public",
    "description": "Returns the node with id in the view with cyId",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "getModelNodesArr",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelNodesArr",
    "access": "public",
    "description": "Returns all the nodes in the view with cyId as an array",
    "lineNumber": 482,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "getModelNodes",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelNodes",
    "access": "public",
    "description": "Returns all the nodes in the view with cyId as an object",
    "lineNumber": 498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "isNodeInModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#isNodeInModel",
    "access": "public",
    "description": "Tests if node with nodeId is in the view with cyId",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "isEdgeInModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#isEdgeInModel",
    "access": "public",
    "description": "Tests if edge with edgeId is in the view with cyId",
    "lineNumber": 526,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "getModelEdgePathStr",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelEdgePathStr",
    "access": "public",
    "description": "Returns path to the edge with id in the view with cyId",
    "lineNumber": 543,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "getModelEdge",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelEdge",
    "access": "public",
    "description": "Returns the edge with id in the view with cyId",
    "lineNumber": 553,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "getModelEdgesArr",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelEdgesArr",
    "access": "public",
    "description": "Returns all the edges in the view with cyId as an array",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "selectModelNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#selectModelNode",
    "access": "public",
    "description": "Highlights the cytoscape node with the color of the selecting user",
    "lineNumber": 582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} success or failure message"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "cytoscape node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "User who made the selection"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "success or failure message"
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "selectModelEdge",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#selectModelEdge",
    "access": "public",
    "description": "Highlights the cytoscape edge with the color of the selecting user",
    "lineNumber": 606,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} success or failure message"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "cytoscape edge"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "User who made the selection"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "success or failure message"
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "unselectModelNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#unselectModelNode",
    "access": "public",
    "description": "Removes the highlight of the cytoscape node",
    "lineNumber": 625,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} success or failure message"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "cytoscape node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "success or failure message"
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "unselectModelEdge",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#unselectModelEdge",
    "access": "public",
    "description": "Removes the highlight of the cytoscape edge",
    "lineNumber": 645,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} success or failure message"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "cytoscape edge"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "success or failure message"
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "addModelNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#addModelNode",
    "access": "public",
    "description": "\nAdds node with given attributes",
    "lineNumber": 670,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "{position:, data:}"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "whether this operation will be recorded in history\nreturns {string} success or failure message"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "addModelEdge",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#addModelEdge",
    "access": "public",
    "description": "\nAdds edge with given attributes",
    "lineNumber": 713,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "{position:, data:}"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "whether this operation will be recorded in history\nreturns {string} success or failure message"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "addModelCompound",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#addModelCompound",
    "access": "public",
    "description": "Adds a new compound with given attributes",
    "lineNumber": 758,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "compoundId",
        "description": "New compound's id"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "compoundAtts",
        "description": "Attributes for new compound"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "elList",
        "description": "Children list"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "paramList",
        "description": "Children's data attributes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "compoundAtts.position",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "{string}compoundAtts.data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "elList[i].id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "elList[i].isNode",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "removeModelCompound",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#removeModelCompound",
    "access": "public",
    "description": "Removes compound and changes children's parents to their old parents",
    "lineNumber": 795,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "compoundId",
        "description": "New compound's id"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "childrenList",
        "description": "Children list as {id:, isNode:}"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "prevParentList",
        "description": "Children's previous parents"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "changeModelElementGroupAttribute",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#changeModelElementGroupAttribute",
    "access": "public",
    "description": "",
    "lineNumber": 841,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attStr",
        "description": "Attribute name in the model"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "elList",
        "description": "Nodes and/or edges to change attributes"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "paramList",
        "description": "New parameter values"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "getModelNodeAttribute",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelNodeAttribute",
    "access": "public",
    "description": "Returns the node's attribute value",
    "lineNumber": 894,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attStr",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "getModelEdgeAttribute",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelEdgeAttribute",
    "access": "public",
    "description": "Returns the edge's attribute value",
    "lineNumber": 908,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attStr",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "changeModelNodeAttribute",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#changeModelNodeAttribute",
    "access": "public",
    "description": "",
    "lineNumber": 929,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} success or failure"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attStr",
        "description": "attribute name in the model"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attVal",
        "description": "new value to assign"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "whether this operation will be recorded in history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "success or failure"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "changeModelEdgeAttribute",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#changeModelEdgeAttribute",
    "access": "public",
    "description": "",
    "lineNumber": 984,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} success or failure"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attStr",
        "description": "attribute name in the model"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attVal",
        "description": "new value to assign"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "whether this operation will be recorded in history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "success or failure"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "deleteModelNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#deleteModelNode",
    "access": "public",
    "description": "Delete node from the shared model",
    "lineNumber": 1033,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Success or failure"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "Node id to delete"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": "Cy id to delete node from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Success or failure"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "deleteModelEdge",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#deleteModelEdge",
    "access": "public",
    "description": "Delete edge from the shared model",
    "lineNumber": 1072,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Success or failure"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": "Edge id to delete"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": "Cy id to delete edge from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Success or failure"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "deleteModelElementGroup",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#deleteModelElementGroup",
    "access": "public",
    "description": "Delete the elements in selectedEles group",
    "lineNumber": 1109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Success or failure"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedEles",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Success or failure"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "restoreModelElementGroup",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#restoreModelElementGroup",
    "access": "public",
    "description": "Restores the deleted elements into the shared model",
    "lineNumber": 1161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "elList",
        "description": "Elements to restore"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "restoreModelNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#restoreModelNode",
    "access": "public",
    "description": "Restores the deleted node into the shared model",
    "lineNumber": 1202,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "Node to restore"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "Node data and position"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "restoreModelEdge",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#restoreModelEdge",
    "access": "public",
    "description": "Restores the deleted edge into the shared model",
    "lineNumber": 1223,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": "Edge to restore"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "Edge data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "restoreModelElement",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#restoreModelElement",
    "access": "public",
    "description": "Restores the deleted element into the shared model",
    "lineNumber": 1244,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "elType",
        "description": "\"node\" or \"edge\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "elId",
        "description": "Element to restore"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "Element data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "restoreModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#restoreModel",
    "access": "public",
    "description": "This function is used to undo newModel and redo initModel",
    "lineNumber": 1262,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "modelCy",
        "description": ": nodes and edges to be restored"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "newModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#newModel",
    "access": "public",
    "description": "Deletes the model and everything in it\nShould be called before loading a new graph to prevent id confusion",
    "lineNumber": 1283,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "deleteAll",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#deleteAll",
    "access": "public",
    "description": "Cleans up the model without deleting the model itself\nshould be called before loading a new graph to prevent id confusion",
    "lineNumber": 1325,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "Nodes to delete"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": "Edges to delete"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "getJsonFromModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getJsonFromModel",
    "access": "public",
    "description": "Returns the model nodes and edges as a json object",
    "lineNumber": 1348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Model as a json object of nodes and edges"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": "Newt tab id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Model as a json object of nodes and edges"
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "initModelNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#initModelNode",
    "access": "public",
    "description": "Takes a cytoscape node and loads it into the model",
    "lineNumber": 1396,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Cytoscape node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "initModelEdge",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#initModelEdge",
    "access": "public",
    "description": "Takes a cytoscape edge and loads it into the model",
    "lineNumber": 1483,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "Cytoscape edge"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "initModel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#initModel",
    "access": "public",
    "description": "Initializes the model with cytoscape elements",
    "lineNumber": 1535,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "cy elements"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": "cy elements"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "setRollbackPoint",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#setRollbackPoint",
    "access": "public",
    "description": "Saves the current model as prevCy",
    "lineNumber": 1565,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "getModelCy",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#getModelCy",
    "access": "public",
    "description": "Retuns the model cytoscape json",
    "lineNumber": 1575,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "mergeJsons",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#mergeJsons",
    "access": "public",
    "description": "This is used for undo/redo purposes only",
    "lineNumber": 1587,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "addModelCellularLocation",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#addModelCellularLocation",
    "access": "public",
    "description": "Assigns genes to a cellular location",
    "lineNumber": 1605,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "genes",
        "description": "Gene names"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "Cellular location such as \"nucleus\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "removeModelCellularLocation",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#removeModelCellularLocation",
    "access": "public",
    "description": "Removes the cellular location and anything associated with it",
    "lineNumber": 1622,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "Cellular location such as \"nucleus\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "removeNodesFromCellularLocation",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/modelManager.js~ModelManager#removeNodesFromCellularLocation",
    "access": "public",
    "description": "Remove gene names from cellular location",
    "lineNumber": 1638,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "genes",
        "description": "Gene names"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "Cellular location such as \"nucleus\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Parameter to test if the update comes from the same client"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noHistUpdate",
        "description": "Whether this operation will be recorded in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "content": "\nvar _ = require('underscore');\nvar Backbone = require('backbone');\nlet appUtilities = window.appUtilities;\n\nvar PathsBetweenQueryView = Backbone.View.extend({\n    defaultQueryParameters: {\n        geneSymbols: \"mdm2\\ntp53\", //TODO: for easy debugging only\n        lengthLimit: 1\n    },\n    currentQueryParameters: null,\n    initialize: function () {\n        var self = this;\n        self.copyProperties();\n        self.template = _.template($(\"#query-pathsbetween-template\").html());\n        self.template = self.template(self.currentQueryParameters);\n    },\n    copyProperties: function () {\n        this.currentQueryParameters = _.clone(this.defaultQueryParameters);\n    },\n    render: function () {\n        var self = this;\n        self.template = _.template($(\"#query-pathsbetween-template\").html());\n        self.template = self.template(self.currentQueryParameters);\n        $(self.el).html(self.template);\n\n        $(self.el).modal('show');\n\n        $(\"#query-pathsbetween-enable-shortest-k-alteration\").change(function () {\n            if (document.getElementById(\"query-pathsbetween-enable-shortest-k-alteration\").checked) {\n                $(\"#query-pathsbetween-shortest-k\").prop(\"disabled\", false);\n            } else {\n                $(\"#query-pathsbetween-shortest-k\").prop(\"disabled\", true);\n            }\n        });\n\n        $(document).off(\"click\", \"#save-query-pathsbetween\").on(\"click\", \"#save-query-pathsbetween\", function () {\n\n            self.currentQueryParameters.geneSymbols = document.getElementById(\"query-pathsbetween-gene-symbols\").value;\n            self.currentQueryParameters.lengthLimit = Number(document.getElementById(\"query-pathsbetween-length-limit\").value);\n\n            if (self.currentQueryParameters.geneSymbols.length === 0) {\n                document.getElementById(\"query-pathsbetween-gene-symbols\").focus();\n                return;\n            }\n\n            var queryURL = \"http://www.pathwaycommons.org/pc2/graph?format=SBGN&kind=PATHSBETWEEN&limit=\"\n                + self.currentQueryParameters.lengthLimit;\n\n            var sources = \"\";\n            var geneSymbolsArray = self.currentQueryParameters.geneSymbols.replace(\"\\n\", \" \").replace(\"\\t\", \" \").split(\" \");\n\n            for (var i = 0; i < geneSymbolsArray.length; i++) {\n                var currentGeneSymbol = geneSymbolsArray[i];\n                if (currentGeneSymbol.length == 0 || currentGeneSymbol == ' '\n                    || currentGeneSymbol == '\\n' || currentGeneSymbol == '\\t') {\n                    continue;\n                }\n                sources = sources + \"&source=\" + currentGeneSymbol;\n\n            }\n\n            appUtilities.getActiveChiseInstance().startSpinner('paths-between-spinner');\n\n            queryURL = queryURL + sources;\n\n\n            $.ajax({\n                url: queryURL,\n                type: 'GET',\n                dataType: 'text',\n                success: function (data) {\n\n                    let chiseInst = appUtilities.createNewNetwork(); //opens a new tab\n\n\n                    let jsonObj = chiseInst.convertSbgnmlTextToJson(data);\n\n                    chiseInst.updateGraph(jsonObj, function() {\n\n                    }, true);\n\n                    // appUtilities.getChiseInstance(data.cyId).updateGraph(jsonObj, function(){\n                    //     app.modelManager.initModel(appUtilities.getCyInstance(data.cyId).nodes(), appUtilities.getCyInstance(data.cyId).edges(),  \"me\");\n                    //\n                    //     appUtilities.setActiveNetwork(data.cyId);\n                    //\n                    //     $(\"#perform-layout\").trigger('click');\n                    //\n                    //     if (callback) callback(\"success\");\n                    // });\n                    //\n                    //\n                    // // //because window opening takes a while\n                    // setTimeout(function () {\n                    //     var json = appUtilities.getActiveChiseInstance().convertSbgnmlTextToJson(data);\n                    //     w.postMessage(JSON.stringify(json), \"*\");\n                    // }, 2000);\n\n                    appUtilities.getActiveChiseInstance().endSpinner('paths-between-spinner');\n                },\n                error: function (request) {\n                    console.log(request.responseText);\n                    appUtilities.getActiveChiseInstance().endSpinner('paths-between-spinner');\n                }\n\n\n\n            });\n\n            $(self.el).modal('toggle');\n\n\n        });\n\n        $(document).off(\"click\", \"#cancel-query-pathsbetween\").on(\"click\", \"#cancel-query-pathsbetween\", function () {\n            $(self.el).modal('toggle');\n        });\n\n        return this;\n    }\n});\n\n/**\n * Paths By URI Query view for the Sample Application.\n */\nvar PathsByURIQueryView = Backbone.View.extend({\n    defaultQueryParameters: {\n        URI: \"\"\n    },\n    currentQueryParameters: null,\n    initialize: function () {\n        var self = this;\n        self.copyProperties();\n        self.template = _.template($(\"#query-pathsbyURI-template\").html());\n        self.template = self.template(self.currentQueryParameters);\n    },\n    copyProperties: function () {\n        this.currentQueryParameters = _.clone(this.defaultQueryParameters);\n    },\n    render: function () {\n        var self = this;\n        self.template = _.template($(\"#query-pathsbyURI-template\").html());\n        self.template = self.template(self.currentQueryParameters);\n        $(self.el).html(self.template);\n\n        $(self.el).modal('show');\n\n        $(document).off(\"click\", \"#save-query-pathsbyURI\").on(\"click\", \"#save-query-pathsbyURI\", function () {\n\n            self.currentQueryParameters.URI = document.getElementById(\"query-pathsbyURI-URI\").value;\n\n            if (self.currentQueryParameters.URI.length === 0) {\n                document.getElementById(\"query-pathsbyURI-gene-symbols\").focus();\n                return;\n            }\n\n            var queryURL = \"http://www.pathwaycommons.org/pc2/get?uri=\"\n                + self.currentQueryParameters.URI + \"&format=SBGN\";\n            /*var queryURL = \"http://www.pathwaycommons.org/pc2/get?uri=http://identifiers.org/uniprot/\"\n             + self.currentQueryParameters.URI + \"&format=SBGN\";*/\n\n            appUtilities.getActiveChiseInstance().startSpinner('paths-between-spinner');\n\n            $.ajax({\n                url: queryURL,\n                type: 'GET',\n                dataType: 'text',\n                success: function (data) {\n                    let chiseInst = appUtilities.createNewNetwork(); //opens a new tab\n\n\n                    let jsonObj = chiseInst.convertSbgnmlTextToJson(data);\n\n                    chiseInst.updateGraph(jsonObj, function() {\n\n                    }, true);\n\n                    appUtilities.getActiveChiseInstance().endSpinner('paths-between-spinner');\n\n\n                }\n            });\n\n            $(self.el).modal('toggle');\n        });\n\n        $(document).off(\"click\", \"#cancel-query-pathsbyURI\").on(\"click\", \"#cancel-query-pathsbyURI\", function () {\n            $(self.el).modal('toggle');\n        });\n\n        return this;\n    }\n});\n\n\nmodule.exports = {\n    PathsBetweenQueryView: PathsBetweenQueryView,\n    PathsByURIQueryView: PathsByURIQueryView,\n\n};\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "appUtilities",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js~appUtilities",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "PathsBetweenQueryView",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js~PathsBetweenQueryView",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "importStyle": "{PathsBetweenQueryView}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "PathsByURIQueryView",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js~PathsByURIQueryView",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/collaborative-backbone-views.js",
    "importStyle": "{PathsByURIQueryView}",
    "description": "Paths By URI Query view for the Sample Application.",
    "lineNumber": 127,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "content": "/**\n * Author: Funda Durupinar\n * Created by durupina on 2/10/17.\n * Listens and responds to cytoscape events triggered by cytoscape-undo-redo.js\n */\n\n\n\nlet Mousetrap = require('mousetrap'); //used to listen to keyboard events\nlet Tippy = require('tippy.js');\nlet appUtilities = window.appUtilities;\nlet ModelMergeFunctions = require('../merger/model-merge-functions.js');\nlet modelMergeFunctions = new ModelMergeFunctions();\n\n/**\n * Listens to editor events and updates the shared model\n * @param {Object} modelManager Model operations handler\n * @param {Object} socket\n * @param {string} userId\n * @param {Object} app Derby.js application\n */\nmodule.exports = function(modelManager, socket, userId, app){\n\n    // get a new mousetrap instance\n    let mt = new Mousetrap();\n\n    // jsons for the last copied elements\n    let lastCopiedElesJsons;\n\n    // the cy from which some elements are copied last time\n    let lastCopiedElesCy;\n\n\n    // listen to \"ctrl/command + m\" keyboard event\n    mt.bind([\"ctrl+m\", \"command+m\"], function () {\n\n        console.log('to perform merge operation here');\n\n        // get the active chise instance\n        let chiseInstance = appUtilities.getActiveChiseInstance();\n\n        // get the related cy instance\n        let cy = chiseInstance.getCy();\n\n        // If the eles are already copied from this cy instance then merge is meaningless.\n        // Therefore return directly if that is the case.\n        if ( cy == lastCopiedElesCy ) {\n            return;\n        }\n\n        modelMergeFunctions.mergeJsonWithCurrent(lastCopiedElesJsons, appUtilities.getActiveNetworkId(), modelManager);\n\n        // return false to prevent default browser behavior\n        // and stop event from bubbling\n        return false;\n    });\n\n\n    //A new sample or file is loaded --update model and inform others\n    $(document).on(\"sbgnvizLoadSampleEnd sbgnvizLoadFileEnd\",  function(event, file, cy){\n\n\n        console.log(\"Loading new sample\");\n        //remove annotations view\n\n        //FIXME\n       modelManager.newModel( appUtilities.getActiveNetworkId(), \"me\"); //do not delete cytoscape, only the model\n       modelManager.initModel(cy.nodes(), cy.edges(), appUtilities.getActiveNetworkId());\n\n        // setTimeout(function(){\n        //         cy.elements().forEach(function(ele){\n        //         ele.data(\"annotationsView\", null);\n        //         ele._private.data.annotationsView = null;\n        //     });\n        // },1000);\n\n        setTimeout(function () {\n            appUtilities.triggerLayout(cy, true);\n        }, 1000);\n\n\n    });\n\n    // call dynamicResize of CWC when dynamicResize is called for newt\n    $(document).on('newtAfterDynamicResize', function () {\n      app.dynamicResize();\n    });\n\n    $(document).on(\"CWC_after_copy\", function (event, eleJsons, cy) {\n\n        console.log('common clipboard is updated');\n\n        // update jsons for the last copied elements\n        lastCopiedElesJsons = eleJsons;\n\n        // update the cy from which some elements are copied last time\n        lastCopiedElesCy = cy;\n    } );\n\n    // listen 'resizestop' event on canvas tab area and force each of the cytoscape.js\n    // instance renderer to recalculate the viewport bounds.\n    $(\"#canvas-tab-area\").on('resizestop', function () {\n\n        app.resizeCyCanvases();\n\n    });\n\n    $(\"#new-file, #new-file-icon\").click(function () {\n        modelManager.openCy(appUtilities.getActiveNetworkId(), \"me\");\n    });\n\n\n\n\n    $(document).on(\"closeNetwork\", function (e, cyId) {\n        console.log(\"close cy is called for \" + cyId);\n\n        modelManager.closeCy(cyId, \"me\");\n    });\n\n\n    $(\"#file-input\").change(function () {\n        if ($(this).val() != \"\") {\n            let file = this.files[0];\n\n            let extension = file.name.split('.').pop().toLowerCase();\n\n            if (extension === \"owl\") {\n\n                let reader = new FileReader();\n\n                reader.onload = function () {\n\n                    socket.emit('BioPAXRequest', this.result, \"sbgn\", function (sbgnData) { //convert to sbgn\n                        console.log(sbgnData);\n                        appUtilities.getActiveSbgnvizInstance().loadSBGNMLText(sbgnData.graph);\n                    });\n                };\n                reader.readAsText(file, 'UTF-8');\n            }\n            else {\n                appUtilities.getActiveChiseInstance().loadSBGNMLFile(file);\n            }\n        }\n        setTimeout(function () {\n            //remove annotations view first\n            // appUtilities.getActiveCy().elements().forEach(function(ele){\n            //     ele.data(\"annotationsView\", null);\n            //     ele._private.data.annotationsView = null;\n            // });\n            modelManager.initModel(appUtilities.getActiveCy().nodes(), appUtilities.getActiveCy().edges(), appUtilities.getActiveNetworkId(),\"me\");\n\n\n\n        }, 1000);\n\n        });\n\n    $(\"#sif-file-input\").change(function () {\n        if ($(this).val() != \"\") {\n            let file = this.files[0];\n\n            let chiseInstance = appUtilities.getActiveChiseInstance();\n\n                // use cy instance assocated with chise instance\n            let cy = appUtilities.getActiveCy();\n\n\n\n                let loadFcn = function() {\n                    let layoutBy = function() {\n                        appUtilities.triggerLayout( cy, true );\n\n                    };\n                    chiseInstance.loadSIFFile(file, layoutBy, null);\n\n                };\n\n                loadFcn();\n\n                $(this).val(\"\");\n        }\n\n\n        setTimeout(function () {\n            modelManager.initModel(appUtilities.getActiveCy().nodes(), appUtilities.getActiveCy().edges(),\n                appUtilities.getActiveNetworkId(),  \"me\");\n\n\n        }, 1000);\n\n    });\n\n\n    $(document).on(\"createNewNetwork\", function (e, cy, cyId) {\n\n        console.log(\"create new network with id: \" + cyId);\n        modelManager.openCy(cyId, \"me\");\n\n\n\n        cy.on(\"afterDo afterRedo\", function (event, actionName, args, res) {\n\n            let modelElList = [];\n            let paramList = [];\n            let paramListPos = [];\n            let paramListData = [];\n            let modelNodeList = [];\n            let param;\n\n            console.log(cyId);\n\n            console.log(actionName);\n            console.log(args);\n            console.log(res);\n\n\n\n            if (actionName === \"changeData\" || actionName === \"changeFontProperties\" ) {\n\n                modelElList = [];\n                paramList = [];\n                args.eles.forEach(function (ele) {\n\n                    modelElList.push({id: ele.id(), isNode: ele.isNode()});\n\n                    ele.data(\"annotationsView\", null);\n                    paramList.push(ele.data());\n\n                });\n                modelManager.changeModelElementGroupAttribute(\"data\", modelElList, cyId, paramList,  \"me\");\n\n            }\n\n            else if (actionName === \"changeNodeLabel\" ||actionName === \"resizeNodes\"||\n                actionName === \"addStateOrInfoBox\" || actionName === \"setMultimerStatus\" ||\n                actionName === \"setCloneMarkerStatus\" || actionName === \"changeStateOrInfoBox\" ||\n                actionName === \"removeStateOrInfoBox\" || actionName === \"setPortsOrdering\") {\n\n                modelElList = [];\n                paramList = [];\n                args.nodes.forEach(function (ele) {\n\n                    modelElList.push({id: ele.id(), isNode: true});\n\n                    ele.data(\"annotationsView\", null);\n                    paramList.push(ele.data());\n\n                });\n                modelManager.changeModelElementGroupAttribute(\"data\", modelElList,  cyId,paramList,  \"me\");\n\n\n                app.informTripsAboutModelChange(cyId);\n                \n\n            }\n            else if(actionName === \"resize\"){\n\n                modelElList = [{id: res.node.id(), isNode: true}];\n                paramList = [res.node.data()];\n\n                res.node.data(\"annotationsView\", null);\n\n                modelManager.changeModelElementGroupAttribute(\"data\", modelElList, cyId,paramList,  \"me\");\n            }\n\n            else if (actionName === \"changeBendPoints\") {\n\n                modelElList = [];\n                paramList = [];\n\n\n                modelElList.push({id: res.edge.id(), isNode: false});\n\n                res.edge.data(\"annotationsView\", null);\n                res.edge._private.data.annotationsView = null;\n\n                console.log(res.edge._private.data.annotationsView);\n                console.log(res.edge._private.data);\n                console.log(res.edge.data());\n                paramList.push({weights: args.edge.data('cyedgebendeditingWeights'), distances:res.edge.data('cyedgebendeditingDistances')});\n\n                modelManager.changeModelElementGroupAttribute(\"bendPoints\", modelElList, cyId,paramList,  \"me\");\n\n            }\n\n            else if(actionName === \"batch\"){\n                res.forEach(function(arg){\n                    console.log(arg.name);\n                   console.log(arg.param);\n                    if(arg.name === \"thinBorder\" || arg.name === 'thickenBorder'){\n                        modelElList = [];\n                        paramList = [];\n                        arg.param.forEach(function (ele) {\n                            //let ele = param.ele;\n\n                            modelElList.push({id: ele.id(), isNode: ele.isNode()});\n\n                            ele.data(\"annotationsView\", null);\n                            paramList.push(ele.data());\n\n                        });\n                        modelManager.changeModelElementGroupAttribute(\"data\", modelElList, cyId, paramList,  \"me\");\n                    }\n                    else if(arg.name === 'hideAndPerformLayout' || arg.name === 'hide'){\n                        modelElList = [];\n                        paramList = [];\n                        paramListPos = [];\n                        paramListData = [];\n\n                        if(arg.param) {\n                            let eles = arg.param.eles;\n                            if(!eles) eles = arg.param;\n\n                            eles.forEach(function (ele) {\n                                modelElList.push({id: ele.id(), isNode: ele.isNode()});\n                                paramList.push(\"hide\");\n                                paramListPos.push(ele.position());\n                                ele.data(\"annotationsView\", null);\n                                paramListData.push(ele.data());\n\n                            });\n                        }\n\n                        modelManager.changeModelElementGroupAttribute(\"data\", modelElList, cyId, paramListData,  \"me\");\n\n\n                        modelManager.changeModelElementGroupAttribute(\"visibilityStatus\", modelElList, cyId, paramList, \"me\");\n                        modelManager.changeModelElementGroupAttribute(\"position\", modelElList, cyId, paramListPos,   \"me\");\n\n                    }\n                    else if(arg.name === 'showAndPerformLayout' || arg.name === 'show' ){\n                        modelElList = [];\n                        paramList = [];\n\n\n\n                        if(arg.param) {\n                            let eles = arg.param.eles;\n                            if(!eles) eles = arg.param;\n\n                            eles.forEach(function (ele) {\n                                modelElList.push({id: ele.id(), isNode: ele.isNode()});\n                                paramList.push(\"show\");\n                                paramListPos.push(ele.position());\n\n                                ele.data(\"annotationsView\", null);\n                                paramListData.push(ele.data());\n\n                            });\n                        }\n\n                        modelManager.changeModelElementGroupAttribute(\"data\", modelElList, cyId, paramListData,  \"me\");\n                        modelManager.changeModelElementGroupAttribute(\"visibilityStatus\", modelElList,  cyId, paramList,\"me\");\n                        modelManager.changeModelElementGroupAttribute(\"position\", modelElList,  cyId,paramListPos, \"me\");\n\n\n                    }\n                })\n\n\n            }\n            // else if (actionName === \"hide\" || actionName === \"show\") {\n            //     let modelElList = [];\n            //     let paramList = [];\n            //\n            //     args.forEach(function (ele) {\n            //         modelElList.push({id: ele.id(), isNode: ele.isNode()});\n            //         paramList.push(actionName);\n            //\n            //     });\n            //\n            //     modelManager.changeModelElementGroupAttribute(\"visibilityStatus\", modelElList, cyId,paramList,  \"me\");\n            // }\n\n            else if (actionName === \"highlight\") {\n                modelElList = [];\n                paramList = [];\n\n\n                args.forEach(function (ele) {\n                    modelElList.push({id: ele.id(), isNode: ele.isNode()});\n                    paramList.push(\"highlighted\");\n                });\n\n                modelManager.changeModelElementGroupAttribute(\"highlightStatus\", modelElList, cyId,paramList,   \"me\");\n            }\n\n            else if(actionName === \"removeHighlights\"){\n                modelElList = [];\n                paramList = [];\n\n\n                cy.elements().forEach(function (ele) {\n                    modelElList.push({id: ele.id(), isNode: ele.isNode()});\n                    paramList.push(\"unhighlighted\");\n\n                });\n\n                modelManager.changeModelElementGroupAttribute(\"highlightStatus\", modelElList,  cyId,paramList, \"me\");\n\n            }\n            else if (actionName === \"expand\" || actionName === \"collapse\") {\n\n                modelElList = [];\n                paramList = [];\n                args.nodes.forEach(function (ele) {\n                    modelElList.push({id: ele.id(), isNode: true});\n                    paramList.push(actionName);\n\n                });\n                modelManager.changeModelElementGroupAttribute(\"expandCollapseStatus\", modelElList,  cyId,paramList, \"me\");\n            }\n\n\n            else if (actionName === \"drag\" || actionName === \"align\") {\n\n                modelElList = [];\n                paramList = [];\n                args.nodes.forEach(function (ele) {\n                    //let ele = param.ele;\n                    modelElList.push({id: ele.id(), isNode: true});\n                    paramList.push(ele.position());\n                });\n\n                modelManager.changeModelElementGroupAttribute(\"position\", modelElList, cyId,paramList,  \"me\");\n            }\n\n            else if (actionName === \"layout\") {\n                cy.on('layoutstop', function() {\n\n                    console.log('Layout stopped');\n                    modelElList = [];\n                    paramList = [];\n\n\n                    args.eles.forEach(function (ele) {\n                        if(ele.isNode()){ //check if element is in the model already, otherwise don't try to add it\n                            // if(modelManager.isNodeInModel(cyId, ele.id()){\n                                modelElList.push({id: ele.id(), isNode: true});\n                                ele.data(\"annotationsView\", null);\n                                paramList.push(ele.position());\n                            }\n                        // }\n                    });\n\n                    modelManager.changeModelElementGroupAttribute(\"position\", modelElList, cyId, paramList,  \"me\");\n\n                });\n            }\n\n\n            else if(actionName === \"deleteElesSimple\" || actionName === \"deleteNodesSmart\"){\n\n\n                let nodeList = [];\n                let edgeList = [];\n\n                res.forEach(function (el) {\n                    if(el.isNode())\n                        nodeList.push({id:el.id()});\n                    else\n                        edgeList.push({id:el.id()});\n                });\n\n                modelManager.deleteModelElementGroup({nodes:nodeList,edges: edgeList}, cyId, \"me\");\n\n                app.informTripsAboutModelChange(cyId);\n            }\n\n            else if (actionName === \"addNode\") {\n\n                res.eles.data(\"annotationsView\", null);\n                let newNode = args.newNode;\n                let id = res.eles.id();\n                param = {position: {x: newNode.x, y: newNode.y}, data:{class: newNode.class, parent: newNode.parent}};\n                //Add to the graph first\n                modelManager.addModelNode(id,  cyId, param, \"me\");\n                //assign other node properties-- css and data\n                modelManager.initModelNode(res.eles[0],  cyId, \"me\", true);\n\n                app.informTripsAboutModelChange(cyId);\n\n            }\n\n            else if(actionName === \"addEdge\"){\n\n                let newEdge = args.newEdge;\n                param = {data:{ source: newEdge.source, target:newEdge.target, class: newEdge.class}};\n                //Add to the graph first\n                modelManager.addModelEdge(res.eles.id(),  cyId,param, \"me\");\n                //assign other edge properties-- css and data\n                modelManager.initModelEdge(res.eles[0],  cyId,\"me\", true);\n\n                app.informTripsAboutModelChange(cyId);\n\n            }\n\n            else if(actionName === \"paste\"){\n                res.forEach(function(el){ //first add nodes\n                    if(el.isNode()){\n\n                        el.data(\"annotationsView\", null);\n                        param = {position: {x: el.position(\"x\"), y: el.position(\"y\")}, data:el.data()};\n\n                        modelManager.addModelNode(el.id(),  cyId, param, \"me\");\n\n                        modelManager.initModelNode(el,  cyId, \"me\", true);\n\n\n                    }\n                });\n\n                res.forEach(function(el){ //first add nodes\n                    if(el.isEdge()){\n                        param = { source: el.data(\"source\"), target:el.data(\"target\"), class: el.data(\"class\")};\n                        modelManager.addModelEdge(el.id(),  cyId,param, \"me\");\n                        modelManager.initModelEdge(el,  cyId,\"me\", true);\n                    }\n                });\n\n                app.informTripsAboutModelChange(cyId);\n\n            }\n            else if(actionName === \"changeParent\"){\n                modelElList = [];\n                paramList = [];\n                paramListData = [];\n                paramListPos = [];\n\n                modelNodeList = [];\n\n                res.movedEles.forEach(function (ele) {\n\n                    modelElList.push({id: ele.id(), isNode: ele.isNode()});\n                    ele.data(\"annotationsView\", null);\n                    paramListData.push(ele.data());\n                    paramListPos.push(ele.position());\n\n                });\n\n                res.movedEles.forEach(function (ele) {\n                    //let ele = param.ele;\n\n                    if(ele.isNode()) {\n                        modelNodeList.push({id: ele.id(), isNode: ele.isNode()});\n                        paramListPos.push(ele.position());\n                    }\n\n                });\n\n                modelManager.changeModelElementGroupAttribute(\"data\", modelElList, cyId, paramListData, \"me\");\n                modelManager.changeModelElementGroupAttribute(\"position\", modelNodeList, cyId, paramListPos, \"me\");\n                app.informTripsAboutModelChange(cyId);\n\n            }\n            else if(actionName === \"createCompoundForGivenNodes\"){\n                paramListData = [];\n                modelElList = [];\n                modelNodeList = [];\n\n\n                //Last element is the compound, skip it and add the children\n                for(let i = 0; i < res.newEles.length - 1; i++){\n                    let ele = res.newEles[i];\n\n                    if(ele.isNode()) {\n                        modelElList.push({id: ele.id(), isNode: true});\n                        ele.data(\"annotationsView\", null);\n                        paramListData.push(ele.data()); //includes parent information\n                    }\n                }\n\n                let compoundId = res.newEles[0].data(\"parent\");\n                let compound = cy.getElementById(compoundId);\n\n\n                let compoundAtts = {position:{x: compound.position(\"x\"), y: compound.position(\"y\")}, data:compound.data()};\n\n                modelManager.addModelCompound(compound.id(), cyId, compoundAtts, modelElList, paramListData, \"me\" ); //handles data field update\n\n                //assign other node properties-- css and data\n                app.informTripsAboutModelChange(cyId);\n            }\n        });\n\n        cy.on(\"mouseup\", \"node\", function () {\n            modelManager.unselectModelNode(this, cyId, \"me\");\n        });\n\n\n        cy.on(\"cxttap\", \"edge\", function (event) {\n            showTooltip(event, cy);\n        });\n\n\n        cy.on('select', 'node', function () { //Necessary for multiple selections\n            modelManager.selectModelNode(this,   cyId,userId, \"me\");\n\n        });\n\n        cy.on('unselect', 'node', function () { //causes sync problems in delete op\n            modelManager.unselectModelNode(this,  cyId,\"me\");\n        });\n        cy.on('grab', 'node', function () { //Also works as 'select'\n            modelManager.selectModelNode(this,  cyId,userId, \"me\");\n        });\n\n        cy.on('select', 'edge', function () {\n            modelManager.selectModelEdge(this,  cyId,userId, \"me\");\n\n        });\n\n        cy.on('unselect', 'edge', function () {\n            modelManager.unselectModelEdge(this,  cyId,\"me\");\n        });\n\n    });\n\n\n    /**\n     * Tooltip function for showing edge type information\n     * @param {Event} event\n     */\n    function showTooltip(event) {\n\n        let edge = event.target || event.cyTarget;\n        let tooltipContent = event.target.data().class;\n        let ref = edge.popperRef();\n\n        let tippy = Tippy.one(ref, {\n            content: (() => {\n                let content = document.createElement('div');\n\n                content.style['font-size'] = '12px'; //make it independent of the zoom amount\n                content.innerHTML = tooltipContent;\n\n                return content;\n            })(),\n            trigger: 'manual',\n            hideOnClick: true,\n            arrow: true,\n            placement: \"top\",\n            duration: 200,\n            size: 'large',\n        });\n\n\n        setTimeout( () => tippy.show(), 0 );\n    }\n\n}\n\n\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "appUtilities",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js~appUtilities",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "modelMergeFunctions",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js~modelMergeFunctions",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/merger/model-merge-functions.js~ModelMergeFunctions"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "editorlistener",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js~editorlistener",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/newt-functions/editor-listener.js",
    "importStyle": "editorlistener",
    "description": "Listens to editor events and updates the shared model",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "modelManager",
        "description": "Model operations handler"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "Derby.js application"
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "content": "\n/**\n * Created by durupina on 11/14/16.\n * Class to visualize oncoprint data\n */\n\nconst Oncoprint = require('oncoprintjs');\nvar DEFAULT_GREY = \"rgba(190, 190, 190, 1)\";\nvar MUT_COLOR_MISSENSE = '#008000';\nvar MUT_COLOR_FUSION = '#8B00C9';\nvar MUT_COLOR_GERMLINE = '#FFFFFF';\nvar PROT_COLOR_UP = \"#9224A6\";\nvar PROT_COLOR_DOWN = \"#00BCD4\";\n\nconst geneticRuleSet = {\n    'type': 'gene',\n    'legend_label': 'Genetic Alteration',\n    'legend_base_color': DEFAULT_GREY,\n    'rule_params':  {\n\n        // Default: gray rectangle\n        '*': {\n            shapes: [{\n                'type': 'rectangle',\n                'fill': DEFAULT_GREY,\n                'z': 1\n            }],\n            legend_label: 'No alterations',\n        },\n        // Copy number alteration\n        'disp_cna': {\n            // Red rectangle for amplification\n            'amp': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': 'rgba(255,0,0,1)',\n                    'x': '0%',\n                    'y': '0%',\n                    'width': '100%',\n                    'height': '100%',\n                    'z': 2,\n                }],\n                legend_label: 'Amplification',\n            },\n            // Light red rectangle for gain\n            'gain': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': 'rgba(255,182,193,1)',\n                    'x': '0%',\n                    'y': '0%',\n                    'width': '100%',\n                    'height': '100%',\n                    'z': 2,\n                }],\n                legend_label: 'Gain',\n            },\n            // Blue rectangle for deep deletion\n            'homdel': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': 'rgba(0,0,255,1)',\n                    'x': '0%',\n                    'y': '0%',\n                    'width': '100%',\n                    'height': '100%',\n                    'z': 2,\n                }],\n                legend_label: 'Deep Deletion',\n            },\n            // Light blue rectangle for shallow deletion\n            'hetloss': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': 'rgba(143, 216, 216,1)',\n                    'x': '0%',\n                    'y': '0%',\n                    'width': '100%',\n                    'height': '100%',\n                    'z': 2,\n                }],\n                legend_label: 'Shallow Deletion',\n            }\n        },\n        // mRNA regulation\n        'disp_mrna': {\n            // Light red outline for upregulation\n            'up': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': 'rgba(0, 0, 0, 0)',\n                    'stroke': 'rgba(255, 153, 153, 1)',\n                    'stroke-width': '2',\n                    'x': '0%',\n                    'y': '0%',\n                    'width': '100%',\n                    'height': '100%',\n                    'z': 3,\n                }],\n                legend_label: 'mRNA Upregulation',\n            },\n            // Light blue outline for downregulation\n            'down': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': 'rgba(0, 0, 0, 0)',\n                    'stroke': 'rgba(102, 153, 204, 1)',\n                    'stroke-width': '2',\n                    'x': '0%',\n                    'y': '0%',\n                    'width': '100%',\n                    'height': '100%',\n                    'z': 3,\n                }],\n                legend_label: 'mRNA Downregulation',\n            },\n        },\n        // protein expression regulation\n        'disp_prot': {\n            // small top rectangle for upregulated\n            'up': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': PROT_COLOR_UP,\n                    'x':\"0%\",\n                    'y':\"0%\",\n                    'width':\"100%\",\n                    'height':\"20%\",\n                    'z': 4,\n                }],\n                legend_label: 'Protein Upregulation',\n            },\n            // small bottom rectangle for upregulated\n            'down': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': PROT_COLOR_DOWN,\n                    'x':\"0%\",\n                    'y':\"80%\",\n                    'width':\"100%\",\n                    'height':\"20%\",\n                    'z': 4,\n                }],\n                legend_label: 'Protein Downregulation',\n            }\n        },\n        // fusion\n        'disp_fusion': {\n            // tall inset purple rectangle for fusion\n            'true': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': MUT_COLOR_FUSION,\n                    'x': '0%',\n                    'y': '20%',\n                    'width': '100%',\n                    'height': '60%',\n                    'z': 5\n                }],\n                legend_label: 'Fusion'\n            }\n        },\n        // germline\n        'disp_germ': {\n            // white stripe in the middle\n            'true': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': MUT_COLOR_GERMLINE,\n                    'x': '0%',\n                    'y': '46%',\n                    'width': '100%',\n                    'height': '8%',\n                    'z': 7\n                }],\n                legend_label: 'Germline Mutation'\n            }\n        },\n        'disp_mut': {\n            'trunc,inframe,missense,promoter,trunc_rec,inframe_rec,missense_rec,promoter_rec': {\n                shapes: [{\n                    'type': 'rectangle',\n                    'fill': MUT_COLOR_MISSENSE,\n                    'x': '0%',\n                    'y': '33.33%',\n                    'width': '100%',\n                    'height': '33.33%',\n                    'z': 6\n                }],\n                legend_label: 'Mutation',\n\n            }\n        }\n    }\n};\n\nclass OncoprintHandler{\n\n    /**\n     *\n     * @param {Number} width Width of the container element\n     */\n    constructor(width){\n        /**\n         *\n         * @type {module:oncoprintjs}\n         */\n        this.oncoprint = new Oncoprint('#oncoprint-container', width);\n        // this.updateData(ga_data);\n        this.listenToEvents();\n    }\n\n    /**\n     * Update the Oncoprint with data\n     * @param {Object} data\n     */\n    updateData(data) {\n        //clean previous data\n\n\n        if (this.oncoprint.getTracks().length > 0)\n            this.oncoprint.removeAllTracks();\n\n        let share_id = null;\n\n        for (let i = 0; i < data.length; i++) {\n\n            let track_params = {\n                'rule_set_params': geneticRuleSet,\n                'label': data[i].gene,\n                'target_group': 0,\n                'sortCmpFn': geneticComparator(),\n                'description': data[i].desc,\n                'na_z': 1.1,\n                'value_key': 'frequency',\n                'value_range': [0, 100],\n\n            };\n            let new_ga_id = this.oncoprint.addTracks([track_params])[0];\n            data[i].track_id = new_ga_id;\n            if (i === 0) {\n                share_id = new_ga_id;\n            } else {\n                this.oncoprint.shareRuleSet(share_id, new_ga_id);\n            }\n\n        }\n\n        this.oncoprint.hideIds([], true);\n        this.oncoprint.keepSorted(false);\n\n        for (let i = 0; i < data.length; i++) {\n            this.oncoprint.setTrackData(data[i].track_id, data[i].data, 'sample');\n            this.oncoprint.setTrackInfo(data[i].track_id, \"\");\n\n            this.oncoprint.setTrackTooltipFn(data[i].track_id,  (data) => {\n                let sampleInfo = \"<b>Sample: \" + data.sample + \"</b>\";\n                if(data.disp_mut)\n                    sampleInfo += \"<p>\" + data.disp_mut + \" </p>\";\n                if(data.disp_cna)\n                    sampleInfo += \"<p>\" + data.disp_cna + \" </p>\";\n                if(data.disp_prot)\n                    sampleInfo += \"<p>\" + data.disp_prot + \" </p>\";\n                if(data.disp_fusion)\n                    sampleInfo += \"<p>\" + data.disp_fusion + \" </p>\";\n                if(data.disp_germ)\n                    sampleInfo += \"<p>\" + data.disp_germ + \" </p>\";\n                if(data.disp_mrna)\n                    sampleInfo += \"<p>\" + data.disp_mrna + \" </p>\";\n\n                return sampleInfo;\n\n\n            });\n        }\n        this.oncoprint.keepSorted(false);\n        this.oncoprint.releaseRendering();\n    }\n\n    /**\n     * Listens to Oncoprint events\n     */\n    listenToEvents() {\n\n        // Basic rangeslider initialization\n        $('#oncoprint-zoom').rangeslider({\n          // Deactivate the feature detection\n          polyfill: false,\n          rangeClass: 'rangeslider',\n          disabledClass: 'rangeslider--disabled',\n          horizontalClass: 'rangeslider--horizontal',\n          fillClass: 'rangeslider__fill',\n          handleClass: 'rangeslider__handle_custom',\n\n\n          // Callback function\n          onInit: function() {\n\n          },\n          // Callback function\n          onSlide: function(position, value) {\n              let zoom = value/100.0;\n\n              this.oncoprint.setHorzZoom(zoom);\n              $('#oncoprint-zoom-value').val(value);\n\n          },\n\n        });\n\n     }\n\n}\n\nmodule.exports = OncoprintHandler;\n\nfunction geneticComparator() {\n  let cna_key = 'disp_cna';\n  let cna_order = {'amp': 0, 'homdel': 1, 'gain': 2, 'hetloss': 3, 'diploid': 4, undefined: 5};\n  let mut_type_key = 'disp_mut';\n  let mut_order = {'trunc': 0, 'inframe': 1, 'promoter': 2, 'missense': 3, undefined: 4};\n  let mrna_key = 'disp_mrna';\n  let prot_key = 'disp_prot';\n  let reg_order = {'up': 0, 'down': 1, undefined: 2};\n  return function (d1, d2) {\n    let keys = [cna_key, mut_type_key, mrna_key, prot_key];\n    let orders = [cna_order, mut_order, reg_order, reg_order];\n    let diff = 0;\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let order = orders[i];\n      if (d1[key] && d2[key]) {\n        diff = order[d1[key]] - order[d2[key]];\n      } else if (d1[key]) {\n        diff = -1;\n      } else if (d2[key]) {\n        diff = 1;\n      }\n    }\n    return diff;\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "DEFAULT_GREY",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~DEFAULT_GREY",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "MUT_COLOR_MISSENSE",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~MUT_COLOR_MISSENSE",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "MUT_COLOR_FUSION",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~MUT_COLOR_FUSION",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "MUT_COLOR_GERMLINE",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~MUT_COLOR_GERMLINE",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "PROT_COLOR_UP",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~PROT_COLOR_UP",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "PROT_COLOR_DOWN",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~PROT_COLOR_DOWN",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "geneticRuleSet",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~geneticRuleSet",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"legend_label\": string, \"legend_base_color\": *, \"rule_params\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "geneticComparator",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~geneticComparator",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "class",
    "name": "OncoprintHandler",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js",
    "importStyle": "OncoprintHandler",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 197,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the container element"
      }
    ]
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "oncoprint",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler#oncoprint",
    "access": "public",
    "description": "",
    "lineNumber": 208,
    "type": {
      "nullable": null,
      "types": [
        "module:oncoprintjs"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "updateData",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler#updateData",
    "access": "public",
    "description": "Update the Oncoprint with data",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "listenToEvents",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/oncoprint/oncoprint-handler.js~OncoprintHandler#listenToEvents",
    "access": "public",
    "description": "Listens to Oncoprint events",
    "lineNumber": 283,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxCard-info.js",
    "content": "/*\n * Copyright 2013 Memorial-Sloan Kettering Cancer Center.\n *\n * This file is part of PCViz.\n *\n * PCViz is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * PCViz is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with PCViz. If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nvar _ = require('underscore');\n\nmodule.exports = function( model){\n\n\n    return{\n        el:'#idxCard-container',\n        render: function() {\n            // pass variables in using Underscore.js template\n            var variables = {\n                idxCards: model\n            };\n\n            // compile the template using underscore\n            var template = _.template( $(\"#idxCard-template\").html()); //funda\n\n            // load the compiled HTML into the Backbone \"el\"\n            $(this.el).html(template(variables));  //funda!!! has to be called like this\n\n\n\n            return this;\n        },\n\n\n    }\n};",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxCard-info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "idxCardinfo",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxCard-info.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxCard-info.js~idxCardinfo",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxCard-info.js",
    "importStyle": "idxCardinfo",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"el\": string, \"render\": *}"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxcardjson-to-json-converter.js",
    "content": "/** The idxcardjson-to-json-converter module translates an indexcard JSON from the Reach API into a JSON valid for SBGNviz. Its implementation is below.\n **/\n\n// Author: David Servillo.\n\n//Date of the last change: 09/20/2017\n\nvar idxCardToJson = {\n\n    //Create the SBGNviz-compatible JSON\n    createJson: function(idxcardjsonObj) {\n        var jsonObj = {};\n        jsonObj.nodes = [];\n        jsonObj.edges = [];\n\n        var entityBbox = {\n            \"compartment\": {x:0, y:0, w:60, h:60},\n            \"complex\": {x:0, y:0, w:60, h:60},\n            \"macromolecule\": {x:0, y:0, w:120, h:60},\n            \"process\": {x:0, y:0, w:20, h:20},\n            \"sourceandsink\": {x:0, y:0, w:60, h:60}\n        };\n\n        var statesandinfosbbox = {x:0, y:-50, w:40, h:12};\n        var addmodifstatesandinfosbbox = {x:0, y:50, w:40, h:12};\n\n        var stateInfos = {\n            \"acetylation\": \"Ac\",\n            \"glycosylation\": \"G\",\n            \"hydroxylation\": \"OH\",\n            \"methylation\": \"Me\",\n            \"myristoylation\": \"My\",\n            \"palmytoylation\": \"Pa\",\n            \"phosphorylation\": \"P\",\n            \"prenylation\": \"Pr\",\n            \"protonation\": \"H\",\n            \"sulfation\": \"S\",\n            \"sumoylation\": \"Su\",\n            \"ubiquitination\": \"Ub\"\n        }\n\n        var i;\n        for(i=0; i<idxcardjsonObj.cards.length; i++) {\n\n            //Create the first glyph\n            var newNode0 = {\n                data: {\n                    id:\"ele\"+i+1,\n                    class: \"macromolecule\",\n                    bbox: entityBbox.macromolecule,\n                    statesandinfos: [{bbox: statesandinfosbbox,\n                        id: \"ele\"+i+2,\n                        clazz: \"unit of information\",\n                        label: {text:\"mt:prot\"},\n                        coordType:  \"relativeToCenter\",\n                        anchorSide: \"top\",\n                        isDisplayed: false}],\n                    parent: \"\",\n                    ports: []\n                }\n            };\n\n            if('participant_a' in idxcardjsonObj.cards[i].extracted_information)\n                newNode0.data.label = idxcardjsonObj.cards[i].extracted_information.participant_a.entity_text;\n            else\n                newNode0.data.label = \"\";\n\n            jsonObj.nodes.push(newNode0);\n\n            //Create the second glyph\n            var newNode1 = {\n                data: {\n                    id: \"ele\"+i+3,\n                    class: \"macromolecule\",\n                    bbox: entityBbox.macromolecule,\n                    label: idxcardjsonObj.cards[i].extracted_information.participant_b.entity_text,\n                    statesandinfos: [{bbox: statesandinfosbbox,\n                        id:\"ele\"+i+6,\n                        clazz:\"unit of information\",\n                        label:{text:\"mt:prot\"},\n                        coordType:  \"relativeToCenter\",\n                        anchorSide: \"top\",\n                        isDisplayed: false}],\n                    parent: \"\",\n                    ports: []\n                }\n            };\n\n            jsonObj.nodes.push(newNode1);\n\n            //Create the third glyph\n            var newNode2 = {\n                data: {\n                    id: \"ele\"+i+5,\n                    class: \"process\",\n                    label: \"null\",\n                    statesandinfos: [],\n                    bbox: entityBbox.process,\n                    parent: \"\",\n                    ports: []\n                }\n            };\n\n            jsonObj.nodes.push(newNode2);\n\n            var newNode3 = {\n                data: {\n                    id: \"ele\"+i+6,\n                    class: \"\",\n                    label: \"\",\n                    statesandinfos: [],\n                    bbox: {x:0, y:0, w:0, h:0},\n                    parent: \"\",\n                    ports: []\n                }\n            };\n\n            jsonObj.nodes.push(newNode3);\n\n            var newNode4;\n            //Create the first arc\n            var newEdge0 = {\n                data: {\n                    id: newNode3.data.id + \"-\" + newNode2.data.id,\n                    class: \"consumption\",\n                    bendPointPositions: [],\n                    cardinality: 0,\n                    source: newNode3.data.id,\n                    target: newNode2.data.id,\n                    portsource: newNode3.data.id,\n                    porttarget: newNode2.data.id\n                }\n            };\n\n            jsonObj.edges.push(newEdge0);\n\n            //Create the second arc\n            var newEdge1 = {\n                data: {\n                    id: newNode2.data.id + \"-\" + newNode1.data.id,\n                    class: \"production\",\n                    bendPointPositions: [],\n                    cardinality: 0,\n                    source: newNode2.data.id,\n                    target: newNode1.data.id,\n                    portsource: newNode2.data.id,\n                    porttarget: newNode1.data.id\n                }\n            };\n\n            jsonObj.edges.push(newEdge1);\n\n            //Create the third arc\n            var newEdge2 = {\n                data: {\n                    id: newNode0.data.id + \"-\" + newNode2.data.id,\n                    class: \"consumption\",\n                    bendPointPositions: [],\n                    cardinality: 0,\n                    source: newNode0.data.id,\n                    target: newNode2.data.id,\n                    portsource: newNode0.data.id,\n                    porttarget: newNode2.data.id\n                }\n            };\n\n            jsonObj.edges.push(newEdge2);\n\n            if(idxcardjsonObj.cards[i].extracted_information.interaction_type == \"increases_activity\")  //The interaction is a type of stimulation.\n                newEdge2.data.class = \"stimulation\";\n\n            else if(idxcardjsonObj.cards[i].extracted_information.interaction_type == \"decreases_activity\")  //The interaction is a type of inhibition.\n                newEdge2.data.class = \"inhibition\";\n\n            else if(idxcardjsonObj.cards[i].extracted_information.interaction_type == \"binds\") {  //The interaction is a binding.\n\n                //The \"source and sink\" glyph is transformed into a macromolecular glyph\n                newNode3.data.class = \"macromolecule\";\n                newNode3.data.label = idxcardjsonObj.cards[i].extracted_information.participant_b.entity_text;\n                newNode3.data.bbox = entityBbox.macromolecule;\n                newNode3.data.statesandinfos[0] = {};\n                newNode3.data.statesandinfos[0].bbox = statesandinfosbbox;\n                newNode3.data.statesandinfos[0].id = \"ele\"+i+9;\n                newNode3.data.statesandinfos[0].clazz = \"unit of information\";\n                newNode3.data.statesandinfos[0].label = {};\n                newNode3.data.statesandinfos[0].label.text = \"mt:prot\";\n                newNode3.data.statesandinfos[0].coordType = \"relativeToCenter\";\n                newNode3.data.statesandinfos[0].anchorSide = \"top\";\n                newNode3.data.statesandinfos[0].isDisplayed = false;\n\n                //The result of the reaction is a complex\n                newNode1.data.class = \"complex\";\n                newNode1.data.bbox = entityBbox.complex;\n                delete newNode1.data.label;\n                newNode1.data.statesandinfos = [];\n\n                //First glyph in the complex\n                newNode4 = {\n                    data: {\n                        id:\"ele\"+i+10,\n                        class: \"macromolecule\",\n                        bbox: entityBbox.macromolecule,\n                        label: idxcardjsonObj.cards[i].extracted_information.participant_b.entity_text,\n                        statesandinfos: [{bbox: statesandinfosbbox,\n                            id:\"ele\"+i+4,\n                            clazz: \"unit of information\",\n                            label: {text:\"mt:prot\"},\n                            coordType:  \"relativeToCenter\",\n                            anchorSide: \"top\",\n                            isDisplayed: false}],\n                        parent: \"ele\"+i+3,\n                        ports: []\n                    }\n                };\n\n                jsonObj.nodes.push(newNode4);\n\n                //Second glyph in the complex\n                var newNode5 = {\n                    data: {\n                        id: \"ele\"+i+11,\n                        class: \"macromolecule\",\n                        bbox: entityBbox.macromolecule,\n                        statesandinfos: [{bbox: statesandinfosbbox,\n                            id: \"ele\"+i+12,\n                            clazz: \"unit of information\",\n                            label:{text:\"mt:prot\"},\n                            coordType:  \"relativeToCenter\",\n                            anchorSide: \"top\",\n                            isDisplayed: false}],\n                        label: newNode0.data.label,\n                        parent: \"ele\"+i+3,\n                        ports: []\n                    }\n                };\n\n                jsonObj.nodes.push(newNode5);\n\n                newNode2.data.class = \"association\";\n\n                newEdge2.data.class = \"consumption\";\n            }\n\n            else if(idxcardjsonObj.cards[i].extracted_information.interaction_type == \"adds_modification\") { //The interaction is a chemical modification\n                newEdge2.data.class = \"stimulation\";\n\n                //That glyph is not a \"source and sink\" glyph anymore, but a macromolecule\n                newNode3.data.class = \"macromolecule\";\n                newNode3.data.label = idxcardjsonObj.cards[i].extracted_information.participant_b.entity_text;\n                newNode3.data.bbox = entityBbox.macromolecule;\n                newNode3.data.statesandinfos[0] = {};\n                newNode3.data.statesandinfos[0].id = \"ele\"+i+8;\n                newNode3.data.statesandinfos[0].clazz = \"unit of information\";\n                newNode3.data.statesandinfos[0].label = {};\n                newNode3.data.statesandinfos[0].label.text = \"mt:prot\";\n                newNode3.data.statesandinfos[0].bbox = statesandinfosbbox;\n                newNode3.data.statesandinfos[0].coordType = \"relativeToCenter\";\n                newNode3.data.statesandinfos[0].anchorSide = \"top\";\n                newNode3.data.statesandinfos[0].isDisplayed = false;\n                newNode3.data.parent = \"\";\n                newNode3.data.ports = [];\n\n                var j;\n                for(j=0; j<idxcardjsonObj.cards[i].extracted_information.modifications.length; j++) {\n                    var newStateInfos = {\n                        id: \"ele\"+i+7,\n                        clazz: \"state variable\",\n                        bbox: addmodifstatesandinfosbbox,\n                        state: {value: stateInfos[idxcardjsonObj.cards[i].extracted_information.modifications[j].modification_type]},\n                        coordType:  \"relativeToCenter\",\n                        anchorSide: \"top\",\n                        isDisplayed: false\n                    };\n\n                    newNode1.data.statesandinfos.push(newStateInfos);\n                }\n            }\n            else if(idxcardjsonObj.cards[i].extracted_information.interaction_type == \"translocates\") {  //The interaction is a translocation\n\n                //jsonObj.edges[3*i+2].data.class = \"consumption\";\n\n                //A second compartment\n                if(idxcardjsonObj.cards[i].extracted_information.to_location_text !== undefined) {\n                    newNode4 = {\n                        data: {\n                            id:\"ele\"+i+10,\n                            class: \"compartment\",\n                            bbox: entityBbox.compartment,\n                            label: idxcardjsonObj.cards[i].extracted_information.to_location_text,\n                            statesandinfos: [],\n                            parent: \"\",\n                            ports: []\n                        }\n                    };\n\n                    jsonObj.nodes.push(newNode4);\n\n                    newNode1.data.parent = \"ele\"+i+10;\n                }\n\n                //The \"source and sink\" glyph is transformed into a macromolecule\n                newNode3.data.class = \"macromolecule\";\n                newNode3.data.label = idxcardjsonObj.cards[i].extracted_information.participant_b.entity_text;\n                newNode3.data.bbox = entityBbox.macromolecule;\n                newNode3.data.statesandinfos[0] = {};\n                newNode3.data.statesandinfos[0].bbox = statesandinfosbbox;\n                newNode3.data.statesandinfos[0].id = \"ele\"+i+9;\n                newNode3.data.statesandinfos[0].clazz = \"unit of information\";\n                newNode3.data.statesandinfos[0].label = {};\n                newNode3.data.statesandinfos[0].coordType = \"relativeToCenter\";\n                newNode3.data.statesandinfos[0].anchorSide = \"top\";\n                newNode3.data.statesandinfos[0].isDisplayed = false;\n                newNode3.data.statesandinfos[0].label.text = \"mt:prot\";\n\n                //The first glyph is transformed into a compartment\n                if(idxcardjsonObj.cards[i].extracted_information.from_location_text !== undefined) {\n                    newNode0.class = \"compartment\";\n                    newNode0.statesandinfos = [];\n                    newNode0.label = idxcardjsonObj.cards[i].extracted_information.from_location_text;\n                    newNode0.bbox = entityBbox.compartment.bbox;\n\n                    newNode3.data.parent = \"ele\"+i+1;\n                } else {\n                    newNode0.label = idxcardjsonObj.cards[i].extracted_information.participant_b.entity_text;\n                    newNode3 = {};\n                    newEdge0 = {};\n                }\n            }\n        }\n        return jsonObj;\n    }\n};\n\n// if( typeof module !== 'undefined' && module.exports) // expose as a nodejs module\nmodule.exports = idxCardToJson;",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxcardjson-to-json-converter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "idxCardToJson",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxcardjson-to-json-converter.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxcardjson-to-json-converter.js~idxCardToJson",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/reach-functions/idxcardjson-to-json-converter.js",
    "importStyle": "idxCardToJson",
    "description": "The idxcardjson-to-json-converter module translates an indexcard JSON from the Reach API into a JSON valid for SBGNviz. Its implementation is below.",
    "lineNumber": 8,
    "type": {
      "types": [
        "{\"createJson\": *}"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "content": "/**\n * Created by durupina on 5/13/16.\n\n * Class with methods to visually update the graph based on commands from the agents.\n */\n\n/**\n *\n * @type {{\"ont::phosphorylation\": string[]}}\n * TODO: extend this to other modification types e.g. ubiquination\n */\n const possibleStates = {\n    \"ont::phosphorylation\": [\"p\", \"phosphorylation\", \"phospho\", \"phosphorylated\", \"p@p\"]\n}\n\n/**\n * Global variable to access appUtilities\n */\nconst appUtilities = window.appUtilities;\n\n class VisHandler  {\n    /**\n     *\n     * @param {Object} modelManager Manager object for the model\n     */\n    constructor (modelManager) {\n\n        /**\n         *\n         * @type {Object} modelManager\n         *\n         */\n\n        this.modelManager = modelManager;\n\n    }\n\n\n    /**\n     * Finds nodes with a given label. Does not check the node states.\n     * @param {string} name Label name\n     * @param {Array} nodes Nodes to search\n     * @returns {Array} Nodes with the given label\n     */\n  findAllNodesFromLabel(name, nodes) {\n\n        let possibleNodes = [];\n\n        nodes.forEach(function (node) {\n            let label = node.data(\"label\");\n\n            if (label) {\n                label = label.replace('-', '');\n                if (name && (typeof name === 'string' || name instanceof String)) {\n                    name = name.replace('-', '');\n                    if (label && label.toLowerCase() === name.toLowerCase()) {\n                        possibleNodes.push(node);\n                    }\n                }\n            }\n        });\n\n        return possibleNodes;\n    }\n\n\n    /***\n     * Finds nodes with a given label. Checks the node states.\n     * @param {string} name Label name\n     * @param {string} state If null, no need to check state; otherwise look at class values of state values\n     * @param {Array} nodes Nodes to search\n     * @returns {Array} Nodes with the given label\n     */\n\n    findNodeFromLabel(name, state, nodes) {\n\n        let myNodes = [];\n\n        let possibleNodes = [];\n\n\n        nodes.forEach(function (node) {\n            let label = node.data(\"label\");\n\n            if (label) {\n                label = label.replace('-', '');\n                if (name && (typeof name === 'string' || name instanceof String)) {\n                    name = name.replace('-', '');\n                    if (label && label.toLowerCase() === name.toLowerCase()) {\n                        possibleNodes.push(node);\n                    }\n                }\n            }\n        });\n\n        if (!state && possibleNodes.length > 0) { //no need to compare\n            return possibleNodes;\n        } else {\n\n\n            //now look at possible nodes to compare states\n            possibleNodes.forEach(function (node) {\n\n                let statesandinfos = node.data(\"statesandinfos\");\n                for (var i = 0; i < statesandinfos.length; i++) {\n                    var sbgnstateandinfo = statesandinfos[i];\n                    if (sbgnstateandinfo.clazz == \"state variable\") {\n                        let value = sbgnstateandinfo.state.value;\n\n                        if (value && value.toLowerCase() === state.toLowerCase() ||\n                            value && possibleStates[state.toLowerCase()] && possibleStates[state.toLowerCase()].indexOf(value.toLowerCase()) > -1 || !value && state === '') //if any state matches this\n                            myNodes.push(node);\n                    }\n                }\n\n            });\n        }\n\n        return myNodes;\n    }\n\n    /***\n     * Local function to update children's positions with node\n     * @param {Object} positionDiff\n     * @param {Object} node\n     * @param {Number} cyId\n     */\n    moveNodeAndChildren (positionDiff, node, cyId) {\n        let oldX = node.position(\"x\");\n        let oldY = node.position(\"y\");\n        node.position({\n            x: oldX + positionDiff.x,\n            y: oldY + positionDiff.y\n        });\n\n        this.modelManager.changeModelNodeAttribute(\"position\", node.data(\"id\"), cyId, node.position(), \"me\");\n\n        let children = node.children();\n        children.forEach((child) => {\n            this.moveNodeAndChildren(positionDiff, child, true);\n        });\n    }\n\n    /***\n     * Moves node to the given location in data\n     * @param {Object} data Node info {name:<string>, state:<string> , location:<string>}\n     */\n    moveNode(data) {\n\n        let nodesToMove;\n        let posToMove;\n\n        let name = data.name;\n        let state = data.state;\n        let location = data.location;\n\n        const extensionX = 40;\n        const extensionY = 40;\n\n\n        let cy = appUtilities.getCyInstance(data.cyId);\n        appUtilities.setActiveNetwork(data.cyId);\n\n        let nodes = appUtilities.getCyInstance(data.cyId).nodes();\n\n        nodesToMove = this.findNodeFromLabel(name, state, nodes);\n\n        nodesToMove.forEach((nodeToMove) => {\n\n            //move our node first\n\n            let bBox = cy.elements().boundingBox();\n\n            //extend bbox\n            bBox.x1 -= extensionX;\n            bBox.x2 += extensionX;\n            bBox.y1 -= extensionY;\n            bBox.y2 += extensionY;\n\n\n            if (location.toUpperCase().indexOf('TOP') > -1)\n                posToMove = {x: (bBox.x1 + bBox.x2) / 2, y: bBox.y1};\n            else if (location.toUpperCase().indexOf('BOTTOM') > -1)\n                posToMove = {x: (bBox.x1 + bBox.x2) / 2, y: bBox.y2};\n            else if (location.toUpperCase().indexOf('LEFT') > -1)\n                posToMove = {x: bBox.x1, y: (bBox.y1 + bBox.y2) / 2};\n            else if (location.toUpperCase().indexOf('RIGHT') > -1)\n                posToMove = {x: bBox.x2, y: (bBox.y1 + bBox.y2) / 2};\n\n\n            //move node -- no need to update the model for now\n            nodeToMove.position(posToMove);\n\n            if (nodeToMove.isParent()) {\n                let posDiff = {x: posToMove.x - nodeToMove.position(\"x\"), y: posToMove.y - nodeToMove.position(\"y\")};\n                this.moveNodeAndChildren(posDiff, nodeToMove);\n            }\n\n            //make sure model is updated accordingly\n            this.modelManager.changeModelNodeAttribute(\"position\", nodeToMove.data(\"id\"), data.cyId, posToMove, \"me\");\n\n\n            nodeToMove.lock();\n\n\n            $(\"#perform-layout\").trigger('click');\n\n            let layoutCose = cy.layout({'name': 'cose', idealEdgeLength: 5, edgeElasticity: 5});\n            layoutCose.run();\n\n            cy.on('layoutstop', () => {\n                nodeToMove.unlock();\n\n                //move again\n\n                let bBox = cy.elements().boundingBox();\n\n                //extend bbox\n                bBox.x1 -= extensionX;\n                bBox.x2 += extensionX;\n                bBox.y1 -= extensionY;\n                bBox.y2 += extensionY;\n\n                if (location.toUpperCase().indexOf('TOP') > -1)\n                    posToMove = {x: (bBox.x1 + bBox.x2) / 2, y: bBox.y1};\n                else if (location.toUpperCase().indexOf('BOTTOM') > -1)\n                    posToMove = {x: (bBox.x1 + bBox.x2) / 2, y: bBox.y2};\n                else if (location.toUpperCase().indexOf('LEFT') > -1)\n                    posToMove = {x: bBox.x1, y: (bBox.y1 + bBox.y2) / 2};\n                else if (location.toUpperCase().indexOf('RIGHT') > -1)\n                    posToMove = {x: bBox.x2, y: (bBox.y1 + bBox.y2) / 2};\n\n\n                if (nodeToMove.isParent()) {\n                    let posDiff = {\n                        x: posToMove.x - nodeToMove.position(\"x\"),\n                        y: posToMove.y - nodeToMove.position(\"y\")\n                    };\n                    this.moveNodeAndChildren(posDiff, nodeToMove);\n                }\n\n                //move node -- no need to update the model for now\n                nodeToMove.position(posToMove);\n\n                //make sure model is updated accordingly\n                this.modelManager.changeModelNodeAttribute(\"position\", nodeToMove.data(\"id\"), data.cyId, posToMove, \"me\");\n            });\n        });\n    }\n\n\n    /***\n     * Highlights the upstream or downsteam of nodes given in data\n     * @param {Object} data {name:, direction:, state:, cyId:}\n     */\n    highlightNodeStream (data) {\n\n        let cy = appUtilities.getCyInstance(data.cyId);\n\n        let chise = appUtilities.getChiseInstance(data.cyId)\n\n        chise.getSbgnvizInstance().removeHighlights();\n        this.selectNodeStream(data);\n\n        appUtilities.getChiseInstance(data.cyId).highlightSelected(cy.elements(':selected'));\n\n    }\n\n\n    /***\n     * Selects the upstream or downsteam of nodes given in data\n     * @param {Object} data {name:, direction:, state:, cyId:}\n     */\n    selectNodeStream (data) {\n        let cy = appUtilities.getCyInstance(data.cyId);\n\n\n        let nodes = this.findNodeFromLabel(data.name, data.state, cy.nodes());\n\n        let ids = [];\n        nodes.forEach(function (node) {\n            ids.push(node.data(\"id\"));\n        });\n\n\n        let nodeIds = this._findStream(ids, ids, data.direction, cy);\n\n        //unselect all first\n        cy.elements().unselect();\n\n        //select elements\n        nodeIds.forEach(function (id) {\n            cy.getElementById(id).select();\n        });\n\n    }\n\n\n    /***\n     * Moves the upstream or downsteam of nodes given in data to a location\n     * @param {Object} data {name: <string>, direction: <\"up\", \"down\">, state:, cyId:<Number>, location: <\"top\", \"bottom\", \"left\", \"right\">}\n     */\n    moveNodeStream (data) {\n\n        let cy = appUtilities.getCyInstance(data.cyId);\n\n        let nodes = this.findNodeFromLabel(data.name, data.state, cy.nodes());\n\n        let ids = [];\n        if(!nodes)\n            return;\n        nodes.forEach(function (node) {\n            ids.push(node.data(\"id\"));\n        });\n\n\n        let nodeIds = this._findStream(ids, ids, data.direction, cy);\n\n        if(!nodeIds)\n            return;\n        //unselect all first\n        cy.elements().unselect();\n\n\n\n        //select elements\n        nodeIds.forEach(function (id) {\n            cy.getElementById(id).select();\n        });\n\n\n        let streamEles = cy.elements(':selected');\n\n        this.moveSelected(streamEles, data);\n    }\n\n    /**\n     * Moves the given nodes to a specified location\n     * @param {Array} nodesSelected\n     * @param {Object} data\n     */\n    moveSelected (nodesSelected, data) {\n\n        let cy = appUtilities.getCyInstance(data.cyId);\n        let restEles = cy.elements().difference(nodesSelected);\n\n        let bBoxRest = restEles.boundingBox();\n        let bBoxSelected = nodesSelected.boundingBox();\n\n\n        let posUpdate = {};\n        posUpdate.x = Math.abs(bBoxSelected.x1 - bBoxRest.x1);\n        posUpdate.y = Math.abs(bBoxSelected.y1 - bBoxRest.y1);\n        //unselect again\n        cy.elements().unselect();\n\n        let modelEles = [];\n        let paramList = [];\n        nodesSelected.forEach(function (ele) {\n            let currPos = ele.position();\n\n            if (data.location.toUpperCase().indexOf('TOP') > -1)  //move up\n                currPos.y -= 2 * Math.abs(currPos.y - bBoxRest.y1);\n            else if (data.location.toUpperCase().indexOf('BOTTOM') > -1)\n                currPos.y += 2 * Math.abs(currPos.y - bBoxRest.y2);\n            else if (data.location.toUpperCase().indexOf('LEFt') > -1)\n                currPos.x -= 2 * Math.abs(currPos.x - bBoxRest.x1);\n            else if (data.location.toUpperCase().indexOf('RIGHT') > -1)\n                currPos.x += 2 * Math.abs(currPos.x - bBoxRest.x2);\n\n            ele.position(currPos);\n            modelEles.push({id: ele.id(), isNode: ele.isNode()});\n            paramList.push(currPos);\n\n        });\n\n\n        //update model so that others know\n        this.modelManager.changeModelElementGroupAttribute(\"position\", modelEles, data.cyId, paramList, \"me\");\n\n    }\n\n    /***\n     * Finds the upstream or downstream elements for given nodes with ids\n     * @param {Array} ids\n     * @param {Array} visitedIds Ids of the nodes that we already visited\n     * @param {string} direction : \"up\" or \"down\"\n     * @param {Object} cy Cytoscape object\n     * @returns {Array} nodeIds Node ids of upstream or downstream elements\n     * @private\n     */\n    _findStream (ids, visitedIds, direction, cy) {\n\n        let self = this;\n        let nodeIds = [];\n\n        let directionMap = {down: {node: \"source\", neighbor: \"target\"}, up: {node: \"target\", neighbor: \"source\"}};\n\n\n        ids.forEach(function (nodeId) {\n\n            let edgeStr = \"[\" + directionMap[direction].node + \"='\" + nodeId + \"']\";\n\n            let edges = cy.edges(edgeStr);\n\n            if(!edges)\n                return [];\n\n\n            edges.forEach((edge) => {\n                let neighborId = edge.data(directionMap[direction].neighbor);\n\n                if(visitedIds.lastIndexOf(neighborId) > -1) //we reached back an already tested node\n                    return [];\n\n                visitedIds.push(neighborId);\n\n                let nextLevelNodeIds = self._findStream([neighborId], visitedIds, direction, cy);\n\n\n                nodeIds = nodeIds.concat(nextLevelNodeIds);\n                nodeIds.push(neighborId);\n            });\n        });\n\n        return nodeIds;\n\n    }\n\n    /***\n     * Returns nodes that the children of a given compartment\n     * @param {Object} data  {name : <compartment name>}\n     * @returns {Object} Children f the given compartment\n     */\n    findCompartmentNodes (data) {\n\n        let cy = appUtilities.getCyInstance(data.cyId);\n\n        let myComp;\n        cy.nodes().forEach(function (node) {\n            if (node.data(\"class\") === \"compartment\" && node.data(\"label\").toLowerCase() === data.name.toLowerCase()) {\n                myComp = node;\n            }\n        });\n\n\n        if (myComp)\n            return myComp.children();\n\n        return null;\n\n    }\n\n    /**\n     * Moves the elements of the whole compartment to a given location\n     * @param {Object} data {name:, direction: <\"up\", \"dow\">, state:, cyId:, location: <\"top\", \"bottom\", \"left\", \"right\">}\n     */\n\n    moveCompartmentNodes (data) {\n        let nodes = this.findCompartmentNodes(data);\n\n\n        nodes.select();\n\n        this.moveSelected(nodes, data);\n\n    }\n}\n\nmodule.exports = VisHandler;\n\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "name": "possibleStates",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~possibleStates",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "{\"ont::phosphorylation\": string[]}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "appUtilities",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~appUtilities",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "class",
    "name": "VisHandler",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js",
    "importStyle": "VisHandler",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 209,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "modelManager",
        "description": "Manager object for the model"
      }
    ]
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "modelManager",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#modelManager",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "findAllNodesFromLabel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#findAllNodesFromLabel",
    "access": "public",
    "description": "Finds nodes with a given label. Does not check the node states.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Nodes with the given label"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Label name"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "Nodes to search"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Nodes with the given label"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "findNodeFromLabel",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#findNodeFromLabel",
    "access": "public",
    "description": "Finds nodes with a given label. Checks the node states.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Nodes with the given label"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Label name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "If null, no need to check state; otherwise look at class values of state values"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "Nodes to search"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Nodes with the given label"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "moveNodeAndChildren",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#moveNodeAndChildren",
    "access": "public",
    "description": "Local function to update children's positions with node",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "positionDiff",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cyId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "moveNode",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#moveNode",
    "access": "public",
    "description": "Moves node to the given location in data",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Node info {name:<string>, state:<string> , location:<string>}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "highlightNodeStream",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#highlightNodeStream",
    "access": "public",
    "description": "Highlights the upstream or downsteam of nodes given in data",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{name:, direction:, state:, cyId:}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "selectNodeStream",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#selectNodeStream",
    "access": "public",
    "description": "Selects the upstream or downsteam of nodes given in data",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{name:, direction:, state:, cyId:}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "moveNodeStream",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#moveNodeStream",
    "access": "public",
    "description": "Moves the upstream or downsteam of nodes given in data to a location",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{name: <string>, direction: <\"up\", \"down\">, state:, cyId:<Number>, location: <\"top\", \"bottom\", \"left\", \"right\">}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "moveSelected",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#moveSelected",
    "access": "public",
    "description": "Moves the given nodes to a specified location",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesSelected",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "_findStream",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#_findStream",
    "access": "private",
    "description": "Finds the upstream or downstream elements for given nodes with ids",
    "lineNumber": 392,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} nodeIds Node ids of upstream or downstream elements"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "visitedIds",
        "description": "Ids of the nodes that we already visited"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": ": \"up\" or \"down\""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cy",
        "description": "Cytoscape object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "nodeIds Node ids of upstream or downstream elements"
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "findCompartmentNodes",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#findCompartmentNodes",
    "access": "public",
    "description": "Returns nodes that the children of a given compartment",
    "lineNumber": 435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Children f the given compartment"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{name : <compartment name>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Children f the given compartment"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "moveCompartmentNodes",
    "memberof": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/public/collaborative-app/js/visual-manipulation/vis-handler.js~VisHandler#moveCompartmentNodes",
    "access": "public",
    "description": "Moves the elements of the whole compartment to a given location",
    "lineNumber": 459,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{name:, direction: <\"up\", \"dow\">, state:, cyId:, location: <\"top\", \"bottom\", \"left\", \"right\">}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/server/data/sampleSentences.json",
    "content": "[\n  {\n    \"text\": \"__Mechanism and path search__\",\n    \"disabled\": true\n  },\n  {\n    \"text\": \"What does MAP4K2 interact with?\"\n  },\n  {\n    \"text\": \"Does MAP2K1 activate MAPK1?\"\n  },\n  {\n    \"text\": \"What phosphorylates SOCS1?\"\n  },\n  {\n    \"text\": \"Does phosphorylation at T185 activate MAPK1?\"\n  },\n  {\n    \"text\": \"How does KRAS affect ELK1?\"\n  },\n  {\n    \"text\": \"What are the paths between MAPK3 and FOS?\"\n  },\n  {\n    \"text\": \"What pathways affect BRAF?\"\n  },\n  {\n    \"text\": \"__Cancer genomics__\",\n    \"disabled\": true\n  },\n  {\n    \"text\": \"What is the drug response on cells with TP53 alterations?\"\n  },\n  {\n    \"text\": \"What is the mutation frequency of EGFR in glioblastoma?\"\n  },\n  {\n    \"text\": \"What are the mutations of PTEN in breast cancer?\"\n  },\n  {\n    \"text\": \"What genes are mutually exclusive with CDH1 for breast cancer?\"\n  },\n {\n  \"text\": \"__Transcriptional regulation__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"Does STAT3 regulate the c-fos gene?\"\n },\n {\n  \"text\": \"Does STAT3 regulate the c-fos gene in liver?\"\n },\n {\n  \"text\": \"Which transcription factors regulate frizzled8?\"\n },\n {\n  \"text\": \"Show me the evidence that kras regulates fzd8.\"\n },\n {\n  \"text\": \"What genes does stat3 regulate?\"\n },\n {\n  \"text\": \"What transcription factors are shared by the SRF, HRAS, and elk1 genes?\"\n },\n {\n  \"text\": \"What genes are regulated by elk1 and srf?\"\n },\n\n {\n  \"text\": \"__Drug targets__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"What are the targets of PLX-4720?\"\n },\n {\n  \"text\": \"What drugs target BRAF?\"\n },\n {\n  \"text\": \"Does selumetinib target MAP2K2?\"\n },\n {\n  \"text\": \"__Entity type and family/complex membership__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"What is Selumetinib?\"\n },\n {\n  \"text\": \"Is BRAF a kinase?\"\n },\n {\n  \"text\": \"Is SRF a transcription factor?\"\n },\n {\n  \"text\": \"What are the members of RAS?\"\n },\n {\n  \"text\": \"Is BRAF a member of the RAF family?\"\n },\n {\n  \"text\": \"__Model building__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"Let\\u2019s build a model\"\n },\n {\n  \"text\": \"Selumetinib inhibits MAP2K1\"\n },\n {\n  \"text\": \"Undo\"\n },\n {\n  \"text\": \"Remove the fact that MEK binds ERK from the model\"\n },\n {\n  \"text\": \"Active MAP2K1 phosphorylates MAPK1\"\n },\n {\n  \"text\": \"Phosphorylated MAPK1 is active\"\n },\n {\n  \"text\": \"DUSP dephosphorylates MAPK1 on T185\"\n },\n {\n  \"text\": \"Active MAPK1 activates ELK1\"\n },\n {\n  \"text\": \"Active ELK1 transcribes FOS\"\n },\n {\n  \"text\": \"__Model queries / simulations__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"What is in the model?\"\n },\n {\n  \"text\": \"Does Selumetinib decrease JUN in the model?\"\n },\n {\n  \"text\": \"Is the amount of phosphorylated MAPK1 ever high?\"\n },\n {\n  \"text\": \"Is the amount of FOS always high if we increase the amount of ELK1 by 10 fold?\"\n },\n {\n  \"text\": \"__Cellular localization__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"What is the most likely cellular location of AKT1 and BRAF?\"\n },\n {\n  \"text\": \"__Pathway membership__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"What pathways involve SRF?\"\n },\n {\n  \"text\": \"Which KEGG pathways use SRF?\"\n },\n {\n  \"text\": \"Does the mTor pathway utilize SGK1?\"\n },\n {\n  \"text\": \"Which kinases are in the MAPK signaling pathway?\"\n },\n {\n  \"text\": \"What signaling pathways are shared by STAT3 and SRF?\"\n },\n {\n  \"text\": \"__Micro-RNA regulation__\",\n  \"disabled\": true\n },\n {\n  \"text\": \"What microRNAs target STAT3?\"\n },\n {\n  \"text\": \"Does miR-20b-5p target STAT3?\"\n },\n {\n  \"text\": \"What genes does miR-20b-5p target?\"\n },\n {\n  \"text\": \"What miRNAs most frequently regulate EGFR, SRF, STAT3, JAK2, and SMAD3?\"\n },\n {\n  \"text\": \"What genes are most frequently regulated by miR-335-5p, miR-155-5p, miR-145-5p and miR-20a-5p?\"\n }\n]",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/server/data/sampleSentences.json",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js",
    "content": "\n/***\n * Read the file to visualize and return its contents in callback\n * @param {string} filePath : path+fileName\n * @param {function} callback\n */\nvar readJsonFile =  function(filePath, callback ){\n\n    try {\n        var fs = require('fs');\n        fs.readFile(filePath, 'utf-8', function (error, fileContent) {\n            if (error) {\n                if (callback) callback(\"Error \" + error)\n                console.log('exec error: ' + error);\n                return;\n            }\n\n            if (callback) {\n                callback(fileContent);\n            }\n\n\n        });\n    }\n    catch(error){\n        if (callback) callback(\"Error \" + error);\n    }\n\n};\n\n\n\n/**\n * Socket listener class. Listens to human client and agent socket requests\n\n */\n\nclass ServerSideSocketListener{\n    /**\n     * @param {IO} io\n     * @param {Object} model Shared model\n\n     */\n    constructor(io, model){\n\n        this._start(io, model);\n    }\n\n    /**\n     * @param {IO} io\n     * @param {Object} model Shared model\n     */\n    _start(io, model){\n        let modelManagerList = {}; //not an array!\n        let roomList = [];\n        let humanList = [];\n        let sampleSentencesJson;\n        let tripsGeneralInterfaceInstance;\n\n        let tripsVisualizationInterfaceInstance;\n\n        let request = require('request'); //REST call over http/https\n\n        let responseHeaders = {\n            \"access-control-allow-origin\": \"*\",\n            \"access-control-allow-methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n            \"access-control-allow-headers\": \"content-type, accept\",\n            \"access-control-max-age\": 10,\n            \"Content-Type\": \"application/json\"\n        };\n\n        // io.on('connection', function(socket){ //updated to this in socket.io > 1.0\n        io.sockets.on('connection', function (socket) {\n\n            // io.on('connection', function(socket){ //for the new socket.io\n\n            socket.on('error', function (error) {\n                console.log(error);\n            });\n\n            listenToAgentRequests(socket);\n\n            listenToHumanRequests(socket);\n\n            listenToQueryRequests(socket); //can come from both human and agent\n\n            //To display on the web page\n            readJsonFile('./server/data/sampleSentences.json', function(content){\n                sampleSentencesJson =  JSON.parse(content);\n\n            });\n\n            socket.on('disconnect', function() {\n                try {\n                    if(socket.room) {\n\n                        modelManagerList[socket.room].deleteUserId(socket.userId);\n\n                        console.log(socket.userId  + \" deleted.\" );\n                        // remove from humanlist\n                        for (let i = humanList.length - 1; i >= 0; i--) {\n                            if (humanList[i].userId === socket.userId) {\n\n                                humanList.splice(i, 1);\n                                break;\n                            }\n                        }\n                    }\n                }\n                catch(e){\n                    console.log(\"Disconnect error \" + e);\n                }\n\n                socket.subscribed = false; //why isn't the socket removed\n\n            });\n        });\n\n\n\n        /***\n         * Sends a client query to do the client side operation\n         * @param {string} userId\n         * @param {string} room\n         * @param {string} requestStr\n         * @param {Object} data\n         * @param {function} callback\n         */\n        let askHuman = function (userId, room, requestStr, data, callback){\n            let roomMate = humanList.find(function(human){\n                return(human.userId !== userId && human.room === room);\n            }); //returns the first match\n\n            console.log(\"roommate is \" + roomMate);\n\n\n            if(roomMate != null) {\n                let clientSocket = io.sockets.connected[roomMate.socketId];\n\n                clientSocket.emit(requestStr, data, function(val){\n\n                    console.log(requestStr);\n                    console.log(userId);\n                    console.log(room);\n\n                    if(callback) callback(val);\n                });\n            }\n            else\n            if(callback) callback();\n        };\n\n\n        /***\n         *  Listens to requests from the browser client\n         * @param {Object} socket\n         */\n        let listenToHumanRequests = function(socket){\n\n            socket.on('getDate',  function(msg, callback){\n                callback(+(new Date));\n                //relay the message to agents\n                io.in(socket.room).emit('message', msg);\n\n            });\n\n            socket.on('subscribeHuman', function (data) {\n                socket.userId = data.userId;\n                // console.log(\"Human \"+ socket.id  + \"'s userId is \" + socket.userId );\n                socket.room = data.room;\n                socket.userName = data.userName;\n                socket.subscribed = true;\n\n                socket.join(data.room);\n\n                data.socketId = socket.id;\n\n\n                let roomExists = false;\n                if(roomList.indexOf(data.room) > -1)\n                    roomExists = true;\n\n\n                roomList.push(data.room);\n\n\n\n                humanList.push({room:data.room, userId: data.userId, socketId: data.socketId});\n\n\n                console.log(\"human \" + data.userId +  \" subscribed  to room \" + data.room + \" with socket \" + socket.id);\n\n\n                // noinspection Annotator\n                model.subscribe('documents', function () {\n                    let pageDoc = model.at('documents.' + data.room);\n                    let docPath = 'documents.' + data.room;\n                    let cy = model.at((docPath + '.cy'));\n                    let pysb = model.at((docPath + '.pysb'));\n                    let history = model.at((docPath + '.history'));\n                    let undoIndex = model.at((docPath + '.undoIndex'));\n\n                    let images = model.at((docPath + '.images'));\n\n                    let users = model.at((docPath + '.users'));//user lists with names and color codes\n                    let userIds = model.at((docPath + '.userIds')); //used for keeping a list of subscribed users\n                    let messages = model.at((docPath + '.messages'));\n                    let provenance = model.at((docPath + '.provenance'));\n                    let pcQuery = model.at((docPath + '.pcQuery'));\n\n                    let noTrips = model.at((docPath + '.noTrips'));\n                    let sampleSentences = model.at((docPath + '.sampleSentences'));\n\n                    pageDoc.subscribe(function () {\n                        pysb.subscribe(function () {\n                        });\n\n                        cy.subscribe(function () {\n                        });\n\n                        history.subscribe(function () {\n                        });\n\n                        undoIndex.subscribe(function () {\n                        });\n\n\n                        images.subscribe(function () {\n                        });\n\n                        messages.subscribe(function () {\n                        });\n\n                        provenance.subscribe(function(){\n                        });\n\n                        pcQuery.subscribe(function(){\n                        });\n\n\n                        noTrips.subscribe(function(){\n                        });\n\n                        sampleSentences.subscribe(function(){\n                        });\n                        users.subscribe(function () {\n                            let ModelManager = require(\"../public/collaborative-app/js/modelManager.js\");\n\n                            modelManagerList[data.room] = new ModelManager(model, data.room);\n\n\n\n                            //Add the user explicitly here\n                            modelManagerList[data.room].addUser(data.userId, data.userName);\n                            //modelManagerList[data.room].setName(data.userId, data.userName); done up\n\n                            model.set((docPath + '.noTrips'), (process.argv.length > 2) && (process.argv[2].toUpperCase().indexOf(\"TRIPS\") > -1));\n\n\n                            if(!roomExists) //read this once for each room.\n                                model.set((docPath + '.sampleSentences'), sampleSentencesJson);\n\n\n                            userIds.subscribe(function () {\n                                //if human is the first to connect to the room clean all the previously connected userids\n                                if(humanList.length <=1)\n                                    userIds.set([data.userId]);\n                            });\n\n                        });\n                    });\n\n                    model.on('all', (docPath + '.pysb.*.indraSif'), function (cyId, op, val) {\n                        tripsGeneralInterfaceInstance.updateIndraSif(cyId, val);\n                    });\n                    //Notify agents of model changes\n                    model.on('insert', (docPath + '.history.**'), function (id, cmdInd) {\n                            if (socket.subscribed) { //humans are connected through sockets as well,check userType to prevent notifying twice\n                                let cmd = model.get(docPath + '.history.' + cmdInd);\n                                //console.log(cmd.opName);\n                                io.in(socket.room).emit('operation', cmd);\n                            }\n                        }\n                    );\n\n                    // //To send the message to computer agents\n                    model.on('all', (docPath + '.messages.**'), function (id, op, msg) {\n\n                        //it means message is newly inserted\n                        if (!id) {\n                            for (let att in msg) {\n                                if (msg.hasOwnProperty(att))\n                                    msg = msg[att];\n                            }\n                        }\n\n\n                    });\n\n                    //Send image file to computer agents\n                    model.on('insert', (docPath + '.images.*'), function (op, id, data) {\n                        if (socket.subscribed)\n                            io.in(socket.room).emit('imageFile', data.img);\n                    });\n\n                    //queryData is the element in the array\n                    model.on('insert', (docPath + '.pcQuery'), function( ind, queryData){\n\n                        if(ind >= 0 ) {\n\n                            request(queryData[0].url, function (error, response, body) {\n\n                                if (error) {\n                                    console.log(error);\n                                }\n                                else { //only open the window if a proper response is returned\n\n                                    if (response.statusCode === 200) {\n                                        model.set(docPath + '.pcQuery.' + ind + '.graph', body);\n                                    }\n                                }\n                            });\n                        }\n                    });\n\n                });\n\n            });\n\n\n            /***\n             * Reset Clic conversation and the BA\n             */\n            socket.on('resetConversationRequest', function(){\n                let p = new Promise((resolve) => {\n                    if(tripsGeneralInterfaceInstance && tripsGeneralInterfaceInstance.isConnectedToTrips())\n                        resolve(\"success\");\n                });\n                p.then(() => {\n                    tripsGeneralInterfaceInstance.cleanModel(true);\n                });\n\n                //Send this to agents listening to conversations,  such as Clare\n                io.in(socket.room).emit(\"conversationReset\");\n\n\n            });\n\n\n        };\n\n\n        /***\n         * Listens to requests sent through the socket through agent API\n         * @param {Object} socket used for socket disconnections\n         */\n        let listenToAgentRequests = function(socket){\n\n            socket.on('subscribeAgent', function (data, callback) {\n                socket.userId = data.userId;\n                socket.room = data.room;\n                socket.subscribed = true;\n                socket.userName = data.userName;\n\n                socket.join(data.room);\n\n                data.socketId = socket.id;\n\n                try {\n                    model.subscribe('documents', function () {\n                        let pageDoc = model.at('documents.' + data.room);\n                        let docPath = 'documents.' + data.room;\n                        let cy = model.at((docPath + '.cy'));\n                        let pysb = model.at((docPath + '.pysb'));\n                        let history = model.at((docPath + '.history'));\n                        let undoIndex = model.at((docPath + '.undoIndex'));\n\n                        let images = model.at((docPath + '.images'));\n\n\n                        let users = model.at((docPath + '.users'));//user lists with names and color codes\n                        let userIds = model.at((docPath + '.userIds')); //used for keeping a list of subscribed users\n                        let messages = model.at((docPath + '.messages'));\n                        let provenance = model.at((docPath + '.provenance'));\n                        let pcQuery = model.at((docPath + '.pcQuery'));\n                        let noTrips = model.at((docPath + '.noTrips'));\n                        let sampleSentences = model.at((docPath + '.sampleSentences'));\n\n                        if(!data.room)\n                            return;\n                        try {\n                            pageDoc.subscribe(function () {\n                                pysb.subscribe(function () {\n                                });\n                                cy.subscribe(function () {\n                                });\n                                history.subscribe(function () {\n                                });\n                                undoIndex.subscribe(function () {\n                                });\n\n                                images.subscribe(function () {\n                                });\n                                messages.subscribe(function () {\n                                });\n\n                                provenance.subscribe(function () {\n                                });\n\n                                pcQuery.subscribe(function () {\n                                });\n\n                                noTrips.subscribe(function () {\n                                });\n\n                                sampleSentences.subscribe(function(){\n                                });\n\n                                userIds.subscribe(function () {\n                                    let userIdsList = userIds.get();\n                                    if (!userIdsList || userIdsList.indexOf(data.userId) < 0) {\n                                        userIds.push(data.userId);\n                                    }\n                                });\n\n                                users.subscribe(function () {\n                                    // users.set(data.userId, {name: data.userName, colorCode: data.colorCode});\n                                    // modelManagerList[data.room].setName(data.userId, data.userName);\n                                    modelManagerList[data.room].addUser(data.userId, data.userName, data.colorCode);\n                                    //console.log(\"agent subscribed to room: \" + data.room);\n                                    console.log(\"agent \" + data.userId +  \" subscribed  to room \" + data.room + \" with socket \" + socket.id);\n                                });\n                            });\n                        }\n                        catch(e) {\n                            console.log(\"Client not connected\");\n                        }\n                    });\n                }\n                catch(e){\n                    console.log(\"Model subscription unsuccessful\");\n                }\n\n                if(callback) callback();\n\n            });\n\n            socket.on('agentActiveRoomsRequest', function( callback){\n                callback(roomList);\n            });\n\n            socket.on('agentCurrentRoomRequest', function( callback){\n                callback(roomList[roomList.length - 1]);\n            });\n\n\n            socket.on('agentUndoRequest', function(data, callback){ //from computer agent\n                try {\n                    modelManagerList[data.room].undoCommand();\n                    //we can wait here until agent request is performed\n                    if(callback) callback(\"success\");\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n                }\n            });\n\n            socket.on('agentRedoRequest', function(data, callback){ //from computer agent\n                try {\n                    modelManagerList[data.room].redoCommand();\n                    if (callback) callback();\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n                }\n            });\n\n            socket.on('agentChangeNameRequest',function(data, callback){\n\n                try {\n                    modelManagerList[data.room].setName(data.userName);\n                    if (callback) callback();\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n\n                }\n            });\n\n            socket.on('agentRunLayoutRequest', function(data, callback){\n                askHuman(data.userId, data.room,  \"runLayout\", data, function(val){\n                    if (callback) callback(val);\n                });\n            });\n\n            socket.on('agentAlignRequest',function(data, callback){\n                askHuman(data.userId, data.room,  \"align\", data, function(val){\n                    if (callback) callback(val);\n                });\n            });\n\n\n            socket.on('agentMergeGraphRequest', function(data, callback){\n\n                let requestStr;\n                if(data.type === \"sbgn\")\n                    requestStr = \"mergeSbgn\";\n                else //default is json\n                    requestStr = \"mergeJsonWithCurrent\";\n\n                askHuman(data.userId, data.room,  requestStr, data, function(val){\n\n                    if (callback) callback(val);\n                });\n            });\n\n\n            socket.on('agentDisplaySbgnRequest', function(data, callback){\n\n                let requestStr = \"displaySbgn\";\n\n                askHuman(data.userId, data.room,  requestStr, data, function(val){\n\n                    if (callback) callback(val);\n                });\n            });\n\n            socket.on('agentDisplaySifRequest', function(data, callback){\n\n                let requestStr = \"displaySif\";\n\n\n                askHuman(data.userId, data.room,  requestStr, data, function(val){\n\n                    if (callback) callback(val);\n                });\n            });\n\n            socket.on('agentAddProvenanceRequest', function(data, callback){\n\n                let requestStr = \"addProvenance\";\n\n                askHuman(data.userId, data.room,  requestStr, data, function(val){\n\n\n\n                    if (callback) callback(val);\n                });\n            });\n\n            socket.on('agentUpdateSampleSentencesRequest', function(data,  callback){\n                let docPath = 'documents.' + data.room;\n                model.set((docPath + '.sampleSentences'), data.json);\n                if(callback) callback(\"success\");\n            });\n\n\n            //done via sockets as data conversion to json is done in menu-functions\n            socket.on('agentLoadFileRequest',  function(data, callback){\n                if(data.fileType.indexOf(\".owl\") > -1){\n                    request.post({\n                        url: \"http://localhost:8080/SBGNConverterServlet\",\n                        headers: responseHeaders,\n                        form: {reqType: \"sbgn\", content: data.param}\n                    }, function(error, response){\n\n                        if (error) {\n                            console.log(error);\n                        }\n                        else  {\n                            if(response.statusCode === 200) {\n                                askHuman(data.userId, data.room,  \"loadFile\", data, function(val){\n                                    if (callback) callback(val);\n                                });\n                            }\n\n                        }\n                    });\n                }\n                else\n                    askHuman(data.userId, data.room,  \"loadFile\", data, function(val){\n                        if (callback) callback(val);\n                    });\n\n                if(callback) callback();\n            });\n\n\n            socket.on('agentCleanModelRequest',  function(data, callback){\n                askHuman(data.userId, data.room,  \"cleanModel\", data, function(val){\n                    if (callback) callback(val);\n                });\n            });\n\n            socket.on('agentUpdateHighlightStatusRequest', function(data, callback){\n                askHuman(data.userId, data.room,  \"updateHighlight\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n            socket.on('agentUpdateVisibilityStatusRequest', function(data, callback){\n                askHuman(data.userId, data.room,  \"updateVisibility\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n            socket.on('agentUpdateExpandCollapseStatusRequest', function(data, callback){\n                askHuman(data.userId, data.room,  \"updateExpandCollapse\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n            socket.on('agentAddCompoundRequest', function(data, callback) {\n                askHuman(data.userId, data.room,  \"addCompound\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n            socket.on('agentCloneRequest', function(data, callback) {\n                askHuman(data.userId, data.room,  \"clone\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n            socket.on('agentSearchByLabelRequest', function(data, callback) {\n                askHuman(data.userId, data.room,  \"searchByLabel\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n            socket.on('agentChangeLockStateRequest', function(data, callback) {\n                askHuman(data.userId, data.room,  \"changeLockState\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n\n            socket.on('agentGetNodeRequest',function(data, callback){\n                try {\n                    let node = modelManagerList[data.room].getModelNode(data.id, data.cyId);\n                    if (callback) callback(node);\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n                }\n            });\n\n            socket.on('agentGetEdgeRequest',function(data, callback){\n                try {\n                    let edge = modelManagerList[data.room].getModelEdge(data.id, data.cyId);\n                    if (callback) callback(edge);\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n                }\n            });\n\n            socket.on('agentAddNodeRequest',function(data, callback){\n                //Ask a human client to perform this operation as we don't know the node id\n                askHuman(data.userId, data.room, \"addNode\", data,  function(nodeId){\n                    if (callback) callback(nodeId);\n                });\n            });\n\n            socket.on('agentAddEdgeRequest',function(data,  callback){\n                try {\n                    //we know the edge id so add directly to the model\n                    //second parameter needs to have a data field\n                    modelManagerList[data.room].addModelEdge(data.id,  data.cyId, data, \"me\");\n                    if (callback) callback(data.id);\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n                }\n            });\n\n            socket.on('agentDeleteElesRequest',function(data, callback){\n                askHuman(data.userId, data.room,  \"deleteEles\", data, function(val){\n                    if(callback) callback(val);\n                });\n            });\n\n            socket.on('agentMoveNodeRequest',function(data, callback){\n                try {\n                    let status = modelManagerList[data.room].changeModelNodeAttribute(\"position\", data.id, data.cyId,  data.pos);\n                    if (callback) callback(status);\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n                }\n            });\n\n            socket.on('agentChangeNodeAttributeRequest', function(data, callback){\n                try {\n                    let status = modelManagerList[data.room].changeModelNodeAttribute(data.attStr, data.id,data.cyId, data.attVal);\n                    if (callback) callback(status);\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n\n                }\n\n            });\n            socket.on('agentChangeEdgeAttributeRequest', function(data, callback){\n                try {\n                    let status = modelManagerList[data.room].changeModelEdgeAttribute(data.attStr, data.id,data.cyId, data.attVal);\n                    if (callback) callback(status);\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n\n                }\n            });\n\n            //Agent wants the history of operations\n            socket.on('agentOperationHistoryRequest', function(data, callback){ //\n                // from computer agent\n                let docPath = 'documents.' + data.room;\n                callback(model.get(docPath + '.history'))\n            });\n\n            //Agent wants the history of chat messages\n            socket.on('agentChatHistoryRequest', function(data, callback){ //from computer agent\n                let messagesQuery = model.query('messages', {\n                    room: data.room\n                });\n                messagesQuery.fetch( function(err){\n                    if(err){\n                        console.log(err);\n                        callback(\"error\");\n                    }\n                    else\n                        callback(messagesQuery.get());\n                });\n            });\n\n            socket.on('agentSendImageRequest', function(data, callback){\n                try {\n\n                    let status = modelManagerList[socket.room].addImage(data);\n                    if (callback) callback(status);\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n\n                }\n\n            });\n\n\n\n            socket.on('agentMessage', function( msg, callback){\n\n                msg.date = +(new Date);\n                msg.userName = socket.userName;\n\n                try {\n                    model.add('documents.' + msg.room + '.messages', msg);\n                    //io.in(socket.room).emit(\"message\", msg);\n\n                                        if (callback) callback(\"success\");\n                }\n                catch(e){\n                    console.log(\"Connection error \" + e);\n                }\n            });\n\n            //Agent wants the model\n            socket.on('agentPageDocRequest', function(data, callback){ //from computer agent\n                try {\n\n                    let pageDoc = modelManagerList[data.room].getPageDoc();\n                    callback(pageDoc);\n\n                }\n                catch(e){\n                    console.log(e);\n                    if(callback) callback();\n\n                }\n            });\n\n            //For testing purposes only\n            socket.on('agentManualDisconnectRequest', function(data, callback){\n                try {\n\n                    //do not delete socket but remove agent from the list of users\n                    modelManagerList[data.room].deleteUserId(data.userId);\n                    socket.subscribed = false; //why isn't the socket removed\n                    if(callback) callback(\"success\");\n                }\n                catch(e){\n                    console.log(\"Disconnect error \" + e);\n                    if(callback) callback();\n                }\n\n\n            });\n\n\n            socket.on('agentRemoveBobRequest', function(data){\n                if(tripsGeneralInterfaceInstance ) {\n                 askHuman(data.userId, data.room,  \"removeBob\", \"\",function(){\n                        tripsGeneralInterfaceInstance.disconnect();\n\n                    });\n                }\n            });\n\n            socket.on('agentSendTripsRequestRequest', function(data){\n                if(tripsGeneralInterfaceInstance ) {\n                    tripsGeneralInterfaceInstance.sendTripsRequest(data.request, data.data);\n                }\n\n            });\n            socket.on('agentConnectToTripsRequest', function(param){\n                console.log(\"Agent trips connection request\");\n                if(!tripsGeneralInterfaceInstance || !tripsGeneralInterfaceInstance.isConnectedToTrips()) {\n                    let TripsGeneralInterfaceModule = require('./trips/TripsGeneralInterfaceModule.js');\n                    tripsGeneralInterfaceInstance = new TripsGeneralInterfaceModule(param.userId, param.userName, socket, model, askHuman);\n                }\n                else {//already there is an instance\n                    tripsGeneralInterfaceInstance.updateWebSocket(socket);\n                    tripsGeneralInterfaceInstance.updateListeners(socket);\n                }\n                //connect vismodule when the trips agent is connected\n                if(!tripsVisualizationInterfaceInstance || !tripsVisualizationInterfaceInstance.isConnectedToTrips()) {\n                    let tripsVisualizationInterfaceModule = require('./trips/TripsVisualizationInterfaceModule.js');\n                    tripsVisualizationInterfaceInstance = new tripsVisualizationInterfaceModule(param.userId, param.userName, socket, model, askHuman);\n                }\n                else {\n                    tripsVisualizationInterfaceInstance.updateWebSocket(socket);\n                }\n            });\n\n        };\n\n        /***\n         * Requests sent to other servers\n         * @param socket\n         */\n        let listenToQueryRequests = function(socket){\n            socket.on('REACHQuery',  function(outputType, msg, callback){\n                let queryParams = \"text=\" + msg + \"&output=\" + outputType; //fries\";\n\n                request({\n                    url: 'http://agathon.sista.arizona.edu:8080/odinweb/api/text', //URL to hit\n                    // qs: {from: 'blog example', time: +new Date()}, //Query string data\n                    method: 'POST',\n                    headers: responseHeaders,\n                    form: queryParams\n\n                }, function (error, response, body) {\n\n                    if (error) {\n\n                        console.log(error);\n                    } else {\n\n\n                        if(response.statusCode === 200) {\n                            if(callback) callback(body);\n                            io.in(socket.room).emit(\"REACHResult\", body);\n\n                        }\n\n\n                    }\n                });\n            });\n\n            socket.on('pdfConvertRequest', function(binData, callback){\n\n                let pdf2Text = require('pdf2text');\n\n                pdf2Text(binData).then(function(pages) {\n                    if(callback) callback(pages);\n                });\n\n            });\n\n            socket.on('BioGeneQuery', function (queryParams, callback) {\n\n                request({\n                    url: 'http://cbio.mskcc.org/biogene/retrieve.do', //URL to hit\n                    // qs: {from: 'blog example', time: +new Date()}, //Query string data\n                    method: 'POST',\n                    headers: responseHeaders,\n                    form: queryParams\n\n                }, function (error, response, body) {\n\n                    if (error) {\n\n                        console.log(error);\n                    } else {\n\n                        callback(body);\n                        //socket.emit(\"BioGeneResult\",body);\n                    }\n                });\n            });\n\n            socket.on('AgentPCQueryRequest', function(queryData, callback){\n\n                request(queryData.url , function (error, response, body) {\n\n                    if (error) {\n                        console.log(error);\n                    } else  { //only open the window if a proper response is returned\n\n                        if(response.statusCode === 200) {\n                            if(callback)\n                                callback(body);\n                            else\n                                socket.emit(\"PCQueryResult\", {graph:body, type:queryData.type});\n                        }\n                        else{\n                            if(callback)\n                                callback();\n                            socket.emit(\"PCQueryResult\", \"error\");\n                        }\n                    }\n                });\n            });\n\n            socket.on('AgentMergePCQueryRequest', function(queryData, callback){\n\n                request(queryData.url , function (error, response, body) {\n\n\n                    if (error) {\n                        console.log(error);\n                    } else  { //only open the window if a proper response is returned\n\n                        if(response.statusCode === 200) {\n                            askHuman(queryData.userId, queryData.room,  \"mergeSbgn\", body, function(val){\n                                if (callback) callback(val);\n                            });\n\n                        }\n                        else{\n                            if(callback) callback();\n\n                        }\n\n                    }\n                });\n\n            });\n\n            socket.on('BioPAXRequest', function(fileContent, reqType, callback){\n\n                request({\n                    url: \"http://causalpath.org:8080/paxtools/PaxtoolsServlet\",\n                    // url: \"http://localhost:8081/PaxtoolsServlet\",\n                    method:\"POST\",\n                    headers: responseHeaders,\n                    form: {reqType: reqType, content: fileContent}\n                }, function (error, response, body) {\n\n                    console.log(response.statusCode);\n                    if (error) {\n                        console.log(error);\n                    } else { //only open the window if a proper response is returned\n\n                        if (response.statusCode === 200) {\n\n                            if(reqType === \"partialBiopax\"){\n                                io.in(socket.room).emit(\"processToIntegrate\", body);\n                            }\n\n                            if(reqType === \"biopax\"){\n                                if(tripsGeneralInterfaceInstance && tripsGeneralInterfaceInstance.isConnectedToTrips())\n                                    tripsGeneralInterfaceInstance.sendModelToTrips(body);\n                            }\n\n                            if(callback) {\n                                callback({graph: body});\n                            }\n                        }\n                        else {\n                            console.log(\"Paxtools Server Error \" + response.statusCode);\n                        }\n                    }\n                });\n            });\n\n        };\n    }\n}\n\nmodule.exports = ServerSideSocketListener;\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "readJsonFile",
    "memberof": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js~readJsonFile",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js",
    "importStyle": null,
    "description": "Read the file to visualize and return its contents in callback",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": ": path+fileName"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "ServerSideSocketListener",
    "memberof": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js~ServerSideSocketListener",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js",
    "importStyle": "ServerSideSocketListener",
    "description": "Socket listener class. Listens to human client and agent socket requests",
    "lineNumber": 38,
    "interface": false
  },
  {
    "__docId__": 226,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js~ServerSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js~ServerSideSocketListener#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "IO"
        ],
        "spread": false,
        "optional": false,
        "name": "io",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "Shared model"
      }
    ]
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "_start",
    "memberof": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js~ServerSideSocketListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/serverSideSocketListener.js~ServerSideSocketListener#_start",
    "access": "private",
    "description": "",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "IO"
        ],
        "spread": false,
        "optional": false,
        "name": "io",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "Shared model"
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js",
    "content": "/**\n * Created by durupina on 5/17/17.\n * This is a Trips module to enable communication between trips and sbgnviz\n * Its role is to receive and decode messages and transfer them to all the clients\n * It handles general requests such as displaying, message sending and model building\n */\n\"use strict\";\nlet request = require('request'); //REST call over http/https\nlet KQML = require('./util/KQML/kqml.js');\nlet TripsInterfaceModule = require('./TripsInterfaceModule.js');\n\n/**\n * Class that handles general Trips requests\n */\n\nclass TripsGeneralInterfaceModule extends TripsInterfaceModule {\n\n    /**\n     *\n     * @param {string} agentId\n     * @param {string} agentName\n     * @param {WebSocket} socket Socket connection between the module and the agent --not server\n     * @param {Object} model\n     * @param {function} askHuman\n     */\n    constructor(agentId, agentName, socket, model, askHuman){\n\n        super('Sbgnviz-Interface-Agent', agentId, agentName, socket, model);\n\n        let self = this;\n\n        self.askHuman = askHuman;\n\n\n        setTimeout(() =>{\n\n            // self.tm.sendMsg({0: 'tell', content: ['start-conversation']});\n            self.tm.sendMsg({0: 'broadcast', content: ['tell','start-conversation']});\n            self.updateListeners();\n\n        }, 2000);\n\n    }\n\n    disconnect(){\n        super.disconnect();\n    }\n\n    /**\n     * When socket changes, update the listeners on that socket\n     */\n    updateListeners(){\n        let self = this;\n        self.socket.on('relayMessageToTripsRequest', (data) => {\n\n            let pattern = {0: 'tell', content: {0: 'started-speaking', mode: 'text', uttnum: data.uttNum, channel: 'Desktop', direction: 'input'}};\n            self.tm.sendMsg(pattern);\n\n            pattern = {0: 'tell', content: {0: 'stopped-speaking', mode: 'text', uttnum: data.uttNum, channel: 'Desktop', direction: 'input'}};\n            self.tm.sendMsg(pattern);\n\n            pattern = {0: 'tell', content: {0: 'word', 1: data.text, uttnum: data.uttNum, index: 1, channel: 'Desktop', direction: 'input'}};\n            self.tm.sendMsg(pattern);\n\n            pattern = {0: 'tell', content: {0: 'utterance', mode: 'text', uttnum: data.uttNum, text: data.text, channel: 'Desktop', direction: 'input'}};\n            self.tm.sendMsg(pattern);\n\n        });\n\n    }\n\n    /**\n     * Send the request in the given format\n     * @param {string} req\n     * @param {Object} data\n     */\n    sendTripsRequest(req, data){\n\n        let pattern = {0: 'request', content: {0: req, data: data}};\n        this.tm.sendMsg(pattern);\n\n    }\n\n    /**\n     * Handlers that listen to TRIPS requests and perform functions on the editor\n     */\n    setHandlers() {\n        //Listen to spoken sentences\n        let pattern = {0: 'tell', 1: '&key', content: ['spoken', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            let contentObj = KQML.keywordify(text.content);\n\n            if (contentObj) {\n                let msg = {userName: this.agentName, userId: this.agentId, room: this.room, date: +(new Date)};\n\n                msg.comment = this.trimDoubleQuotes(contentObj.what);\n\n                if (msg.comment) {\n\n                    this.model.add('documents.' + msg.room + '.messages', msg);\n                }\n           }\n\n        });\n\n\n        pattern = {0: 'tell', 1: '&key', content: ['display-pc-path', '.', '*']};\n        this.tm.addHandler(pattern,  (text) => {\n            this.displayPCPath(text);\n\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['display-pc-path', '.', '*']};\n        this.tm.addHandler(pattern,  (text) => {\n            this.displayPCPath(text);\n\n        });\n\n\n        pattern = {0: 'tell', 1: '&key', content: ['display-sbgn', '.', '*']};\n        this.tm.addHandler(pattern,  (text) => {\n            console.log(\"display sbgn request\");\n            this.displaySbgn(text);\n\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['display-sbgn', '.', '*']};\n        this.tm.addHandler(pattern,  (text) => {\n            console.log(\"display sbgn request\");\n            this.displaySbgn(text);\n        });\n\n\n        pattern = {0: 'tell', 1: '&key', content: ['display-sif', '.', '*']};\n        this.tm.addHandler(pattern,  (text) => {\n            this.displaySif(text);\n\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['display-sif', '.', '*']};\n        this.tm.addHandler(pattern,  (text) => {\n            this.displaySif(text);\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['open-query-window', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.openQueryWindow(text);\n        });\n\n        pattern = {0: 'tell', 1: '&key', content: ['open-query-window', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.openQueryWindow(text);\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['clean-model', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.cleanModel(text);\n        });\n\n        pattern = {0: 'tell', 1: '&key', content: ['clean-model', '.', '*']};\n        this.tm.addHandler(pattern, (text) =>{\n            this.cleanModel(text);\n        });\n\n        pattern = {0: 'tell', 1: '&key', content: ['display-image', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.displayImage(text);\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['display-image', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.displayImage(text);\n        });\n\n\n        pattern = {0: 'tell', 1: '&key', content: ['add-provenance', '.', '*']};\n        this.tm.addHandler(pattern, (html) => {\n            this.addProvenance(html);\n\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['add-provenance', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.addProvenance(text);\n\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['display-oncoprint', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.displayOncoprint(text);\n\n        });\n\n        pattern = {0: 'tell', 1: '&key', content: ['display-oncoprint', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n            this.displayOncoprint(text);\n\n        });\n\n        //Listen to model json request from MRA\n        // pattern = {0: 'reply', 1: '&key', content: ['success', '.', '*'], sender: 'MRA'};\n        //\n        // self.tm.addHandler(pattern,  (text)=> { //listen to requests\n        //     let contentObj = KQML.keywordify(text.content);\n        //\n        //\n        //     if (contentObj.modelId) {\n        //\n        //         self.modelId = contentObj.modelId;\n        //         self.model.set('documents.' + self.room + '.pysb.modelId', self.modelId);\n        //         self.model.set('documents.' + self.room + '.pysb.model', contentObj.model);\n        //\n        //\n        //         console.log(\"New model started: \" + self.modelId);\n        //\n        //         //console.log(self.model.get('documents.' + socket.room + '.pysb.model'));\n        //     }\n        // });\n    }\n\n    /**\n     * Asks a browser client to display an image\n     * @param {Object} text {content {Object}}\n      */\n    displayImage(text) {\n        let self = this;\n        let contentObj = KQML.keywordify(text.content);\n\n        if (contentObj) {\n            let imageTabMap = {\n                'reactionnetwork': {ind: 1, label: 'RXN'},\n                'contactmap': {ind: 2, label: 'CM'},\n                'influencemap': {ind: 3, label: 'IM'},\n                'simulation': {ind: 4, label: 'SIM'}\n            };\n\n\n            let imgPath = this.trimDoubleQuotes(contentObj.path);\n            try {\n                let fs = require('fs');\n                fs.readFile(imgPath,  (error, fileContent) => {\n                    if (error) {\n                        console.log('exec error: ' + error);\n                        return;\n                    }\n\n                    let imgContent = 'data:image/png;base64,' + fileContent.toString('base64');\n\n\n                    let imgData = {\n                        img: imgContent,\n                        tabIndex: imageTabMap[contentObj.type].ind,\n                        tabLabel: imageTabMap[contentObj.type].label,\n                        fileName: imgPath\n                    };\n\n\n                    //The socket connection is between the interface and the agent, so we cannot directly emit messages\n                    //we must ask the client with the browser to do it for us\n                    self.askHuman(self.agentId, self.room, \"addImage\", imgData, (val)  => {\n                        console.log(val);\n                      // self.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n                    });\n\n                });\n            }\n            catch (error) {\n                console.log(\"Error \" + error);\n            }\n\n        }\n    }\n\n    /**\n     * Asks a browser client to open a new PC tab\n     * @param {string} text\n     */\n    displayPCPath(text) {\n        let self = this;\n\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n\n            this.getTermName(contentObj.source, (source) => {\n                this.getTermName(contentObj.target, (target) => {\n\n\n                    self.callPCQuery(\"pathsbetween?directed=false\", source, target, 1, (result) => {\n\n\n                        if (result == \"success\")\n                            self.tm.replyToMsg(text, {0: 'reply', content: {0: 'success', type:\"pathsbetween\", limit: 1}});\n                        else if (result === \"failure\")\n                            self.tm.replyToMsg(text, {0: 'reply', content: {0: 'failure'}});\n                        else {\n                            console.log(\"looking at limit = 2\");\n                            self.callPCQuery(\"pathsbetween?directed=false\", source, target, 2, (result2) => {\n                                if (result2 == \"success\")\n                                    self.tm.replyToMsg(text, {0: 'reply', content: {0: 'success', type:\"pathsbetween\", limit:2}});\n                                else if (result2 === \"failure\")\n                                    self.tm.replyToMsg(text, {0: 'reply', content: {0: 'failure'}});\n                                else {\n\n                                    console.log(\"looking at neighborhood\");\n                                    self.callPCQuery(\"neighborhood?direction=BOTHSTREAM\", source, target, 1, (result3) => {\n\n                                        console.log(result3);\n                                        if (result3 == \"success\")\n                                            self.tm.replyToMsg(text, {0: 'reply', content: {0: 'success', type:\"neighborhood\", limit:1}});\n                                        else\n                                            self.tm.replyToMsg(text, {0: 'reply', content: {0: 'failure'}});\n                                    });\n                                }\n                            });\n                        }\n\n\n                    });\n                });\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {string} queryType\n     * @param {string} source\n     * @param {string} target\n     * @param {number} limit Path length limit\n     * @param {function} callback\n     */\n    callPCQuery(queryType, source, target, limit, callback){\n        let self = this;\n        let responseHeaders = {\n            \"access-control-allow-origin\": \"*\",\n            \"access-control-allow-methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n            \"access-control-allow-headers\": \"content-type, accept\",\n            // \"access-control-max-age\": 10,\n            // \"Content-Type\": \"application/json\"\n        };\n\n        let url = 'https://www.pathwaycommons.org/sifgraph/v1/'+ queryType + '&limit=' + limit + '&source=' +  source + \"&source=\" + target;\n\n        console.log(url);\n        request({\n            url: url,\n            method: 'GET',\n            headers: responseHeaders,\n\n        },  (error, response, body) => {\n\n            if (error) {\n                callback(\"failure\")\n            }\n            else {\n                if (response.statusCode === 200) {\n                    if(body.length == 0)\n                        callback(\"\");\n                    else {\n                        self.askHuman(self.agentId, self.room, \"openPCQueryWindow\", {graph: body, type: 'sif'}, (val) => {\n                            console.log(val);\n                            callback(\"success\");\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Open a new tab to show query result\n     * @param {string} text\n     */\n    openQueryWindow(text){\n        let self = this;\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n\n            let sbgnModel = contentObj.graph;\n\n\n            sbgnModel = this.trimDoubleQuotes(sbgnModel);\n\n            sbgnModel = sbgnModel.replace(/(\\\\\")/g, '\"');\n            sbgnModel = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\" + sbgnModel;\n\n            //The socket connection is between the interface and the agent, so we cannot directly emit messages\n            //we must ask the client with the browser to do it for us\n            self.askHuman(self.agentId, self.room, \"openPCQueryWindow\", {graph: sbgnModel},  (val) => {\n                console.log(val);\n                // self.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n            });\n        }\n\n    }\n\n    /**\n     * Display a graph in sif format\n     * @param {string} text\n     */\n    displaySif(text) {\n\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n\n            let sifModel = contentObj.sif;\n\n\n            sifModel = this.trimDoubleQuotes(sifModel);\n\n            sifModel = sifModel.replace(/(\\\\\")/g, '\"');\n\n\n            let cyId = this.trimDoubleQuotes(contentObj.cyid);\n            cyId = cyId.replace(/(\\\\\")/g, '\"');\n\n\n            //The socket connection is between the interface and the agent, so we cannot directly emit messages\n            //we must ask the client with the browser to do it for us\n            //TODO: get the cyId from TRIPS\n            this.askHuman(this.agentId, this.room, \"displaySif\", {sif: sifModel, cyId: cyId || \"0\"},  (val) => {\n                console.log(val);\n            });\n        }\n    }\n\n    /**\n     * Display a graph in sbgn format\n     * @param {string} text\n     */\n    displaySbgn(text) {\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n\n            let sbgnModel = contentObj.sbgn;\n\n            sbgnModel = this.trimDoubleQuotes(sbgnModel);\n\n            sbgnModel = sbgnModel.replace(/(\\\\\")/g, '\"');\n            sbgnModel = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\" + sbgnModel;\n\n\n            let cyId = this.trimDoubleQuotes(contentObj.cyid);\n            cyId = cyId.replace(/(\\\\\")/g, '\"');\n\n            //The socket connection is between the interface and the agent, so we cannot directly emit messages\n            //we must ask the client with the browser to do it for us\n            //TODO: get the cyId from TRIPS\n            this.askHuman(this.agentId, this.room, \"displaySbgn\", {sbgn: sbgnModel, cyId: cyId || \"0\"},  (val) => {\n                console.log(val);\n            // this.askHuman(this.agentId, this.room, \"mergeSbgn\", {graph: sbgnModel,  type:'sbgn', cyId: contentObj.cyId || \"0\"},  () => {\n\n            // this.tm.replyToMsg(text, {0: 'reply', content: {das: 'success'}});\n            });\n        }\n    }\n\n    /**\n     * Display oncoprint result on the dedicated tab\n     * @param {string} text\n     */\n    displayOncoprint(text){\n\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n\n            let data = contentObj.data;\n\n            // data = data.replace(/[\\']/g, '\\\"');\n            data = data.replace(/’/g, \"'\");\n            data = data.replace(/'/g, '\"');\n            data = data.replace(/”/g, '\"');\n\n            data  =  data.substr(1, data.length - 2);\n\n            try {\n                let json = JSON.parse(data);\n                this.askHuman(this.agentId, this.room, \"displayOncoprint\", json, (val) => {\n                    console.log(val);\n                });\n            }\n            catch(e) {\n                console.log(e);\n            }\n        }\n    }\n\n\n    /**\n     * Clean model request comes from another agent\n     * @param {boolean} shouldCleanProvenance\n     */\n    cleanModel(shouldCleanProvenance){\n        let responseHeaders = {\n            \"access-control-allow-origin\": \"*\",\n            \"access-control-allow-methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n            \"access-control-allow-headers\": \"content-type, accept\",\n            \"access-control-max-age\": 10,\n            \"Content-Type\": \"application/json\"\n        };\n\n        //The socket connection is between the interface and the agent, so we cannot directly emit messages\n        //we must ask the client with the browser to do it for us\n        //Reset through clic\n        request({\n            url: 'http://localhost:8000/clic/initiate-reset', //URL to hit\n            headers: responseHeaders,\n            form: ''\n\n        },  (error) => {\n\n            if (error) {\n                console.log(error);\n            }\n        });\n\n        //this will clean the image tabs and sbgn model\n        this.askHuman(this.agentId, this.room, \"cleanModel\", shouldCleanProvenance,   (val) =>{\n            console.log(val);\n        });\n\n\n        this.sendResetCausalityRequest();\n    }\n\n\n    sendResetCausalityRequest(){\n        let pattern = {0: 'request', content: {0: 'RESET-CAUSALITY-INDICES'}};\n        this.tm.sendMsg(pattern);\n    }\n\n\n    /***\n     * Extra messages that agents send\n     * @param {string} text\n     */\n    addProvenance(text){\n\n        let contentObj = KQML.keywordify(text.content);\n        if(contentObj.html)\n            contentObj.html = this.trimDoubleQuotes(contentObj.html);\n        if(contentObj.pc)\n            contentObj.pc = this.trimDoubleQuotes(contentObj.pc);\n\n        this.askHuman(this.agentId, this.room, \"addProvenance\", contentObj);\n\n    }\n}\n\n\nmodule.exports = TripsGeneralInterfaceModule;\n\n\n\n\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "TripsGeneralInterfaceModule",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js",
    "importStyle": "TripsGeneralInterfaceModule",
    "description": "Class that handles general Trips requests",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule"
    ]
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "agentId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "agentName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WebSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket connection between the module and the agent --not server"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "askHuman",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "disconnect",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "updateListeners",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#updateListeners",
    "access": "public",
    "description": "When socket changes, update the listeners on that socket",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "sendTripsRequest",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#sendTripsRequest",
    "access": "public",
    "description": "Send the request in the given format",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "setHandlers",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#setHandlers",
    "access": "public",
    "description": "Handlers that listen to TRIPS requests and perform functions on the editor",
    "lineNumber": 87,
    "params": [],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "displayImage",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#displayImage",
    "access": "public",
    "description": "Asks a browser client to display an image",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "{content {Object}}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "displayPCPath",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#displayPCPath",
    "access": "public",
    "description": "Asks a browser client to open a new PC tab",
    "lineNumber": 278,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "callPCQuery",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#callPCQuery",
    "access": "public",
    "description": "",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "queryType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Path length limit"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "openQueryWindow",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#openQueryWindow",
    "access": "public",
    "description": "Open a new tab to show query result",
    "lineNumber": 374,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "displaySif",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#displaySif",
    "access": "public",
    "description": "Display a graph in sif format",
    "lineNumber": 401,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "displaySbgn",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#displaySbgn",
    "access": "public",
    "description": "Display a graph in sbgn format",
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "displayOncoprint",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#displayOncoprint",
    "access": "public",
    "description": "Display oncoprint result on the dedicated tab",
    "lineNumber": 462,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "cleanModel",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#cleanModel",
    "access": "public",
    "description": "Clean model request comes from another agent",
    "lineNumber": 493,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldCleanProvenance",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "sendResetCausalityRequest",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#sendResetCausalityRequest",
    "access": "public",
    "description": null,
    "lineNumber": 527,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "addProvenance",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsGeneralInterfaceModule.js~TripsGeneralInterfaceModule#addProvenance",
    "access": "public",
    "description": "Extra messages that agents send",
    "lineNumber": 537,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js",
    "content": "/**\n * Created by durupina on 5/17/17.\n * This is a Trips module to enable communication between trips and sbgnviz\n */\n\n\"use strict\";\nlet KQML = require('./util/KQML/kqml.js');\n\n/**\n * Base Trips Interface class\n */\nclass TripsInterfaceModule {\n\n    /**\n     *\n     * @param {string} tmName Trips module's name\n     * @param {string} agentId\n     * @param {string} agentName\n     * @param {WebSocket} socket\n     * @param {Object} model\n     * @param {function} askHuman\n     */\n    constructor(tmName, agentId, agentName, socket, model, askHuman) {\n\n\n        var tripsModule = require('./tripsModule.js');\n        this.tm = new tripsModule(['-name', tmName]);\n\n        var self = this;\n\n        this.agentId = agentId;\n        this.agentName = agentName;\n        this.model = model;\n        this.modelId;\n        this.socket = socket;\n        this.room  = socket.room;\n\n        if(!socket.room){\n            console.log(\"Uncreated document error.\");\n            return;\n        }\n\n        self.tm.init( () => {\n            //setHandlers must be implemented for each Trips module that derives from this class\n            self.setHandlers(askHuman);\n            self.tm.run();\n        });\n\n\n        //Wait for a little while before testing connection\n        setTimeout( () => {\n            //Let user know\n            if (!self.isConnectedToTrips()) {\n                var msg = {userName: agentName, userId: agentId, room: self.room, date: +(new Date)};\n\n                msg.comment = \"TRIPS connection cannot be established.\";\n\n                model.add('documents.' + msg.room + '.messages', msg);\n\n            }\n        }, 3000);\n\n\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isConnectedToTrips() {\n\n        if(this.tm && this.tm.socket && this.tm.socket.stream && this.tm.socket.stream.readable )\n            return true;\n\n        return false;\n\n    }\n\n    /***\n     * Gets the standardized name of the gene from an EKB XML string\n     * by sending a request to sense prioritization agent\n     * @param {string} termStr : EKB XML string\n     * @param {function} callback : Called when sense prioritization agent returns an answer\n     */\n    getTermName(termStr, callback) {\n\n        let self = this;\n        this.tm.sendMsg({0: 'request', content: {0: 'CHOOSE-SENSE', 'ekb-term': termStr}});\n\n        let patternXml = {0: 'reply', 1: '&key', content: ['SUCCESS', '.', '*']};\n\n        self.tm.addHandler(patternXml,  (textXml) => {\n\n            if(textXml.content && textXml.content.length >= 2 && textXml.content[2].length > 0) {\n\n                let termNames = [];\n                for(let i = 0; i < textXml.content[2].length; i++) {\n                    let contentObj = KQML.keywordify(textXml.content[2][i]);\n                    let termName = this.trimDoubleQuotes(contentObj.name);\n                    termNames.push(termName);\n                }\n\n                if(termNames.length == 1 && callback)\n                    callback(termNames[0]);\n                else if(callback)\n                    callback(termNames);\n            }\n        });\n    }\n\n\n    /***\n     * When the client page is refreshed a new websocket is achieved\n     * Update the socket and its listeners\n     * @param {WebSocket} newSocket\n     */\n    updateWebSocket(newSocket) {\n\n        this.socket = newSocket;\n        this.room = newSocket.room;\n\n    }\n\n    disconnect(){\n        this.tm.disconnect();\n    }\n\n    /**\n     * Function to trim the extra double quotes coming from KQML\n     * @param {string} str String to process\n     * @returns {string}\n     */\n   trimDoubleQuotes(str){\n        if(str[0]!== '\"' || str[str.length-1]!== '\"')\n            return str;\n\n        let strTrimmed = str.slice(1, str.length -1);\n\n        return strTrimmed;\n\n    }\n\n}\n\n\n\nmodule.exports = TripsInterfaceModule;\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "TripsInterfaceModule",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js",
    "importStyle": "TripsInterfaceModule",
    "description": "Base Trips Interface class",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tmName",
        "description": "Trips module's name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "agentId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "agentName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WebSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "askHuman",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "tm",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#tm",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "agentId",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#agentId",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "agentName",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#agentName",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "model",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#model",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "socket",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#socket",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "room",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#room",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "isConnectedToTrips",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#isConnectedToTrips",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "getTermName",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#getTermName",
    "access": "public",
    "description": "Gets the standardized name of the gene from an EKB XML string\nby sending a request to sense prioritization agent",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "termStr",
        "description": ": EKB XML string"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ": Called when sense prioritization agent returns an answer"
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "updateWebSocket",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#updateWebSocket",
    "access": "public",
    "description": "When the client page is refreshed a new websocket is achieved\nUpdate the socket and its listeners",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "newSocket",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "disconnect",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "trimDoubleQuotes",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule#trimDoubleQuotes",
    "access": "public",
    "description": "Function to trim the extra double quotes coming from KQML",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "String to process"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js",
    "content": "/**\n * Created by durupina on 5/17/17.\n * This is a Trips module to enable communication between trips and causalityAgent\n * Its role is to receive and decode messages and transfer them to causalityAgent\n */\n\"use strict\";\nlet KQML = require('./util/KQML/kqml.js');\n\nlet TripsInterfaceModule = require('./TripsInterfaceModule.js');\n\n/**\n * Class to perform visual edits on the displayed graph\n */\nclass TripsVisualizationInterfaceModule extends TripsInterfaceModule{\n\n    /**\n     *\n     * @param {string} agentId\n     * @param {string} agentName\n     * @param {WebSocket} socket Socket connection between the module and the agent --not server\n     * @param {Object} model\n     * @param {function} askHuman\n     */\n    constructor (agentId, agentName, socket,  model, askHuman) {\n\n       super('Visualization-Interface-Agent',agentId, agentName, socket,  model);\n\n       this.askHuman = askHuman;\n\n       this.geneList = []; //list of molecules in the current pysb model\n    }\n\n    disconnect(){\n       super.disconnect();\n    }\n\n    /**\n     * Handlers that listen to TRIPS requests and perform edits\n     */\n    setHandlers() {\n        let self = this;\n\n        let pattern = {0: 'request', 1: '&key', content: ['move-gene', '.', '*']};\n        this.tm.addHandler(pattern,  (text) =>{\n            self.moveGene(text);\n            this.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['move-compartment', '.', '*']};\n        self.tm.addHandler(pattern,  (text) => {\n\n            self.moveCompartment(text);\n            this.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n        });\n        pattern = {0: 'request', 1: '&key', content: ['move-gene-stream', '.', '*']};\n        self.tm.addHandler(pattern,  (text) => {\n            self.moveGeneStream(text);\n            this.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n        });\n\n        pattern = {0: 'request', 1: '&key', content: ['highlight-gene-stream', '.', '*']};\n        self.tm.addHandler(pattern,  (text) => {\n            self.highlightGeneStream(text);\n            this.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n        });\n\n\n        pattern = {0: 'request', 1: '&key', content: ['put-into-compartment', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n\n            let genes;\n            let termStr =  text.content[2];\n\n            if(termStr.toLowerCase() === 'ont::all')\n                genes = \"ont::all\";\n            else\n                genes = this.extractGeneNamesFromEkb(termStr);\n\n            let compartment = this.trimDoubleQuotes(text.content[4]);\n            this.askHuman(this.agentId, this.room, \"addCellularLocation\", {genes: genes, compartment:compartment},  () => {\n                this.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n            });\n\n        });\n\n\n        pattern = {0: 'request', 1: '&key', content: ['put-out-of-compartment', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n\n            let genes;\n            let termStr =  text.content[2];\n\n            if(termStr.toLowerCase() === 'ont::all')\n                genes = \"ont::all\";\n            else\n                genes = this.extractGeneNamesFromEkb(termStr);\n\n            let compartment = this.trimDoubleQuotes(text.content[4]);\n            this.askHuman(this.agentId, this.room, \"moveOutOfCellularLocation\", {genes: genes, compartment:compartment},  () => {\n                this.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n            });\n\n\n\n        });\n\n\n        pattern = {0: 'request', 1: '&key', content: ['get-common-cellular-location', '.', '*']};\n        this.tm.addHandler(pattern, (text) => {\n\n            console.log(\"get common location query \" +  text.content);\n            let modelId = text.content[2];\n            this.modelGetJson(modelId, (jsonModel)=> {\n\n                let geneList = this.getGeneList(jsonModel);\n\n\n                if(geneList.length > 0 && areListsDifferent(geneList, this.geneList)) {\n\n                    this.geneList = geneList;\n                    this.tm.sendMsg({\n                        0: 'request',\n                        content: {0: 'FIND-CELLULAR-LOCATION-FROM-NAMES', genes: geneList}\n                    });\n\n                    let patternXml = {0: 'reply', 1: '&key', content: ['success', '.', '*'], sender: 'CAUSALA'};\n\n                    this.tm.addHandler(patternXml, (response) => {\n\n                        this.tm.replyToMsg(text, {\n                            0: 'reply',\n                            content: {0: 'success', components: response.content[2], genes: geneList}\n                        });\n\n                    });\n                }\n            });\n\n        });\n\n    }\n\n    /**\n     *  Moves gene with a name and state to a location\n     * @param {string} text {content {string}}\n     */\n    moveGene(text) {\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n            this.getTermName(contentObj.name,  (geneName) => {\n                let state = this.trimDoubleQuotes(contentObj.state);\n                let location = this.trimDoubleQuotes(contentObj.location);\n\n                this.askHuman(this.agentId, this.room, \"moveGene\", {name: geneName, state: state, location: location, cyId: \"0\"},  () => {\n\n                    // this.tm.replyToMsg(text, {0: 'reply', content: {0: 'success'}});\n                });\n            });\n        }\n    }\n\n    /**\n     *  Moves compartment with a name to a location\n     * @param {string} text {content {string}}\n     */\n\n    moveCompartment(text) {\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n            let compartmentName = this.trimDoubleQuotes(contentObj.name).replace(\"W::\", '');\n            compartmentName = compartmentName.replace(\"ONT::\", '');\n            let location = this.trimDoubleQuotes(contentObj.location);\n\n            this.askHuman(this.agentId, this.room, \"moveGene\", {name: compartmentName, state: \"\", location: location, cyId: \"0\"},  ()  => {\n\n            });\n        }\n    }\n\n\n    /**\n     * Moves upstream or downstream of a gene with a state to a direction\n     * @param {string} text {content {string}}\n     */\n    moveGeneStream(text) {\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n            this.getTermName(contentObj.name,  (geneName) => {\n                let state = this.trimDoubleQuotes(contentObj.state);\n                let location = this.trimDoubleQuotes(contentObj.location);\n                let direction = this.trimDoubleQuotes(contentObj.direction);\n                if(direction.toLowerCase().indexOf(\"upstream\")> -1)\n                    direction = \"up\";\n                else if(direction.toLowerCase().indexOf(\"downstream\")> -1)\n                    direction = \"down\";\n                this.askHuman(this.agentId, this.room, \"moveGeneStream\", {name: geneName, state: state, location:location, cyId: \"0\", direction: direction},  () => {\n                });\n            });\n        }\n    }\n\n    /**\n     * Highlights upstream or downstream of a gene with a state\n     * @param {string} text {content {string}}\n     */\n\n    highlightGeneStream(text) {\n        let contentObj = KQML.keywordify(text.content);\n        if (contentObj) {\n            this.getTermName(contentObj.name,  (geneName) => {\n                let state = this.trimDoubleQuotes(contentObj.state);\n                let direction = this.trimDoubleQuotes(contentObj.direction);\n\n                if(direction.toLowerCase().indexOf(\"upstream\")> -1)\n                    direction = \"up\";\n                else if(direction.toLowerCase().indexOf(\"downstream\")> -1)\n                    direction = \"down\";\n\n\n                this.askHuman(this.agentId, this.room, \"highlightGeneStream\", {name: geneName, state: state, cyId: \"0\", direction: direction},  () => {\n\n\n                });\n            });\n        }\n    }\n\n    /***\n     * Finds the variables between <name></name> tags\n     * @param {string} termStr ekb string\n     * @returns {Array} of gene names\n     */\n    extractGeneNamesFromEkb(termStr){\n\n        var re = new RegExp(/<name>\\s*(.*?)\\s*<\\/name>/g);\n\n        var genes = [];\n        let m = re.exec(termStr);\n        while (m) {\n            genes.push(m[1]);\n            m = re.exec(termStr);\n        }\n\n        return genes;\n    }\n\n    /**\n     * Gets the gene names from a json model\n     * @param {Array} jsonModel\n     * @returns {Array}\n     */\n    getGeneList(jsonModel){\n\n        let geneList = [];\n        jsonModel.forEach((interaction) => {\n            if (interaction.enz)\n                geneList.push(interaction.enz.name);\n            if (interaction.sub)\n                geneList.push(interaction.sub.name);\n            if (interaction.subj)\n                geneList.push(interaction.subj.name);\n            if (interaction.obj)\n                geneList.push(interaction.obj.name);\n        });\n\n\n        //unique elements\n        geneList = geneList.filter((elem, index, self) => {\n            return index === self.indexOf(elem);\n        });\n\n        return geneList;\n\n    }\n\n    /**\n     * Gets the INDRA model in json format\n     * @param {string} modelId\n     * @param {function} callback\n     */\n    modelGetJson(modelId, callback){\n\n        this.tm.sendMsg({0: 'request', content: {0: 'MODEL-GET-JSON', 'MODEL-ID': modelId}});\n\n\n        let patternXml = {0: 'reply', 1: '&key', content: ['success', '.', '*'], sender: 'MRA'};\n\n        this.tm.addHandler(patternXml, (response) => {\n\n            let jsonStr = this.trimDoubleQuotes(response.content[2]);\n\n            jsonStr = jsonStr.replace(/(\\\\\")/g, '\"');\n            let jsonModel = JSON.parse(jsonStr);\n\n            if(callback) callback(jsonModel);\n        });\n    }\n\n}\n\n\nmodule.exports = TripsVisualizationInterfaceModule;\n\n/**\n * Local function to test if two lists are different\n * @param {Array} list1\n * @param {Array} list2\n * @returns {boolean}\n */\nfunction areListsDifferent(list1, list2){\n\n    Array.prototype.diff = function(a) {\n        return this.filter(function(i) {return a.indexOf(i) < 0;});\n    };\n\n    return((list1.diff(list2)).length > 0 || (list2.diff(list1)).length > 0 )\n}",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "areListsDifferent",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~areListsDifferent",
    "access": "public",
    "export": false,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js",
    "importStyle": null,
    "description": "Local function to test if two lists are different",
    "lineNumber": 310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 263,
    "kind": "class",
    "name": "TripsVisualizationInterfaceModule",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js",
    "static": true,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "access": "public",
    "export": true,
    "importPath": "Sbgnviz-Collaborative-Editor/Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js",
    "importStyle": "TripsVisualizationInterfaceModule",
    "description": "Class to perform visual edits on the displayed graph",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "Sbgnviz-Collaborative-Editor/server/trips/TripsInterfaceModule.js~TripsInterfaceModule"
    ]
  },
  {
    "__docId__": 264,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "agentId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "agentName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WebSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket connection between the module and the agent --not server"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "askHuman",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "askHuman",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#askHuman",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "geneList",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#geneList",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "disconnect",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "setHandlers",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#setHandlers",
    "access": "public",
    "description": "Handlers that listen to TRIPS requests and perform edits",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "moveGene",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#moveGene",
    "access": "public",
    "description": " Moves gene with a name and state to a location",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "{content {string}}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "moveCompartment",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#moveCompartment",
    "access": "public",
    "description": " Moves compartment with a name to a location",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "{content {string}}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "moveGeneStream",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#moveGeneStream",
    "access": "public",
    "description": "Moves upstream or downstream of a gene with a state to a direction",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "{content {string}}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "highlightGeneStream",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#highlightGeneStream",
    "access": "public",
    "description": "Highlights upstream or downstream of a gene with a state",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "{content {string}}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "extractGeneNamesFromEkb",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#extractGeneNamesFromEkb",
    "access": "public",
    "description": "Finds the variables between <name></name> tags",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} of gene names"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "termStr",
        "description": "ekb string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "of gene names"
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "getGeneList",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#getGeneList",
    "access": "public",
    "description": "Gets the gene names from a json model",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonModel",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "modelGetJson",
    "memberof": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Sbgnviz-Collaborative-Editor/server/trips/TripsVisualizationInterfaceModule.js~TripsVisualizationInterfaceModule#modelGetJson",
    "access": "public",
    "description": "Gets the INDRA model in json format",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/server/trips/tripsModule.js",
    "content": "module.exports = (function() {\n\n    var net = require('net');\n    var StreamPair = require('./util/stream-pair.js');\n    var KQML = require('./util/KQML/kqml.js');\n    var DefaultHost = '127.0.0.1';\n    // var DefaultHost = 'causalpath.org';\n    var DefaultPort = 6200;\n\n    var socket;\n\n\n    function TripsModule(argv) {\n        this.argv = argv;\n    }\n    TripsModule.prototype = {\n\n\n\n        constructor: TripsModule,\n\n        getParameter: function(name, defalt) {\n            var i = this.argv.indexOf(name);\n            if (i >= 0 && i + 1 < this.argv.length) {\n                return this.argv[i+1];\n            } else {\n                return defalt;\n            }\n        },\n\n        isParameterTrue: function(name) {\n            var value = this.getParameter(name, 'no');\n            return /^(true|t|yes)$/i.test(value);\n        },\n\n        handleCommonParameters: function() {\n            this.host = DefaultHost;\n            this.port = DefaultPort;\n            var value;\n            if ((value = this.getParameter('-connect')) !== undefined) {\n                var i;\n                if (/^(true|t|yes)$/i.test(value)) {\n                    this.autoConnect = true;\n                } else if (/^(false|nil|no)$/i.test(value)) {\n                    this.autoConnect = false;\n                } else if ((i = value.indexOf(':')) >= 0) {\n                    this.host = value.slice(0,i);\n                    this.port = parseInt(value.slice(i+1));\n                } else {\n                    this.host = value;\n                }\n            } else {\n                this.autoConnect = true;\n            }\n\n            this.scanForPort = this.isParameterTrue('-scan');\n            this.name = this.getParameter('-name',\n                (typeof this.name == 'string') ? this.name.toLowerCase() : undefined);\n            this.groupName = this.getParameter('-group',\n                (typeof this.groupName == 'string') ? this.groupName.toLowerCase() : undefined);\n            this.debuggingEnabled = this.isParameterTrue('-debug');\n        },\n\n        //FUNDA: socket connection needs to be closed\n        disconnect: function(){\n\n             console.log(\"TripsModule socket connection closed\");\n            socket.destroy();\n        },\n\n        connect: function(onconnect) {\n            var that = this;\n            try { //funda\n                if (this.autoConnect) {\n                    // TODO detect failure to connect somehow?\n                    try {\n                        socket = new net.connect(this.port, this.host, function () {\n\n                            that.socket = KQML.wrapStream(socket);\n                            that.socket.on('data', function (msg) {\n                                that.handleMessage(KQML.keywordify(msg));\n                            });\n                            if (onconnect !== undefined) {\n                                onconnect();\n                            }\n\n                            that.isConnected = true;\n\n                            console.log(\"tripsModule: Connected to TRIPS.\");\n\n                        });\n\n                        socket.on('error', function(){  //FUNDA: this detects disconnection\n                            console.log(\"tripsModule: TRIPS is not connected.\");\n                            that.isConnected = false;\n\n\n                        });\n                    }\n                    catch(e){\n                        console.log(\"Could not connect. \" +e);\n                    }\n                } else { // connect to stdin/stdout\n                    var pair = new StreamPair(process.stdin, process.stdout);\n\n                    this.socket = KQML.wrapStream(pair);\n                    this.socket.on('data', function (msg) {\n                        that.handleMessage(KQML.keywordify(msg));\n                    });\n                    if (onconnect !== undefined) {\n                        onconnect();\n                    }\n                    that.isConnected = true;\n                    console.log(\"tripsModule: Connected to TRIPS.\");\n                }\n\n\n            }\n            catch(e) {\n                console.log(e + \" Trips is disconnected.\");\n            }\n        },\n\n        register: function() {\n            if (this.name !== undefined) {\n                var msg = { 0: 'register', name: this.name };\n                if (this.groupName !== undefined) {\n                    msg.groupName = this.groupName;\n                }\n                this.sendMsg(msg);\n            }\n        },\n\n        init: function(oninit) {\n            this.handlers = {};\n            //  this.pendingMessages = [];\n            this.continuations = {};\n            this.handleCommonParameters();\n            var that = this;\n            this.connect(function() {\n                that.register();\n                if (oninit !== undefined) {\n                    oninit();\n                }\n            });\n        },\n\n        debug: function(msg) {\n            if (this.debuggingEnabled) {\n                process.stderr.write(msg + \"\\n\");\n            }\n        },\n\n        addHandler: function(pattern, handler, subscribe) {\n            if (subscribe === undefined || subscribe) {\n                this.sendMsg({ 0: 'subscribe', content: pattern });\n            }\n            this.handlers[KQML.toKQML(pattern)] =\n                { pattern: pattern, handler: handler };\n        },\n\n        removeHandler: function(pattern) {\n            this.handlers[KQML.toKQML(pattern)] = undefined;\n        },\n\n        sendWithContinuation: function(msg, cont) {\n            console.log(this.continuations);\n            var replyId;\n            do {\n                replyId = this.name + Math.floor(Math.random() *1000000);\n            } while (replyId in this.continuations);\n            this.continuations[replyId] = cont;\n            var msgWithReplyId = { replyWith: replyId };\n            for (var p in msg) { msgWithReplyId[p] = msg[p] }\n            this.sendMsg(msgWithReplyId);\n        },\n\n        /* TODO? not sure I *can* do this in node.js\n         sendAndWait: function(msg) {\n         },\n         */\n\n        sendMsg: function(msg) {\n\n            if(this.isConnected)\n                this.socket.write(msg);\n\n\n        },\n\n        replyToMsg: function(msg, reply) {\n            var modReply = { receiver: msg.sender };\n            for (var p in reply) { modReply[p] = reply[p] }\n            if ('replyWith' in msg) {\n                modReply.inReplyTo = msg.replyWith;\n            }\n            this.sendMsg(modReply);\n        },\n\n        handleMessage: function(message) {\n            //FUNDA?????\n            if ('inReplyTo' in message) {\n                var replyId = message.inReplyTo;\n                if (replyId in this.continuations) {\n                    var cont = this.continuations[replyId];\n                    this.continuations[replyId] = undefined;\n                    cont(message);\n                } else {\n                    this.sendMsg({ 0: 'error', content: ['bad-reply-id', replyId] });\n                }\n            } else { // not a reply, call handler\n                var pat;\n                for (var p in this.handlers) {\n                    if (KQML.patternMatches(this.handlers[p].pattern, message)) {\n                        pat = p;\n\n\n                        break;\n\n\n                    }\n                }\n                if (pat === undefined) {\n                    //FUNDA process.stderr.write(\"No handler for message: \" + KQML.toKQML(message) + \" in \"  + this.name + \"\\n\");\n                } else {\n                    var handler = this.handlers[pat].handler;\n                    handler.call(this, message);\n                }\n            }\n        },\n\n        run: function() {\n            this.sendMsg({ 0: 'tell', content: ['module-status', 'ready'] });\n            // NOTE: receiving messages handled by stream ondata callbacks\n        }\n\n\n    }\n\n    TripsModule.prototype.isConnected = true; //funda\n    return TripsModule;\n\n})();",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/server/trips/tripsModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "Sbgnviz-Collaborative-Editor/server.js",
    "content": "require('./server/index.js').run(__dirname+'/index.js', {noRedis: true});\n",
    "static": true,
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "SBGNViz Collaborative Editor User Guide\n=======================================\n\nThe editor allows human curators and computer agents to work on the same\npathway model, and communicate through text and images. On the server\nside, we have an application server that keeps the model, handles\ncommunication across clients, and performs operational transformation.\nModel visualization and editing are handled on the client side. The\neditor visualizes information about cellular processes and pathways in\nSBGN (Systems Biology Graphical Notation) format. It allows for\nautomatic graph layout, editing and highlighting facilities.\n\nInstallation\n------------\n\n### Install dependencies on Debian/Ubuntu\n\nInstall node.js and mongodb servers first.\n\nNode:\n\n```\ncurl -sL https://deb.nodesource.com/setup_0.12 | sudo -E bash - <br />\nsudo apt-get install -y nodejs <br />\n```\n\nMongo:\n```\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com/ --recv EA312927 <br />\necho \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list <br />\nsudo apt-get update <br />\nsudo apt-get install -y mongodb-org <br />\n```\nIf mongo does not work:\n```\nsudo apt-get install upstart-sysv\n```\n\n### Install dependencies on Mac\n\n```\nbrew install node\nbrew install tcl-tk\nbrew install mongodb\nbrew install nodejs\n```\n\n### Clone from github and install node modules\n```\nhttps://github.com/fdurupinar/Sbgnviz-Collaborative-Editor.git\ncd Sbgnviz-Collaborative-Editor\nnpm install\n```\n\n\nRunning the server\n------------------\nWith Bob:\n```\nnode server\n```\n\nWithout Bob:\n\n```\nnode server -notrips\n\n  ```\n\nIn order to open a client enter `http://localhost:3000` in the address bar of your browser.\n\nComputer Agent API\n------------------\n\nComputer agents are connected to the node.js http server via websockets\n(socket.io.js). An agent is initialized with a *name (string)* and a\nunique *ID (string).*\n\n**Constructor**: Agent (string name, string id)\n\n### Public Attributes:\n\n- **agentId**: (string) A unique id\n- **agentName**: (string) Agent name\n- **colorCode**: A specific color to identify the agent operations. It\nshould be a string in hsla format as: “hsla(*H*, *S*, *L*%, 1)”, where\n*H (integer)*, *S (float)* and *L (float)* are hue, saturation and\nlightness values.\n- **selectedNode**: The node object on which the agent is performing\noperations. It has attributes such as position\n{x:< posX >,y:< posY >}, width, height, borderWidth,\nborderHeight, backgroundColor, sbgnLabel, sbgnStatesAndInfos =\n{clazz:< className >, state =\n{value:< stateValue >,variable:< stateVariable >}}.\n- **selectedEdge**: The edge object on which the agent is performing\noperations. It has attributes such as cardinality, lineColor and width.\n- **opHistory**: History of operations as an array of strings in the\nformat: “*UserName* (*date*): *Command*”.\n- **chatHistory**: Chat history as an array of messages.\n- **userList**: List of connected user ids.\n\n### Private Attributes:\n\n- **room**: The document id that identifies the shared model. It is the\nstring after http:<ip>:3000/ in the server address.\n- **socket**: The web socket between the server and agent\n- **pageDoc**: The document that the shared model is stored.\n\n\n#### Requests to send to the server:\n\n\n **reqName**                          |  **param**                                                                         |\n| ----------------------------------- | ---------------------------------------------------- |\n| “agentSendImageRequest”              | {room:< room >, userId:< agentId >, img: < image file >,                         |\n|                                     | fileName < name of image file >, tabIndex: < index or id of the tab to display image >, tabLabel:< Label of tab to be displayed >}             |\n| \"agentSetLayoutPropertiesRequest\"   | {room:< room >, userId:< agentId >,name: < layout name >,                       |\n|                                     | nodeRepulsion: < node repulsion value > ,        |\n|                                     | nodeOverlap:< node overlap percentage >,          |\n|                                     | idealEdgeLength:< ideal edge length value >,      |\n|                                     | edgeElasticity:< edge elasticity value >,    |\n|                                     | nestingFactor:< nesting factor value >,      |\n|                                     | gravity:< gravity value >,   |\n|                                     | numIter:< number of iterations >,|\n|                                     | tile:< boolean value to tile disconnected >,|\n|                                     | animate:< boolean value >,    |\n|                                     | randomize:< boolean value >}  |\n|\"agentSetGeneralPropertiesRequest\"  | {room:< room >, userId:< agentId >} |\n|\"agentSetGridPropertiesRequest\"  | {room:< room >, userId:< agentId >} |\n|  “agentRunLayoutRequest”            | {room:< room >, userId:< agentId >}                          |\n|  “agentAddNodeRequest”              | {room:< room >, userId:< agentId >,{{position: x: < position x >,           |\n|                                     | y: < position y >}, data:{         |\n|                                     | class: < sbgn class >}}   |\n|  “agentAddEdgeRequest”              | {room:< room >, userId:< agentId >, {data:{source: < source node id >,  |\n|                                     | target: < target node id >,   |\n|                                     | class: < sbgn class >}}}    |\n|\"agentSearchByLabelRequest\"          | {room:< room >, userId:< agentId >,label: < label to be highlighted>}   |\n|\"agentDeleteElesRequest\"             | {room:< room >, userId:< agentId >,type: < \"smart\" or \"simple\" > elementIds: < element ids to delete simply >} |\n|\"agentUpdateVisibilityStatusRequest\"       | {room:< room >, userId:< agentId >,val:< \"hide\" or \"show\" or \"showAll\" >,  elementIds:< array of element ids or null for showAll >|\n|\"agentUpdateHighlightStatusRequest\"       | {room:< room >, userId:< agentId >,val:< \"neighbors\" or \"processes\" or \"remove\">,  elementIds:< array of element ids or null for remove >|\n|\"agentUpdateExpandCollapseStatusRequest\"       | {room:< room >, userId:< agentId >,val:< \"expand\" or \"collapse\" >,  elementIds:<array of element ids>|\n| “agentChangeNodeAttributeRequest”  | {room:< room >, userId:< agentId >,id: < node id >,             |\n|                                     | attStr: < node attribute name in the model >             |\n|                                     | attVal:< node attribute value >}                          |\n|                                     | attStr takes the following values: “data”, “data.bbox”, “data.bbox.w”, “data.bbox.h”, “data.class”, “data.cloneMarker”, \"data.font-family\", \"data.font-size\", \"data.font-weight\", \"data.font-style\", \"data.statesandinfos\", \"data.label\", \"data.labelsize\", \"data.parent\", \"data.ports\", \"data.border-width\", \"data.background-color\", \"data.background-opacity\", \"highlightColor, expandCollapseStatus\", \"highlightStatus\", \"visibilityStatus\"   |\n|  “agentChangeEdgeAttributeRequest”  | {room:< room >, userId:< agentId >,id: < node id >,                                   |\n|                                     | attStr: < edge attribute name in the model >        |\n|                                     | attVal:< edge attribute value >}                     |\n|                                     | attStr takes the following values: “data.source”, “data.target”, “data.portsource”, “data.porttarget”, “data.class”,   “data.line-color”,  “data.width”, “data.cardinality”,“highlightColor”, \"visibilityStatus\", \"highlightStatus\" , \"bendPoints\"   |\n|  “agentMoveNodeRequest”             | {room:< room >, userId:< agentId >,id: < node id >,   pos: {x:< new position x >, y: <  new position y >}}                   |\n|  “agentAlignRequest”               | {room:< room >, userId:< agentId >,nodeIds: < node ids to align >, horizontal:<\" top\", \"bottom\", \"center\", \"none\" >, vertical:< \"top\", \"bottom\", \"center\", \"none\" > , alignTo:< node id to align nodes with nodeIds >     |\n|  “agentAddCompoundRequest”          | {room:< room >, userId:< agentId >,type: < compound type as “complex” or “compartment” >,              |\n|                                     | selectedNodeArr: < array of node ids >}                              |\n|\t\t\"agentActiveRoomsRequest\"\t\t\t\t\t| {room:< room >, userId:< agentId >}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|   \"agentUndoRequest\"          |  {room:< room >, userId:< agentId >} |\n|   \"agentRedoRequest\"          |   {room:< room >, userId:< agentId >}|\n|   \"agentMessage\"          |{ room: < room >, userId: < agentId >, comment:  < message string -- can be raw html>, targets: < user ids or * to include all users in the room >}   |\n|   \"agentMergeGraphRequest\"          |{ room: < room >, userId: < agentId >, graph: <graph content >, type: < \"sbgn\" or \"json\" >, cyId: < tab id | 0 if not specified > }   |\n|   \"agentDisplaySbgnRequest\"          |{ room: < room >, userId: < agentId >, sbgn: < sbgn content >, cyId: < tab id or 0 if not specified > }   |\n|   \"agentDisplaySifRequest\"          |{ room: < room >, userId: < agentId >, sif: < sif content >, cyId: < tab id or 0 if not specified > }   |\n|   \"agentAddProvenanceRequest\"          | { room: < room >, userId: < agentId >, html:< html content >, cyId: < tab id or 0 if not specified >, title:< optional >, pc:< optional, Pathway Commons links > }   |\n|   \"agentRemoveBobRequest\"          | { room:< room >, userId:< agentId > } , Disconnects Trips agent |\n|   \"agentUpdateSampleSentencesRequest\"          | { json: <json file for sample sentences. Sample format can be found at: /server/data/sampleSentences.json>room:< room >, userId:< agentId > }|\n\n\nIn order to set up and run an agent:\n\n```javascript\nagent = new Agent(agentName, agentId);\n    var socket = agent.connectToServer(serverIp, function(){\n        //callback operations\n\n\n    agent.loadModel(function() {\n        agent.loadOperationHistory(function(){\n            agent.loadChatHistory(function(){\n                //callback operations\n            });\n        });\n    });\n\n    agent.listen(function(){\n        socket.on('operation', function(data){\n            //callback operations\n        });\n\n        socket.on('message', function(data){\n            //callback operations\n        });\n\n        socket.on('userList', function(data){\n            //callback operations\n        });\n\n        socket.on('imageFile', function(data){\n            //callback operations\n        });\n\n        socket.on('processToIntegrate', function(data){\n            //callback operations\n        });\n    });\n\n});\n\n\n```\nAn example web-based agent can be found in: `Sbgnviz-Collaborative-Editor/agent-interaction/computerAgent.html`\n\nYou can zoom and pan with the mouse wheel and left click + moving the mouse\n\nCommand History:\n\nJSON array as:\n```\n[\n    {\n    userName: //name of the user who gave the command\n    name: //name of the command\n    id: //id of the affected element\n    param: //operation parameters\n    [\n        {\n        x: //node position x\n        y: //node position y\n        class: //node or edge sbgnclass\n        source: //edge source\n        target: //edge target\n        }\n    ]\n    date: //date of the command\n    }\n]\n```\n\nHistory Manager\n---------------\n\nEach command is stored in the model as a part of command history.\nCommand structure is as follows:\n\n- opName: set | add | delete | init\n- opTarget: node | edge | node group | edge group\n- opAttr: id| position | sbgnclass | sbgnlabel | width | height |\nbackgroundColor | borderColor | borderWidth | parent | isCloneMarker |\nisMultimer | sbgnStatesAndInfos| source| target |lineColor | lineWidth|\nsbgncardinality\n- elId: id of the node or edge | id array of the node or edge group\n- elType: \"node\" or \"edge\"\n- param:\n- prevParam:\n\n### JSON Model Structure\n\n-   users\n    -   name\n-   page\n    -   list\n    -   room\n    -   doc\n        -   userIds\n        -   history\n        -   undoIndex\n        -   Images\n        -   Context\n            -   name\n            -   relevance\n            -   confidence\n        -   cy //sbgn-related\n            -   layoutProperties\n            -   nodes\n                -   \\[nodeId\\]\n                    -   addedLater //to sync. node addition\n                    -   visibilityStatus\n                    -   highlightStatus\n                    -   expandCollapseStatus\n                    -   highlightColor\n                    -   position\n                    -   data\n                        -   id\n                        -   class\n                        -   label\n                        -   bbox\n                            -   w\n                            -   h\n                        -   border-color\n                        -   border-width\n                        -   background-color\n                        -   background-opacity\n                        -   font-color\n                        -   font-weight\n                        -   font-style\n                        -   font-size\n                        -   cloneMarker\n                        -   parent\n                        -   ports\n                        -   statesAndInfos\n\n            -   edges\n                -   \\[edgeId\\]\n                    -   id\n                    -   addedLater //to sync. edge addition\n                    -   highlightStatus\n                    -   visibilityStatus\n                    -   expandCollapseStatus\n                    -   highlightColor\n                    -   bendPoints\n                    -   data\n                        -   class\n                        -   source\n                        -   target\n                        -   portsource\n                        -   porttarget\n                        -   line-color\n                        -   width\n                        -   bendPointPositions\n                        -   cardinality\n        -   py // pysb-related\n        -   //biopax-related\n\n",
    "longname": "/Users/durupina/CWC/Sbgnviz-Collaborative-Editor/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]